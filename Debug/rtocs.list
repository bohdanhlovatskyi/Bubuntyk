
rtocs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d228  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  0800d3c8  0800d3c8  0001d3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db08  0800db08  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800db08  0800db08  0001db08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db10  0800db10  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db10  0800db10  0001db10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db14  0800db14  0001db14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800db18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055cc  2000008c  0800dba4  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005658  0800dba4  00025658  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032ac5  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005923  00000000  00000000  00052b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d70  00000000  00000000  000584a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b90  00000000  00000000  0005a218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d80b  00000000  00000000  0005bda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ac58  00000000  00000000  000795b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f90c  00000000  00000000  000a420b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00143b17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008040  00000000  00000000  00143b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d3b0 	.word	0x0800d3b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	0800d3b0 	.word	0x0800d3b0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	// initialize sd card now to check whether it is working
	// second arg is basically prefic of path to file
	FRESULT fres = f_mount(&FatFs, "", 1);
 80005ae:	2201      	movs	r2, #1
 80005b0:	495c      	ldr	r1, [pc, #368]	; (8000724 <MX_FREERTOS_Init+0x17c>)
 80005b2:	485d      	ldr	r0, [pc, #372]	; (8000728 <MX_FREERTOS_Init+0x180>)
 80005b4:	f007 f8f8 	bl	80077a8 <f_mount>
 80005b8:	4603      	mov	r3, r0
 80005ba:	71fb      	strb	r3, [r7, #7]
	if (fres != FR_OK) {
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d013      	beq.n	80005ea <MX_FREERTOS_Init+0x42>
		myprintf("f_mount error (%i)\r\n", fres);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4959      	ldr	r1, [pc, #356]	; (800072c <MX_FREERTOS_Init+0x184>)
 80005c8:	4859      	ldr	r0, [pc, #356]	; (8000730 <MX_FREERTOS_Init+0x188>)
 80005ca:	f00c fb3d 	bl	800cc48 <siprintf>
 80005ce:	4858      	ldr	r0, [pc, #352]	; (8000730 <MX_FREERTOS_Init+0x188>)
 80005d0:	f7ff fe10 	bl	80001f4 <strlen>
 80005d4:	4603      	mov	r3, r0
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005dc:	4954      	ldr	r1, [pc, #336]	; (8000730 <MX_FREERTOS_Init+0x188>)
 80005de:	4855      	ldr	r0, [pc, #340]	; (8000734 <MX_FREERTOS_Init+0x18c>)
 80005e0:	f003 fd30 	bl	8004044 <HAL_UART_Transmit>
		Error_Handler();
 80005e4:	f000 fe72 	bl	80012cc <Error_Handler>
 80005e8:	e00e      	b.n	8000608 <MX_FREERTOS_Init+0x60>
	} else {
		myprintf("SD card mounted\n");
 80005ea:	4953      	ldr	r1, [pc, #332]	; (8000738 <MX_FREERTOS_Init+0x190>)
 80005ec:	4850      	ldr	r0, [pc, #320]	; (8000730 <MX_FREERTOS_Init+0x188>)
 80005ee:	f00c fb2b 	bl	800cc48 <siprintf>
 80005f2:	484f      	ldr	r0, [pc, #316]	; (8000730 <MX_FREERTOS_Init+0x188>)
 80005f4:	f7ff fdfe 	bl	80001f4 <strlen>
 80005f8:	4603      	mov	r3, r0
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000600:	494b      	ldr	r1, [pc, #300]	; (8000730 <MX_FREERTOS_Init+0x188>)
 8000602:	484c      	ldr	r0, [pc, #304]	; (8000734 <MX_FREERTOS_Init+0x18c>)
 8000604:	f003 fd1e 	bl	8004044 <HAL_UART_Transmit>
	}
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of telemetryFileMutex */
  telemetryFileMutexHandle = osMutexNew(&telemetryFileMutex_attributes);
 8000608:	484c      	ldr	r0, [pc, #304]	; (800073c <MX_FREERTOS_Init+0x194>)
 800060a:	f008 fc61 	bl	8008ed0 <osMutexNew>
 800060e:	4603      	mov	r3, r0
 8000610:	4a4b      	ldr	r2, [pc, #300]	; (8000740 <MX_FREERTOS_Init+0x198>)
 8000612:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of txThreadSem */
  txThreadSemHandle = osSemaphoreNew(1, 1, &txThreadSem_attributes);
 8000614:	4a4b      	ldr	r2, [pc, #300]	; (8000744 <MX_FREERTOS_Init+0x19c>)
 8000616:	2101      	movs	r1, #1
 8000618:	2001      	movs	r0, #1
 800061a:	f008 fd67 	bl	80090ec <osSemaphoreNew>
 800061e:	4603      	mov	r3, r0
 8000620:	4a49      	ldr	r2, [pc, #292]	; (8000748 <MX_FREERTOS_Init+0x1a0>)
 8000622:	6013      	str	r3, [r2, #0]

  /* creation of rxThreadSem */
  rxThreadSemHandle = osSemaphoreNew(1, 1, &rxThreadSem_attributes);
 8000624:	4a49      	ldr	r2, [pc, #292]	; (800074c <MX_FREERTOS_Init+0x1a4>)
 8000626:	2101      	movs	r1, #1
 8000628:	2001      	movs	r0, #1
 800062a:	f008 fd5f 	bl	80090ec <osSemaphoreNew>
 800062e:	4603      	mov	r3, r0
 8000630:	4a47      	ldr	r2, [pc, #284]	; (8000750 <MX_FREERTOS_Init+0x1a8>)
 8000632:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  osSemaphoreAcquire(txThreadSemHandle, 0);
 8000634:	4b44      	ldr	r3, [pc, #272]	; (8000748 <MX_FREERTOS_Init+0x1a0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f008 fde0 	bl	8009200 <osSemaphoreAcquire>
  osSemaphoreAcquire(rxThreadSemHandle, 0);
 8000640:	4b43      	ldr	r3, [pc, #268]	; (8000750 <MX_FREERTOS_Init+0x1a8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f008 fdda 	bl	8009200 <osSemaphoreAcquire>
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of accTimer */
  accTimerHandle = osTimerNew(accTimerCallback, osTimerPeriodic, NULL, &accTimer_attributes);
 800064c:	4b41      	ldr	r3, [pc, #260]	; (8000754 <MX_FREERTOS_Init+0x1ac>)
 800064e:	2200      	movs	r2, #0
 8000650:	2101      	movs	r1, #1
 8000652:	4841      	ldr	r0, [pc, #260]	; (8000758 <MX_FREERTOS_Init+0x1b0>)
 8000654:	f008 fb92 	bl	8008d7c <osTimerNew>
 8000658:	4603      	mov	r3, r0
 800065a:	4a40      	ldr	r2, [pc, #256]	; (800075c <MX_FREERTOS_Init+0x1b4>)
 800065c:	6013      	str	r3, [r2, #0]

  /* creation of temperatureTimer */
  temperatureTimerHandle = osTimerNew(temperatureTimerCallback, osTimerPeriodic, NULL, &temperatureTimer_attributes);
 800065e:	4b40      	ldr	r3, [pc, #256]	; (8000760 <MX_FREERTOS_Init+0x1b8>)
 8000660:	2200      	movs	r2, #0
 8000662:	2101      	movs	r1, #1
 8000664:	483f      	ldr	r0, [pc, #252]	; (8000764 <MX_FREERTOS_Init+0x1bc>)
 8000666:	f008 fb89 	bl	8008d7c <osTimerNew>
 800066a:	4603      	mov	r3, r0
 800066c:	4a3e      	ldr	r2, [pc, #248]	; (8000768 <MX_FREERTOS_Init+0x1c0>)
 800066e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */

  if (accTimerHandle != NULL)  {
 8000670:	4b3a      	ldr	r3, [pc, #232]	; (800075c <MX_FREERTOS_Init+0x1b4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d010      	beq.n	800069a <MX_FREERTOS_Init+0xf2>
      status = osTimerStart(accTimerHandle, 10000U);       // start timer
 8000678:	4b38      	ldr	r3, [pc, #224]	; (800075c <MX_FREERTOS_Init+0x1b4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f242 7110 	movw	r1, #10000	; 0x2710
 8000680:	4618      	mov	r0, r3
 8000682:	f008 fbf7 	bl	8008e74 <osTimerStart>
 8000686:	4603      	mov	r3, r0
 8000688:	4a38      	ldr	r2, [pc, #224]	; (800076c <MX_FREERTOS_Init+0x1c4>)
 800068a:	6013      	str	r3, [r2, #0]
      if (status != osOK) {
 800068c:	4b37      	ldr	r3, [pc, #220]	; (800076c <MX_FREERTOS_Init+0x1c4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d004      	beq.n	800069e <MX_FREERTOS_Init+0xf6>
        // Timer could not be started
    	Error_Handler();
 8000694:	f000 fe1a 	bl	80012cc <Error_Handler>
 8000698:	e001      	b.n	800069e <MX_FREERTOS_Init+0xf6>
      }
  } else {
	  Error_Handler();
 800069a:	f000 fe17 	bl	80012cc <Error_Handler>
  }

  if (temperatureTimerHandle != NULL)  {
 800069e:	4b32      	ldr	r3, [pc, #200]	; (8000768 <MX_FREERTOS_Init+0x1c0>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d010      	beq.n	80006c8 <MX_FREERTOS_Init+0x120>
        status = osTimerStart(temperatureTimerHandle, 10000U);       // start timer
 80006a6:	4b30      	ldr	r3, [pc, #192]	; (8000768 <MX_FREERTOS_Init+0x1c0>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f242 7110 	movw	r1, #10000	; 0x2710
 80006ae:	4618      	mov	r0, r3
 80006b0:	f008 fbe0 	bl	8008e74 <osTimerStart>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a2d      	ldr	r2, [pc, #180]	; (800076c <MX_FREERTOS_Init+0x1c4>)
 80006b8:	6013      	str	r3, [r2, #0]
        if (status != osOK) {
 80006ba:	4b2c      	ldr	r3, [pc, #176]	; (800076c <MX_FREERTOS_Init+0x1c4>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d004      	beq.n	80006cc <MX_FREERTOS_Init+0x124>
          // Timer could not be started
      	Error_Handler();
 80006c2:	f000 fe03 	bl	80012cc <Error_Handler>
 80006c6:	e001      	b.n	80006cc <MX_FREERTOS_Init+0x124>
        }
    } else {
  	  Error_Handler();
 80006c8:	f000 fe00 	bl	80012cc <Error_Handler>
    }
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  telemetryQueueHandle = osMessageQueueNew(16, sizeof(TelemetryBase), &telemetryQueue_attributes);
 80006cc:	4a28      	ldr	r2, [pc, #160]	; (8000770 <MX_FREERTOS_Init+0x1c8>)
 80006ce:	2138      	movs	r1, #56	; 0x38
 80006d0:	2010      	movs	r0, #16
 80006d2:	f008 fe4f 	bl	8009374 <osMessageQueueNew>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4a26      	ldr	r2, [pc, #152]	; (8000774 <MX_FREERTOS_Init+0x1cc>)
 80006da:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006dc:	4a26      	ldr	r2, [pc, #152]	; (8000778 <MX_FREERTOS_Init+0x1d0>)
 80006de:	2100      	movs	r1, #0
 80006e0:	4826      	ldr	r0, [pc, #152]	; (800077c <MX_FREERTOS_Init+0x1d4>)
 80006e2:	f008 fa89 	bl	8008bf8 <osThreadNew>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4a25      	ldr	r2, [pc, #148]	; (8000780 <MX_FREERTOS_Init+0x1d8>)
 80006ea:	6013      	str	r3, [r2, #0]

  /* creation of rxDataThread */
  rxDataThreadHandle = osThreadNew(startRxDataThread, NULL, &rxDataThread_attributes);
 80006ec:	4a25      	ldr	r2, [pc, #148]	; (8000784 <MX_FREERTOS_Init+0x1dc>)
 80006ee:	2100      	movs	r1, #0
 80006f0:	4825      	ldr	r0, [pc, #148]	; (8000788 <MX_FREERTOS_Init+0x1e0>)
 80006f2:	f008 fa81 	bl	8008bf8 <osThreadNew>
 80006f6:	4603      	mov	r3, r0
 80006f8:	4a24      	ldr	r2, [pc, #144]	; (800078c <MX_FREERTOS_Init+0x1e4>)
 80006fa:	6013      	str	r3, [r2, #0]

  /* creation of txDataThread */
  txDataThreadHandle = osThreadNew(startTxDataThread, NULL, &txDataThread_attributes);
 80006fc:	4a24      	ldr	r2, [pc, #144]	; (8000790 <MX_FREERTOS_Init+0x1e8>)
 80006fe:	2100      	movs	r1, #0
 8000700:	4824      	ldr	r0, [pc, #144]	; (8000794 <MX_FREERTOS_Init+0x1ec>)
 8000702:	f008 fa79 	bl	8008bf8 <osThreadNew>
 8000706:	4603      	mov	r3, r0
 8000708:	4a23      	ldr	r2, [pc, #140]	; (8000798 <MX_FREERTOS_Init+0x1f0>)
 800070a:	6013      	str	r3, [r2, #0]

  /* creation of telemetryThread */
  telemetryThreadHandle = osThreadNew(startTelemetryThread, NULL, &telemetryThread_attributes);
 800070c:	4a23      	ldr	r2, [pc, #140]	; (800079c <MX_FREERTOS_Init+0x1f4>)
 800070e:	2100      	movs	r1, #0
 8000710:	4823      	ldr	r0, [pc, #140]	; (80007a0 <MX_FREERTOS_Init+0x1f8>)
 8000712:	f008 fa71 	bl	8008bf8 <osThreadNew>
 8000716:	4603      	mov	r3, r0
 8000718:	4a22      	ldr	r2, [pc, #136]	; (80007a4 <MX_FREERTOS_Init+0x1fc>)
 800071a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	0800d460 	.word	0x0800d460
 8000728:	20004bcc 	.word	0x20004bcc
 800072c:	0800d464 	.word	0x0800d464
 8000730:	200000a8 	.word	0x200000a8
 8000734:	2000514c 	.word	0x2000514c
 8000738:	0800d47c 	.word	0x0800d47c
 800073c:	0800d994 	.word	0x0800d994
 8000740:	20004e04 	.word	0x20004e04
 8000744:	0800d9a4 	.word	0x0800d9a4
 8000748:	2000504c 	.word	0x2000504c
 800074c:	0800d9b4 	.word	0x0800d9b4
 8000750:	20004e00 	.word	0x20004e00
 8000754:	0800d974 	.word	0x0800d974
 8000758:	08000c9d 	.word	0x08000c9d
 800075c:	20004e08 	.word	0x20004e08
 8000760:	0800d984 	.word	0x0800d984
 8000764:	08000ced 	.word	0x08000ced
 8000768:	20004e18 	.word	0x20004e18
 800076c:	20005054 	.word	0x20005054
 8000770:	0800d9c4 	.word	0x0800d9c4
 8000774:	20004e14 	.word	0x20004e14
 8000778:	0800d8e4 	.word	0x0800d8e4
 800077c:	080007a9 	.word	0x080007a9
 8000780:	20004bbc 	.word	0x20004bbc
 8000784:	0800d908 	.word	0x0800d908
 8000788:	080007b9 	.word	0x080007b9
 800078c:	20004e0c 	.word	0x20004e0c
 8000790:	0800d92c 	.word	0x0800d92c
 8000794:	08000931 	.word	0x08000931
 8000798:	20005050 	.word	0x20005050
 800079c:	0800d950 	.word	0x0800d950
 80007a0:	08000abd 	.word	0x08000abd
 80007a4:	20004e10 	.word	0x20004e10

080007a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f008 fab3 	bl	8008d1c <osDelay>
 80007b6:	e7fb      	b.n	80007b0 <StartDefaultTask+0x8>

080007b8 <startRxDataThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startRxDataThread */
void startRxDataThread(void *argument)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]

	uint8_t firmwareChunk[16];
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(rxThreadSemHandle, osWaitForever);
 80007c0:	4b4e      	ldr	r3, [pc, #312]	; (80008fc <startRxDataThread+0x144>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007c8:	4618      	mov	r0, r3
 80007ca:	f008 fd19 	bl	8009200 <osSemaphoreAcquire>

	  status = osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 80007ce:	4b4c      	ldr	r3, [pc, #304]	; (8000900 <startRxDataThread+0x148>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007d6:	4618      	mov	r0, r3
 80007d8:	f008 fc00 	bl	8008fdc <osMutexAcquire>
 80007dc:	4603      	mov	r3, r0
 80007de:	4a49      	ldr	r2, [pc, #292]	; (8000904 <startRxDataThread+0x14c>)
 80007e0:	6013      	str	r3, [r2, #0]
	  if (status != osOK) {
 80007e2:	4b48      	ldr	r3, [pc, #288]	; (8000904 <startRxDataThread+0x14c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d00f      	beq.n	800080a <startRxDataThread+0x52>
		  myprintf("Could not take mutex for writing into file");
 80007ea:	4947      	ldr	r1, [pc, #284]	; (8000908 <startRxDataThread+0x150>)
 80007ec:	4847      	ldr	r0, [pc, #284]	; (800090c <startRxDataThread+0x154>)
 80007ee:	f00c fa2b 	bl	800cc48 <siprintf>
 80007f2:	4846      	ldr	r0, [pc, #280]	; (800090c <startRxDataThread+0x154>)
 80007f4:	f7ff fcfe 	bl	80001f4 <strlen>
 80007f8:	4603      	mov	r3, r0
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000800:	4942      	ldr	r1, [pc, #264]	; (800090c <startRxDataThread+0x154>)
 8000802:	4843      	ldr	r0, [pc, #268]	; (8000910 <startRxDataThread+0x158>)
 8000804:	f003 fc1e 	bl	8004044 <HAL_UART_Transmit>
 8000808:	e06c      	b.n	80008e4 <startRxDataThread+0x12c>
	  } else {
		  wr = f_open(&telemetryFile, "FIMWARE2.bin", FA_WRITE | FA_CREATE_ALWAYS);
 800080a:	220a      	movs	r2, #10
 800080c:	4941      	ldr	r1, [pc, #260]	; (8000914 <startRxDataThread+0x15c>)
 800080e:	4842      	ldr	r0, [pc, #264]	; (8000918 <startRxDataThread+0x160>)
 8000810:	f007 f82e 	bl	8007870 <f_open>
 8000814:	4603      	mov	r3, r0
 8000816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


		  if(wr == FR_OK) {
 800081a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800081e:	2b00      	cmp	r3, #0
 8000820:	d10f      	bne.n	8000842 <startRxDataThread+0x8a>
			  myprintf("I was able to open 'FIMWARE2.bin' for writing. Waiting for a chunk of code (up to 2048 bytes)\n");
 8000822:	493e      	ldr	r1, [pc, #248]	; (800091c <startRxDataThread+0x164>)
 8000824:	4839      	ldr	r0, [pc, #228]	; (800090c <startRxDataThread+0x154>)
 8000826:	f00c fa0f 	bl	800cc48 <siprintf>
 800082a:	4838      	ldr	r0, [pc, #224]	; (800090c <startRxDataThread+0x154>)
 800082c:	f7ff fce2 	bl	80001f4 <strlen>
 8000830:	4603      	mov	r3, r0
 8000832:	b29a      	uxth	r2, r3
 8000834:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000838:	4934      	ldr	r1, [pc, #208]	; (800090c <startRxDataThread+0x154>)
 800083a:	4835      	ldr	r0, [pc, #212]	; (8000910 <startRxDataThread+0x158>)
 800083c:	f003 fc02 	bl	8004044 <HAL_UART_Transmit>
 8000840:	e011      	b.n	8000866 <startRxDataThread+0xae>
		  } else {
			  myprintf("f_open error (%i)\n", wr);
 8000842:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000846:	461a      	mov	r2, r3
 8000848:	4935      	ldr	r1, [pc, #212]	; (8000920 <startRxDataThread+0x168>)
 800084a:	4830      	ldr	r0, [pc, #192]	; (800090c <startRxDataThread+0x154>)
 800084c:	f00c f9fc 	bl	800cc48 <siprintf>
 8000850:	482e      	ldr	r0, [pc, #184]	; (800090c <startRxDataThread+0x154>)
 8000852:	f7ff fccf 	bl	80001f4 <strlen>
 8000856:	4603      	mov	r3, r0
 8000858:	b29a      	uxth	r2, r3
 800085a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800085e:	492b      	ldr	r1, [pc, #172]	; (800090c <startRxDataThread+0x154>)
 8000860:	482b      	ldr	r0, [pc, #172]	; (8000910 <startRxDataThread+0x158>)
 8000862:	f003 fbef 	bl	8004044 <HAL_UART_Transmit>
		  }


		  for (;;) {
			  memset(firmwareChunk, 0, sizeof(firmwareChunk));
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	2210      	movs	r2, #16
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f00c f90e 	bl	800ca90 <memset>
			  HAL_UART_Receive(&huart2, firmwareChunk, 4, HAL_MAX_DELAY);
 8000874:	f107 010c 	add.w	r1, r7, #12
 8000878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800087c:	2204      	movs	r2, #4
 800087e:	4824      	ldr	r0, [pc, #144]	; (8000910 <startRxDataThread+0x158>)
 8000880:	f003 fc72 	bl	8004168 <HAL_UART_Receive>
			  cmpRes = strcmp(firmwareChunk, "$END");
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	4926      	ldr	r1, [pc, #152]	; (8000924 <startRxDataThread+0x16c>)
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fca8 	bl	80001e0 <strcmp>
 8000890:	6238      	str	r0, [r7, #32]
			  if (cmpRes == 0) {
 8000892:	6a3b      	ldr	r3, [r7, #32]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d021      	beq.n	80008dc <startRxDataThread+0x124>
				  break;
			  }

			  wr = f_write(&telemetryFile, firmwareChunk, 4, &bytesWrote);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	f107 010c 	add.w	r1, r7, #12
 80008a0:	2204      	movs	r2, #4
 80008a2:	481d      	ldr	r0, [pc, #116]	; (8000918 <startRxDataThread+0x160>)
 80008a4:	f007 fb17 	bl	8007ed6 <f_write>
 80008a8:	4603      	mov	r3, r0
 80008aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  if (wr == FR_OK) {
 80008ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d0d7      	beq.n	8000866 <startRxDataThread+0xae>
				  // myprintf("Wrote %i bytes to 'write.txt'!\n", bytesWrote);
				  ;
			  } else {
				  myprintf("[ERROR]: f_write firmware (%d)\n", wr);
 80008b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008ba:	461a      	mov	r2, r3
 80008bc:	491a      	ldr	r1, [pc, #104]	; (8000928 <startRxDataThread+0x170>)
 80008be:	4813      	ldr	r0, [pc, #76]	; (800090c <startRxDataThread+0x154>)
 80008c0:	f00c f9c2 	bl	800cc48 <siprintf>
 80008c4:	4811      	ldr	r0, [pc, #68]	; (800090c <startRxDataThread+0x154>)
 80008c6:	f7ff fc95 	bl	80001f4 <strlen>
 80008ca:	4603      	mov	r3, r0
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008d2:	490e      	ldr	r1, [pc, #56]	; (800090c <startRxDataThread+0x154>)
 80008d4:	480e      	ldr	r0, [pc, #56]	; (8000910 <startRxDataThread+0x158>)
 80008d6:	f003 fbb5 	bl	8004044 <HAL_UART_Transmit>
			  memset(firmwareChunk, 0, sizeof(firmwareChunk));
 80008da:	e7c4      	b.n	8000866 <startRxDataThread+0xae>
				  break;
 80008dc:	bf00      	nop
			  }
		  }

		  f_close(&telemetryFile);
 80008de:	480e      	ldr	r0, [pc, #56]	; (8000918 <startRxDataThread+0x160>)
 80008e0:	f007 fd26 	bl	8008330 <f_close>
	  }

	  osMutexRelease(telemetryFileMutexHandle);
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <startRxDataThread+0x148>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f008 fbc2 	bl	8009072 <osMutexRelease>

	 // thread is with the highest priority, as after the signal about new firmware
	 // has come, we are not interested in data anymore


	 HAL_UART_Receive_IT(&huart2, (uint8_t *)&notification_buffer, 1);
 80008ee:	2201      	movs	r2, #1
 80008f0:	490e      	ldr	r1, [pc, #56]	; (800092c <startRxDataThread+0x174>)
 80008f2:	4807      	ldr	r0, [pc, #28]	; (8000910 <startRxDataThread+0x158>)
 80008f4:	f003 fcda 	bl	80042ac <HAL_UART_Receive_IT>
	  osSemaphoreAcquire(rxThreadSemHandle, osWaitForever);
 80008f8:	e762      	b.n	80007c0 <startRxDataThread+0x8>
 80008fa:	bf00      	nop
 80008fc:	20004e00 	.word	0x20004e00
 8000900:	20004e04 	.word	0x20004e04
 8000904:	20005054 	.word	0x20005054
 8000908:	0800d490 	.word	0x0800d490
 800090c:	200000a8 	.word	0x200000a8
 8000910:	2000514c 	.word	0x2000514c
 8000914:	0800d4bc 	.word	0x0800d4bc
 8000918:	20004e1c 	.word	0x20004e1c
 800091c:	0800d4cc 	.word	0x0800d4cc
 8000920:	0800d52c 	.word	0x0800d52c
 8000924:	0800d540 	.word	0x0800d540
 8000928:	0800d548 	.word	0x0800d548
 800092c:	20004bc0 	.word	0x20004bc0

08000930 <startTxDataThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTxDataThread */
void startTxDataThread(void *argument)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08c      	sub	sp, #48	; 0x30
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTxDataThread */
	FRESULT rr;
	// TODO: get rid of magic constants
	BYTE rbuf[32] = {0};
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
 800094c:	615a      	str	r2, [r3, #20]
 800094e:	619a      	str	r2, [r3, #24]
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(txThreadSemHandle, osWaitForever);
 8000950:	4b4d      	ldr	r3, [pc, #308]	; (8000a88 <startTxDataThread+0x158>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000958:	4618      	mov	r0, r3
 800095a:	f008 fc51 	bl	8009200 <osSemaphoreAcquire>

	  // there is no need to take mutex, as currenlty this is the only task
	  // that actually uses uart (if we omit the debug part)

	  // read from sd and write the info into uart (mock gprs)
	  status = osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 800095e:	4b4b      	ldr	r3, [pc, #300]	; (8000a8c <startTxDataThread+0x15c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000966:	4618      	mov	r0, r3
 8000968:	f008 fb38 	bl	8008fdc <osMutexAcquire>
 800096c:	4603      	mov	r3, r0
 800096e:	4a48      	ldr	r2, [pc, #288]	; (8000a90 <startTxDataThread+0x160>)
 8000970:	6013      	str	r3, [r2, #0]
	  if (status != osOK) {
 8000972:	4b47      	ldr	r3, [pc, #284]	; (8000a90 <startTxDataThread+0x160>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d00f      	beq.n	800099a <startTxDataThread+0x6a>
		  myprintf("Could not take mutex for reading into file");
 800097a:	4946      	ldr	r1, [pc, #280]	; (8000a94 <startTxDataThread+0x164>)
 800097c:	4846      	ldr	r0, [pc, #280]	; (8000a98 <startTxDataThread+0x168>)
 800097e:	f00c f963 	bl	800cc48 <siprintf>
 8000982:	4845      	ldr	r0, [pc, #276]	; (8000a98 <startTxDataThread+0x168>)
 8000984:	f7ff fc36 	bl	80001f4 <strlen>
 8000988:	4603      	mov	r3, r0
 800098a:	b29a      	uxth	r2, r3
 800098c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000990:	4941      	ldr	r1, [pc, #260]	; (8000a98 <startTxDataThread+0x168>)
 8000992:	4842      	ldr	r0, [pc, #264]	; (8000a9c <startTxDataThread+0x16c>)
 8000994:	f003 fb56 	bl	8004044 <HAL_UART_Transmit>
 8000998:	e059      	b.n	8000a4e <startTxDataThread+0x11e>
	  } else {
		  rr = f_open(&telemetryFile, "write.txt", FA_READ);
 800099a:	2201      	movs	r2, #1
 800099c:	4940      	ldr	r1, [pc, #256]	; (8000aa0 <startTxDataThread+0x170>)
 800099e:	4841      	ldr	r0, [pc, #260]	; (8000aa4 <startTxDataThread+0x174>)
 80009a0:	f006 ff66 	bl	8007870 <f_open>
 80009a4:	4603      	mov	r3, r0
 80009a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		  if(rr == FR_OK) {
 80009aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d110      	bne.n	80009d4 <startTxDataThread+0xa4>
			  myprintf("I was able to open '%s' for reading\n", TELEMETRY_FILE);
 80009b2:	4a3d      	ldr	r2, [pc, #244]	; (8000aa8 <startTxDataThread+0x178>)
 80009b4:	493d      	ldr	r1, [pc, #244]	; (8000aac <startTxDataThread+0x17c>)
 80009b6:	4838      	ldr	r0, [pc, #224]	; (8000a98 <startTxDataThread+0x168>)
 80009b8:	f00c f946 	bl	800cc48 <siprintf>
 80009bc:	4836      	ldr	r0, [pc, #216]	; (8000a98 <startTxDataThread+0x168>)
 80009be:	f7ff fc19 	bl	80001f4 <strlen>
 80009c2:	4603      	mov	r3, r0
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ca:	4933      	ldr	r1, [pc, #204]	; (8000a98 <startTxDataThread+0x168>)
 80009cc:	4833      	ldr	r0, [pc, #204]	; (8000a9c <startTxDataThread+0x16c>)
 80009ce:	f003 fb39 	bl	8004044 <HAL_UART_Transmit>
 80009d2:	e011      	b.n	80009f8 <startTxDataThread+0xc8>
		  } else {
			  myprintf("[ERROR]: (reading) f_open (%i)\n", rr);
 80009d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009d8:	461a      	mov	r2, r3
 80009da:	4935      	ldr	r1, [pc, #212]	; (8000ab0 <startTxDataThread+0x180>)
 80009dc:	482e      	ldr	r0, [pc, #184]	; (8000a98 <startTxDataThread+0x168>)
 80009de:	f00c f933 	bl	800cc48 <siprintf>
 80009e2:	482d      	ldr	r0, [pc, #180]	; (8000a98 <startTxDataThread+0x168>)
 80009e4:	f7ff fc06 	bl	80001f4 <strlen>
 80009e8:	4603      	mov	r3, r0
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009f0:	4929      	ldr	r1, [pc, #164]	; (8000a98 <startTxDataThread+0x168>)
 80009f2:	482a      	ldr	r0, [pc, #168]	; (8000a9c <startTxDataThread+0x16c>)
 80009f4:	f003 fb26 	bl	8004044 <HAL_UART_Transmit>
		  }

		  // TODO: do we really need this one here ?
		  f_lseek(&telemetryFile, 0);
 80009f8:	2100      	movs	r1, #0
 80009fa:	482a      	ldr	r0, [pc, #168]	; (8000aa4 <startTxDataThread+0x174>)
 80009fc:	f007 fcc7 	bl	800838e <f_lseek>

		  UINT bytesRead = (UINT) -1;
 8000a00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a04:	60bb      	str	r3, [r7, #8]
		  while (bytesRead != 0) {
 8000a06:	e019      	b.n	8000a3c <startTxDataThread+0x10c>
			  f_read(&telemetryFile, &rbuf, sizeof(rbuf), &bytesRead);
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	f107 010c 	add.w	r1, r7, #12
 8000a10:	2220      	movs	r2, #32
 8000a12:	4824      	ldr	r0, [pc, #144]	; (8000aa4 <startTxDataThread+0x174>)
 8000a14:	f007 f8f1 	bl	8007bfa <f_read>
			  myprintf("[READ]: %s\n", rbuf);
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4925      	ldr	r1, [pc, #148]	; (8000ab4 <startTxDataThread+0x184>)
 8000a20:	481d      	ldr	r0, [pc, #116]	; (8000a98 <startTxDataThread+0x168>)
 8000a22:	f00c f911 	bl	800cc48 <siprintf>
 8000a26:	481c      	ldr	r0, [pc, #112]	; (8000a98 <startTxDataThread+0x168>)
 8000a28:	f7ff fbe4 	bl	80001f4 <strlen>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a34:	4918      	ldr	r1, [pc, #96]	; (8000a98 <startTxDataThread+0x168>)
 8000a36:	4819      	ldr	r0, [pc, #100]	; (8000a9c <startTxDataThread+0x16c>)
 8000a38:	f003 fb04 	bl	8004044 <HAL_UART_Transmit>
		  while (bytesRead != 0) {
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d1e2      	bne.n	8000a08 <startTxDataThread+0xd8>
		  }

		  f_close(&telemetryFile);
 8000a42:	4818      	ldr	r0, [pc, #96]	; (8000aa4 <startTxDataThread+0x174>)
 8000a44:	f007 fc74 	bl	8008330 <f_close>
		  f_unlink("write.txt");
 8000a48:	4815      	ldr	r0, [pc, #84]	; (8000aa0 <startTxDataThread+0x170>)
 8000a4a:	f007 fef3 	bl	8008834 <f_unlink>
	  }

	  osMutexRelease(telemetryFileMutexHandle);
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <startTxDataThread+0x15c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f008 fb0d 	bl	8009072 <osMutexRelease>

	  // note that TODO: use different uart that won't need mutex acquisition
	  myprintf("[READ]: %s\n", rbuf);
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4915      	ldr	r1, [pc, #84]	; (8000ab4 <startTxDataThread+0x184>)
 8000a60:	480d      	ldr	r0, [pc, #52]	; (8000a98 <startTxDataThread+0x168>)
 8000a62:	f00c f8f1 	bl	800cc48 <siprintf>
 8000a66:	480c      	ldr	r0, [pc, #48]	; (8000a98 <startTxDataThread+0x168>)
 8000a68:	f7ff fbc4 	bl	80001f4 <strlen>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a74:	4908      	ldr	r1, [pc, #32]	; (8000a98 <startTxDataThread+0x168>)
 8000a76:	4809      	ldr	r0, [pc, #36]	; (8000a9c <startTxDataThread+0x16c>)
 8000a78:	f003 fae4 	bl	8004044 <HAL_UART_Transmit>

	  // TODO: it should be done like this, though it does not work for some reason
	  HAL_UART_Receive_IT(&huart2, (uint8_t *)&notification_buffer, 1);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	490e      	ldr	r1, [pc, #56]	; (8000ab8 <startTxDataThread+0x188>)
 8000a80:	4806      	ldr	r0, [pc, #24]	; (8000a9c <startTxDataThread+0x16c>)
 8000a82:	f003 fc13 	bl	80042ac <HAL_UART_Receive_IT>
	  osSemaphoreAcquire(txThreadSemHandle, osWaitForever);
 8000a86:	e763      	b.n	8000950 <startTxDataThread+0x20>
 8000a88:	2000504c 	.word	0x2000504c
 8000a8c:	20004e04 	.word	0x20004e04
 8000a90:	20005054 	.word	0x20005054
 8000a94:	0800d568 	.word	0x0800d568
 8000a98:	200000a8 	.word	0x200000a8
 8000a9c:	2000514c 	.word	0x2000514c
 8000aa0:	0800d594 	.word	0x0800d594
 8000aa4:	20004e1c 	.word	0x20004e1c
 8000aa8:	0800d5a0 	.word	0x0800d5a0
 8000aac:	0800d5b0 	.word	0x0800d5b0
 8000ab0:	0800d5d8 	.word	0x0800d5d8
 8000ab4:	0800d5f8 	.word	0x0800d5f8
 8000ab8:	20004bc0 	.word	0x20004bc0

08000abc <startTelemetryThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTelemetryThread */
void startTelemetryThread(void *argument)
{
 8000abc:	b5b0      	push	{r4, r5, r7, lr}
 8000abe:	b0b6      	sub	sp, #216	; 0xd8
 8000ac0:	af04      	add	r7, sp, #16
 8000ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTelemetryThread */
  TelemetryBase tb;
  FRESULT wr;
  // TODO: get rid of magic constant
  BYTE wbuf[128] = {0};
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	227c      	movs	r2, #124	; 0x7c
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f00b ffdd 	bl	800ca90 <memset>

  /* Infinite loop */
  for(;;)
  {
	 status = osMessageQueueGet(telemetryQueueHandle, &tb, NULL, osWaitForever);
 8000ad6:	4b62      	ldr	r3, [pc, #392]	; (8000c60 <startTelemetryThread+0x1a4>)
 8000ad8:	6818      	ldr	r0, [r3, #0]
 8000ada:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f008 fd1a 	bl	800951c <osMessageQueueGet>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	4a5e      	ldr	r2, [pc, #376]	; (8000c64 <startTelemetryThread+0x1a8>)
 8000aec:	6013      	str	r3, [r2, #0]
	 if (status == osOK) {
 8000aee:	4b5d      	ldr	r3, [pc, #372]	; (8000c64 <startTelemetryThread+0x1a8>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d1ef      	bne.n	8000ad6 <startTelemetryThread+0x1a>
		 // write into sd card

		 sprintf(wbuf, "Telemetry{%d, %u, {%d, %d, %d}}\n",
				 tb.id, tb.data_size, tb.data[0],
 8000af6:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
		 sprintf(wbuf, "Telemetry{%d, %u, {%d, %d, %d}}\n",
 8000afa:	461d      	mov	r5, r3
 8000afc:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8000b00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000b04:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000b08:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000b0c:	f107 000c 	add.w	r0, r7, #12
 8000b10:	9102      	str	r1, [sp, #8]
 8000b12:	9201      	str	r2, [sp, #4]
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	4623      	mov	r3, r4
 8000b18:	462a      	mov	r2, r5
 8000b1a:	4953      	ldr	r1, [pc, #332]	; (8000c68 <startTelemetryThread+0x1ac>)
 8000b1c:	f00c f894 	bl	800cc48 <siprintf>
				 tb.data[1], tb.data[2]);
		 myprintf("Writing following string to sd: %s", wbuf);
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	461a      	mov	r2, r3
 8000b26:	4951      	ldr	r1, [pc, #324]	; (8000c6c <startTelemetryThread+0x1b0>)
 8000b28:	4851      	ldr	r0, [pc, #324]	; (8000c70 <startTelemetryThread+0x1b4>)
 8000b2a:	f00c f88d 	bl	800cc48 <siprintf>
 8000b2e:	4850      	ldr	r0, [pc, #320]	; (8000c70 <startTelemetryThread+0x1b4>)
 8000b30:	f7ff fb60 	bl	80001f4 <strlen>
 8000b34:	4603      	mov	r3, r0
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b3c:	494c      	ldr	r1, [pc, #304]	; (8000c70 <startTelemetryThread+0x1b4>)
 8000b3e:	484d      	ldr	r0, [pc, #308]	; (8000c74 <startTelemetryThread+0x1b8>)
 8000b40:	f003 fa80 	bl	8004044 <HAL_UART_Transmit>


		 // TODO: add mutex here
		 status = osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 8000b44:	4b4c      	ldr	r3, [pc, #304]	; (8000c78 <startTelemetryThread+0x1bc>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f008 fa45 	bl	8008fdc <osMutexAcquire>
 8000b52:	4603      	mov	r3, r0
 8000b54:	4a43      	ldr	r2, [pc, #268]	; (8000c64 <startTelemetryThread+0x1a8>)
 8000b56:	6013      	str	r3, [r2, #0]
		 if (status != osOK) {
 8000b58:	4b42      	ldr	r3, [pc, #264]	; (8000c64 <startTelemetryThread+0x1a8>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d00f      	beq.n	8000b80 <startTelemetryThread+0xc4>
			 myprintf("Could not take mutex for writing into file");
 8000b60:	4946      	ldr	r1, [pc, #280]	; (8000c7c <startTelemetryThread+0x1c0>)
 8000b62:	4843      	ldr	r0, [pc, #268]	; (8000c70 <startTelemetryThread+0x1b4>)
 8000b64:	f00c f870 	bl	800cc48 <siprintf>
 8000b68:	4841      	ldr	r0, [pc, #260]	; (8000c70 <startTelemetryThread+0x1b4>)
 8000b6a:	f7ff fb43 	bl	80001f4 <strlen>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b76:	493e      	ldr	r1, [pc, #248]	; (8000c70 <startTelemetryThread+0x1b4>)
 8000b78:	483e      	ldr	r0, [pc, #248]	; (8000c74 <startTelemetryThread+0x1b8>)
 8000b7a:	f003 fa63 	bl	8004044 <HAL_UART_Transmit>
 8000b7e:	e068      	b.n	8000c52 <startTelemetryThread+0x196>
		 } else {
		 	 wr = f_open(&telemetryFile, "write.txt", FA_OPEN_APPEND | FA_WRITE | FA_OPEN_ALWAYS);
 8000b80:	2232      	movs	r2, #50	; 0x32
 8000b82:	493f      	ldr	r1, [pc, #252]	; (8000c80 <startTelemetryThread+0x1c4>)
 8000b84:	483f      	ldr	r0, [pc, #252]	; (8000c84 <startTelemetryThread+0x1c8>)
 8000b86:	f006 fe73 	bl	8007870 <f_open>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7


		 	 if(wr == FR_OK) {
 8000b90:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d110      	bne.n	8000bba <startTelemetryThread+0xfe>
		 		 myprintf("I was able to open '%s' for writing\n", TELEMETRY_FILE);
 8000b98:	4a3b      	ldr	r2, [pc, #236]	; (8000c88 <startTelemetryThread+0x1cc>)
 8000b9a:	493c      	ldr	r1, [pc, #240]	; (8000c8c <startTelemetryThread+0x1d0>)
 8000b9c:	4834      	ldr	r0, [pc, #208]	; (8000c70 <startTelemetryThread+0x1b4>)
 8000b9e:	f00c f853 	bl	800cc48 <siprintf>
 8000ba2:	4833      	ldr	r0, [pc, #204]	; (8000c70 <startTelemetryThread+0x1b4>)
 8000ba4:	f7ff fb26 	bl	80001f4 <strlen>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bb0:	492f      	ldr	r1, [pc, #188]	; (8000c70 <startTelemetryThread+0x1b4>)
 8000bb2:	4830      	ldr	r0, [pc, #192]	; (8000c74 <startTelemetryThread+0x1b8>)
 8000bb4:	f003 fa46 	bl	8004044 <HAL_UART_Transmit>
 8000bb8:	e011      	b.n	8000bde <startTelemetryThread+0x122>
		 	 } else {
		 		 myprintf("f_open error (%i)\n", wr);
 8000bba:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4933      	ldr	r1, [pc, #204]	; (8000c90 <startTelemetryThread+0x1d4>)
 8000bc2:	482b      	ldr	r0, [pc, #172]	; (8000c70 <startTelemetryThread+0x1b4>)
 8000bc4:	f00c f840 	bl	800cc48 <siprintf>
 8000bc8:	4829      	ldr	r0, [pc, #164]	; (8000c70 <startTelemetryThread+0x1b4>)
 8000bca:	f7ff fb13 	bl	80001f4 <strlen>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bd6:	4926      	ldr	r1, [pc, #152]	; (8000c70 <startTelemetryThread+0x1b4>)
 8000bd8:	4826      	ldr	r0, [pc, #152]	; (8000c74 <startTelemetryThread+0x1b8>)
 8000bda:	f003 fa33 	bl	8004044 <HAL_UART_Transmit>
		 	 }


		 	 UINT bytesWrote;
		 	 // TODO: and also I assume we should add mutex here
		 	 wr = f_write(&telemetryFile, wbuf, strlen(wbuf), &bytesWrote);
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fb06 	bl	80001f4 <strlen>
 8000be8:	4602      	mov	r2, r0
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	f107 010c 	add.w	r1, r7, #12
 8000bf2:	4824      	ldr	r0, [pc, #144]	; (8000c84 <startTelemetryThread+0x1c8>)
 8000bf4:	f007 f96f 	bl	8007ed6 <f_write>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		 	 if(wr == FR_OK) {
 8000bfe:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d111      	bne.n	8000c2a <startTelemetryThread+0x16e>
		 		 myprintf("Wrote %i bytes to 'write.txt'!\n", bytesWrote);
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4922      	ldr	r1, [pc, #136]	; (8000c94 <startTelemetryThread+0x1d8>)
 8000c0c:	4818      	ldr	r0, [pc, #96]	; (8000c70 <startTelemetryThread+0x1b4>)
 8000c0e:	f00c f81b 	bl	800cc48 <siprintf>
 8000c12:	4817      	ldr	r0, [pc, #92]	; (8000c70 <startTelemetryThread+0x1b4>)
 8000c14:	f7ff faee 	bl	80001f4 <strlen>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c20:	4913      	ldr	r1, [pc, #76]	; (8000c70 <startTelemetryThread+0x1b4>)
 8000c22:	4814      	ldr	r0, [pc, #80]	; (8000c74 <startTelemetryThread+0x1b8>)
 8000c24:	f003 fa0e 	bl	8004044 <HAL_UART_Transmit>
 8000c28:	e010      	b.n	8000c4c <startTelemetryThread+0x190>
		 	 } else {
		 		 myprintf("f_write error (%d)\n", (int) bytesWrote);
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	491a      	ldr	r1, [pc, #104]	; (8000c98 <startTelemetryThread+0x1dc>)
 8000c30:	480f      	ldr	r0, [pc, #60]	; (8000c70 <startTelemetryThread+0x1b4>)
 8000c32:	f00c f809 	bl	800cc48 <siprintf>
 8000c36:	480e      	ldr	r0, [pc, #56]	; (8000c70 <startTelemetryThread+0x1b4>)
 8000c38:	f7ff fadc 	bl	80001f4 <strlen>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c44:	490a      	ldr	r1, [pc, #40]	; (8000c70 <startTelemetryThread+0x1b4>)
 8000c46:	480b      	ldr	r0, [pc, #44]	; (8000c74 <startTelemetryThread+0x1b8>)
 8000c48:	f003 f9fc 	bl	8004044 <HAL_UART_Transmit>
		 	 }

		 	 f_close(&telemetryFile);
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <startTelemetryThread+0x1c8>)
 8000c4e:	f007 fb6f 	bl	8008330 <f_close>
	 	 }

		 osMutexRelease(telemetryFileMutexHandle);
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <startTelemetryThread+0x1bc>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f008 fa0b 	bl	8009072 <osMutexRelease>
	 status = osMessageQueueGet(telemetryQueueHandle, &tb, NULL, osWaitForever);
 8000c5c:	e73b      	b.n	8000ad6 <startTelemetryThread+0x1a>
 8000c5e:	bf00      	nop
 8000c60:	20004e14 	.word	0x20004e14
 8000c64:	20005054 	.word	0x20005054
 8000c68:	0800d604 	.word	0x0800d604
 8000c6c:	0800d628 	.word	0x0800d628
 8000c70:	200000a8 	.word	0x200000a8
 8000c74:	2000514c 	.word	0x2000514c
 8000c78:	20004e04 	.word	0x20004e04
 8000c7c:	0800d490 	.word	0x0800d490
 8000c80:	0800d594 	.word	0x0800d594
 8000c84:	20004e1c 	.word	0x20004e1c
 8000c88:	0800d5a0 	.word	0x0800d5a0
 8000c8c:	0800d64c 	.word	0x0800d64c
 8000c90:	0800d52c 	.word	0x0800d52c
 8000c94:	0800d674 	.word	0x0800d674
 8000c98:	0800d694 	.word	0x0800d694

08000c9c <accTimerCallback>:
  /* USER CODE END startTelemetryThread */
}

/* accTimerCallback function */
void accTimerCallback(void *argument)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b092      	sub	sp, #72	; 0x48
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN accTimerCallback */
	TelemetryBase acc;

	acc.id = ACC;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	733b      	strb	r3, [r7, #12]
	acc.data_size = 3;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	643b      	str	r3, [r7, #64]	; 0x40
	for (size_t i = 0; i < acc.data_size; i++) {
 8000cac:	2300      	movs	r3, #0
 8000cae:	647b      	str	r3, [r7, #68]	; 0x44
 8000cb0:	e00a      	b.n	8000cc8 <accTimerCallback+0x2c>
		acc.data[i] = i;
 8000cb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000cbc:	440b      	add	r3, r1
 8000cbe:	f843 2c38 	str.w	r2, [r3, #-56]
	for (size_t i = 0; i < acc.data_size; i++) {
 8000cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	647b      	str	r3, [r7, #68]	; 0x44
 8000cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d3f0      	bcc.n	8000cb2 <accTimerCallback+0x16>
	}

	// note that this might be called from isr, if the
	// time parameter is set to 0
	osMessageQueuePut(telemetryQueueHandle, &acc, 0U, 0U);
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <accTimerCallback+0x4c>)
 8000cd2:	6818      	ldr	r0, [r3, #0]
 8000cd4:	f107 010c 	add.w	r1, r7, #12
 8000cd8:	2300      	movs	r3, #0
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f008 fbbe 	bl	800945c <osMessageQueuePut>
  /* USER CODE END accTimerCallback */
}
 8000ce0:	bf00      	nop
 8000ce2:	3748      	adds	r7, #72	; 0x48
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20004e14 	.word	0x20004e14

08000cec <temperatureTimerCallback>:

/* temperatureTimerCallback function */
void temperatureTimerCallback(void *argument)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b092      	sub	sp, #72	; 0x48
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temperatureTimerCallback */
	TelemetryBase acc;

	acc.id = ACC;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	733b      	strb	r3, [r7, #12]
	acc.data_size = 3;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	643b      	str	r3, [r7, #64]	; 0x40
	for (size_t i = 0; i < acc.data_size; i++) {
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8000d00:	e00d      	b.n	8000d1e <temperatureTimerCallback+0x32>
		acc.data[i] = acc.data_size - i;
 8000d02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	461a      	mov	r2, r3
 8000d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000d12:	440b      	add	r3, r1
 8000d14:	f843 2c38 	str.w	r2, [r3, #-56]
	for (size_t i = 0; i < acc.data_size; i++) {
 8000d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8000d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d3ed      	bcc.n	8000d02 <temperatureTimerCallback+0x16>
	}

	osMessageQueuePut(telemetryQueueHandle, &acc, 0U, 0U);
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <temperatureTimerCallback+0x54>)
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	f107 010c 	add.w	r1, r7, #12
 8000d2e:	2300      	movs	r3, #0
 8000d30:	2200      	movs	r2, #0
 8000d32:	f008 fb93 	bl	800945c <osMessageQueuePut>
  /* USER CODE END temperatureTimerCallback */
}
 8000d36:	bf00      	nop
 8000d38:	3748      	adds	r7, #72	; 0x48
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20004e14 	.word	0x20004e14

08000d44 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN Application */
/*
 * [IMPORTANT] TODO: Note that this functoin is unsafe (as we might interrupt uart usage)
 * Actually not, as we would transmit only after this
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
     if (huart == &huart2) {
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a25      	ldr	r2, [pc, #148]	; (8000de4 <HAL_UART_RxCpltCallback+0xa0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d141      	bne.n	8000dd8 <HAL_UART_RxCpltCallback+0x94>
    	 int val = (int) (notification_buffer[0] - '0');
 8000d54:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <HAL_UART_RxCpltCallback+0xa4>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	3b30      	subs	r3, #48	; 0x30
 8000d5a:	60fb      	str	r3, [r7, #12]
		 switch (val) {
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <HAL_UART_RxCpltCallback+0x26>
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d006      	beq.n	8000d76 <HAL_UART_RxCpltCallback+0x32>
 8000d68:	e020      	b.n	8000dac <HAL_UART_RxCpltCallback+0x68>
		 case 0:
			 osSemaphoreRelease(rxThreadSemHandle);
 8000d6a:	4b20      	ldr	r3, [pc, #128]	; (8000dec <HAL_UART_RxCpltCallback+0xa8>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f008 fa98 	bl	80092a4 <osSemaphoreRelease>
			 break;
 8000d74:	e031      	b.n	8000dda <HAL_UART_RxCpltCallback+0x96>
		 case 1:
			 status = osSemaphoreRelease(txThreadSemHandle);
 8000d76:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <HAL_UART_RxCpltCallback+0xac>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f008 fa92 	bl	80092a4 <osSemaphoreRelease>
 8000d80:	4603      	mov	r3, r0
 8000d82:	4a1c      	ldr	r2, [pc, #112]	; (8000df4 <HAL_UART_RxCpltCallback+0xb0>)
 8000d84:	6013      	str	r3, [r2, #0]
			 myprintf("[INFO]: status of semaphore release: %d\n", status);
 8000d86:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <HAL_UART_RxCpltCallback+0xb0>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	491a      	ldr	r1, [pc, #104]	; (8000df8 <HAL_UART_RxCpltCallback+0xb4>)
 8000d8e:	481b      	ldr	r0, [pc, #108]	; (8000dfc <HAL_UART_RxCpltCallback+0xb8>)
 8000d90:	f00b ff5a 	bl	800cc48 <siprintf>
 8000d94:	4819      	ldr	r0, [pc, #100]	; (8000dfc <HAL_UART_RxCpltCallback+0xb8>)
 8000d96:	f7ff fa2d 	bl	80001f4 <strlen>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000da2:	4916      	ldr	r1, [pc, #88]	; (8000dfc <HAL_UART_RxCpltCallback+0xb8>)
 8000da4:	480f      	ldr	r0, [pc, #60]	; (8000de4 <HAL_UART_RxCpltCallback+0xa0>)
 8000da6:	f003 f94d 	bl	8004044 <HAL_UART_Transmit>
			 break;
 8000daa:	e016      	b.n	8000dda <HAL_UART_RxCpltCallback+0x96>
		 default:
			 myprintf("[ERROR]: Op not allowed: %d\n", val);
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	4914      	ldr	r1, [pc, #80]	; (8000e00 <HAL_UART_RxCpltCallback+0xbc>)
 8000db0:	4812      	ldr	r0, [pc, #72]	; (8000dfc <HAL_UART_RxCpltCallback+0xb8>)
 8000db2:	f00b ff49 	bl	800cc48 <siprintf>
 8000db6:	4811      	ldr	r0, [pc, #68]	; (8000dfc <HAL_UART_RxCpltCallback+0xb8>)
 8000db8:	f7ff fa1c 	bl	80001f4 <strlen>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dc4:	490d      	ldr	r1, [pc, #52]	; (8000dfc <HAL_UART_RxCpltCallback+0xb8>)
 8000dc6:	4807      	ldr	r0, [pc, #28]	; (8000de4 <HAL_UART_RxCpltCallback+0xa0>)
 8000dc8:	f003 f93c 	bl	8004044 <HAL_UART_Transmit>
			 HAL_UART_Receive_IT(&huart2, (uint8_t *)&notification_buffer, 1);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	4906      	ldr	r1, [pc, #24]	; (8000de8 <HAL_UART_RxCpltCallback+0xa4>)
 8000dd0:	4804      	ldr	r0, [pc, #16]	; (8000de4 <HAL_UART_RxCpltCallback+0xa0>)
 8000dd2:	f003 fa6b 	bl	80042ac <HAL_UART_Receive_IT>
			 break;
 8000dd6:	e000      	b.n	8000dda <HAL_UART_RxCpltCallback+0x96>
		 };
 8000dd8:	bf00      	nop

     }
}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	2000514c 	.word	0x2000514c
 8000de8:	20004bc0 	.word	0x20004bc0
 8000dec:	20004e00 	.word	0x20004e00
 8000df0:	2000504c 	.word	0x2000504c
 8000df4:	20005054 	.word	0x20005054
 8000df8:	0800d6a8 	.word	0x0800d6a8
 8000dfc:	200000a8 	.word	0x200000a8
 8000e00:	0800d6d4 	.word	0x0800d6d4

08000e04 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08c      	sub	sp, #48	; 0x30
 8000e08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
 8000e1e:	4b9b      	ldr	r3, [pc, #620]	; (800108c <MX_GPIO_Init+0x288>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a9a      	ldr	r2, [pc, #616]	; (800108c <MX_GPIO_Init+0x288>)
 8000e24:	f043 0310 	orr.w	r3, r3, #16
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b98      	ldr	r3, [pc, #608]	; (800108c <MX_GPIO_Init+0x288>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0310 	and.w	r3, r3, #16
 8000e32:	61bb      	str	r3, [r7, #24]
 8000e34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	4b94      	ldr	r3, [pc, #592]	; (800108c <MX_GPIO_Init+0x288>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a93      	ldr	r2, [pc, #588]	; (800108c <MX_GPIO_Init+0x288>)
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b91      	ldr	r3, [pc, #580]	; (800108c <MX_GPIO_Init+0x288>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b8d      	ldr	r3, [pc, #564]	; (800108c <MX_GPIO_Init+0x288>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a8c      	ldr	r2, [pc, #560]	; (800108c <MX_GPIO_Init+0x288>)
 8000e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b8a      	ldr	r3, [pc, #552]	; (800108c <MX_GPIO_Init+0x288>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b86      	ldr	r3, [pc, #536]	; (800108c <MX_GPIO_Init+0x288>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a85      	ldr	r2, [pc, #532]	; (800108c <MX_GPIO_Init+0x288>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b83      	ldr	r3, [pc, #524]	; (800108c <MX_GPIO_Init+0x288>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	4b7f      	ldr	r3, [pc, #508]	; (800108c <MX_GPIO_Init+0x288>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a7e      	ldr	r2, [pc, #504]	; (800108c <MX_GPIO_Init+0x288>)
 8000e94:	f043 0302 	orr.w	r3, r3, #2
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b7c      	ldr	r3, [pc, #496]	; (800108c <MX_GPIO_Init+0x288>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b78      	ldr	r3, [pc, #480]	; (800108c <MX_GPIO_Init+0x288>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a77      	ldr	r2, [pc, #476]	; (800108c <MX_GPIO_Init+0x288>)
 8000eb0:	f043 0308 	orr.w	r3, r3, #8
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b75      	ldr	r3, [pc, #468]	; (800108c <MX_GPIO_Init+0x288>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	4872      	ldr	r0, [pc, #456]	; (8001090 <MX_GPIO_Init+0x28c>)
 8000ec8:	f001 f8d0 	bl	800206c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2101      	movs	r1, #1
 8000ed0:	4870      	ldr	r0, [pc, #448]	; (8001094 <MX_GPIO_Init+0x290>)
 8000ed2:	f001 f8cb 	bl	800206c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2102      	movs	r1, #2
 8000eda:	486f      	ldr	r0, [pc, #444]	; (8001098 <MX_GPIO_Init+0x294>)
 8000edc:	f001 f8c6 	bl	800206c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000ee6:	486d      	ldr	r0, [pc, #436]	; (800109c <MX_GPIO_Init+0x298>)
 8000ee8:	f001 f8c0 	bl	800206c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000eec:	2304      	movs	r3, #4
 8000eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	4619      	mov	r1, r3
 8000efe:	4864      	ldr	r0, [pc, #400]	; (8001090 <MX_GPIO_Init+0x28c>)
 8000f00:	f000 fe18 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000f04:	2308      	movs	r3, #8
 8000f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4619      	mov	r1, r3
 8000f1a:	485d      	ldr	r0, [pc, #372]	; (8001090 <MX_GPIO_Init+0x28c>)
 8000f1c:	f000 fe0a 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000f20:	2332      	movs	r3, #50	; 0x32
 8000f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f24:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	4856      	ldr	r0, [pc, #344]	; (8001090 <MX_GPIO_Init+0x28c>)
 8000f36:	f000 fdfd 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4850      	ldr	r0, [pc, #320]	; (8001094 <MX_GPIO_Init+0x290>)
 8000f52:	f000 fdef 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000f56:	2308      	movs	r3, #8
 8000f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f66:	2305      	movs	r3, #5
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4848      	ldr	r0, [pc, #288]	; (8001094 <MX_GPIO_Init+0x290>)
 8000f72:	f000 fddf 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f76:	2301      	movs	r3, #1
 8000f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f7a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4845      	ldr	r0, [pc, #276]	; (80010a0 <MX_GPIO_Init+0x29c>)
 8000f8c:	f000 fdd2 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f90:	2310      	movs	r3, #16
 8000f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fa0:	2306      	movs	r3, #6
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4619      	mov	r1, r3
 8000faa:	483d      	ldr	r0, [pc, #244]	; (80010a0 <MX_GPIO_Init+0x29c>)
 8000fac:	f000 fdc2 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4834      	ldr	r0, [pc, #208]	; (8001098 <MX_GPIO_Init+0x294>)
 8000fc8:	f000 fdb4 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000fcc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fde:	2305      	movs	r3, #5
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	482b      	ldr	r0, [pc, #172]	; (8001098 <MX_GPIO_Init+0x294>)
 8000fea:	f000 fda3 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000fee:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000ff2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	4825      	ldr	r0, [pc, #148]	; (800109c <MX_GPIO_Init+0x298>)
 8001008:	f000 fd94 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800100c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800101e:	2306      	movs	r3, #6
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	4619      	mov	r1, r3
 8001028:	481a      	ldr	r0, [pc, #104]	; (8001094 <MX_GPIO_Init+0x290>)
 800102a:	f000 fd83 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800102e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	4817      	ldr	r0, [pc, #92]	; (80010a0 <MX_GPIO_Init+0x29c>)
 8001044:	f000 fd76 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001048:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800104c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	2303      	movs	r3, #3
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800105a:	230a      	movs	r3, #10
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	4619      	mov	r1, r3
 8001064:	480e      	ldr	r0, [pc, #56]	; (80010a0 <MX_GPIO_Init+0x29c>)
 8001066:	f000 fd65 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800106a:	2320      	movs	r3, #32
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106e:	2300      	movs	r3, #0
 8001070:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 031c 	add.w	r3, r7, #28
 800107a:	4619      	mov	r1, r3
 800107c:	4807      	ldr	r0, [pc, #28]	; (800109c <MX_GPIO_Init+0x298>)
 800107e:	f000 fd59 	bl	8001b34 <HAL_GPIO_Init>

}
 8001082:	bf00      	nop
 8001084:	3730      	adds	r7, #48	; 0x30
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800
 8001090:	40021000 	.word	0x40021000
 8001094:	40020800 	.word	0x40020800
 8001098:	40020400 	.word	0x40020400
 800109c:	40020c00 	.word	0x40020c00
 80010a0:	40020000 	.word	0x40020000

080010a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010aa:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <MX_I2C1_Init+0x54>)
 80010ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010b0:	4a12      	ldr	r2, [pc, #72]	; (80010fc <MX_I2C1_Init+0x58>)
 80010b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010e2:	f000 fff5 	bl	80020d0 <HAL_I2C_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010ec:	f000 f8ee 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20005058 	.word	0x20005058
 80010f8:	40005400 	.word	0x40005400
 80010fc:	000186a0 	.word	0x000186a0

08001100 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a19      	ldr	r2, [pc, #100]	; (8001184 <HAL_I2C_MspInit+0x84>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d12c      	bne.n	800117c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	4b18      	ldr	r3, [pc, #96]	; (8001188 <HAL_I2C_MspInit+0x88>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a17      	ldr	r2, [pc, #92]	; (8001188 <HAL_I2C_MspInit+0x88>)
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <HAL_I2C_MspInit+0x88>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800113e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001144:	2312      	movs	r3, #18
 8001146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001148:	2301      	movs	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001150:	2304      	movs	r3, #4
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	480c      	ldr	r0, [pc, #48]	; (800118c <HAL_I2C_MspInit+0x8c>)
 800115c:	f000 fcea 	bl	8001b34 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_I2C_MspInit+0x88>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	4a07      	ldr	r2, [pc, #28]	; (8001188 <HAL_I2C_MspInit+0x88>)
 800116a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800116e:	6413      	str	r3, [r2, #64]	; 0x40
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <HAL_I2C_MspInit+0x88>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800117c:	bf00      	nop
 800117e:	3728      	adds	r7, #40	; 0x28
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40005400 	.word	0x40005400
 8001188:	40023800 	.word	0x40023800
 800118c:	40020400 	.word	0x40020400

08001190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001194:	f000 fac4 	bl	8001720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001198:	f000 f81e 	bl	80011d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119c:	f7ff fe32 	bl	8000e04 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011a0:	f7ff ff80 	bl	80010a4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80011a4:	f000 f8a2 	bl	80012ec <MX_SPI1_Init>
  MX_FATFS_Init();
 80011a8:	f003 ffaa 	bl	8005100 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 80011ac:	f000 fa14 	bl	80015d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // delay needed for sd to stabilize as well as to make the upload
  // of new firmware possible (boot related issue);
  HAL_Delay(2000);
 80011b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011b4:	f000 faf6 	bl	80017a4 <HAL_Delay>

  // run in the background receive from uart
  // in order to implment possibility to wake up
  HAL_UART_Receive_IT(&huart2, (uint8_t *)notification_buffer, 1);
 80011b8:	2201      	movs	r2, #1
 80011ba:	4905      	ldr	r1, [pc, #20]	; (80011d0 <main+0x40>)
 80011bc:	4805      	ldr	r0, [pc, #20]	; (80011d4 <main+0x44>)
 80011be:	f003 f875 	bl	80042ac <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80011c2:	f007 fccf 	bl	8008b64 <osKernelInitialize>
  MX_FREERTOS_Init();
 80011c6:	f7ff f9ef 	bl	80005a8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80011ca:	f007 fcef 	bl	8008bac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <main+0x3e>
 80011d0:	20004bc0 	.word	0x20004bc0
 80011d4:	2000514c 	.word	0x2000514c

080011d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b094      	sub	sp, #80	; 0x50
 80011dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011de:	f107 0320 	add.w	r3, r7, #32
 80011e2:	2230      	movs	r2, #48	; 0x30
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f00b fc52 	bl	800ca90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	4b27      	ldr	r3, [pc, #156]	; (80012a0 <SystemClock_Config+0xc8>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	4a26      	ldr	r2, [pc, #152]	; (80012a0 <SystemClock_Config+0xc8>)
 8001206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120a:	6413      	str	r3, [r2, #64]	; 0x40
 800120c:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <SystemClock_Config+0xc8>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <SystemClock_Config+0xcc>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a20      	ldr	r2, [pc, #128]	; (80012a4 <SystemClock_Config+0xcc>)
 8001222:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <SystemClock_Config+0xcc>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001234:	2301      	movs	r3, #1
 8001236:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001238:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123e:	2302      	movs	r3, #2
 8001240:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001242:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001246:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001248:	2304      	movs	r3, #4
 800124a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800124c:	23c0      	movs	r3, #192	; 0xc0
 800124e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001250:	2304      	movs	r3, #4
 8001252:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001254:	2308      	movs	r3, #8
 8001256:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001258:	f107 0320 	add.w	r3, r7, #32
 800125c:	4618      	mov	r0, r3
 800125e:	f001 f903 	bl	8002468 <HAL_RCC_OscConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001268:	f000 f830 	bl	80012cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126c:	230f      	movs	r3, #15
 800126e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001270:	2302      	movs	r3, #2
 8001272:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001278:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800127c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001282:	f107 030c 	add.w	r3, r7, #12
 8001286:	2103      	movs	r1, #3
 8001288:	4618      	mov	r0, r3
 800128a:	f001 fc15 	bl	8002ab8 <HAL_RCC_ClockConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001294:	f000 f81a 	bl	80012cc <Error_Handler>
  }
}
 8001298:	bf00      	nop
 800129a:	3750      	adds	r7, #80	; 0x50
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40007000 	.word	0x40007000

080012a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d101      	bne.n	80012be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012ba:	f000 fa53 	bl	8001764 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40000c00 	.word	0x40000c00

080012cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d0:	b672      	cpsid	i
}
 80012d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <Error_Handler+0x8>

080012d6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80012f0:	4b17      	ldr	r3, [pc, #92]	; (8001350 <MX_SPI1_Init+0x64>)
 80012f2:	4a18      	ldr	r2, [pc, #96]	; (8001354 <MX_SPI1_Init+0x68>)
 80012f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <MX_SPI1_Init+0x64>)
 80012f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <MX_SPI1_Init+0x64>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <MX_SPI1_Init+0x64>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_SPI1_Init+0x64>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_SPI1_Init+0x64>)
 8001312:	2200      	movs	r2, #0
 8001314:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_SPI1_Init+0x64>)
 8001318:	f44f 7200 	mov.w	r2, #512	; 0x200
 800131c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_SPI1_Init+0x64>)
 8001320:	2230      	movs	r2, #48	; 0x30
 8001322:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001324:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <MX_SPI1_Init+0x64>)
 8001326:	2200      	movs	r2, #0
 8001328:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_SPI1_Init+0x64>)
 800132c:	2200      	movs	r2, #0
 800132e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <MX_SPI1_Init+0x64>)
 8001332:	2200      	movs	r2, #0
 8001334:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_SPI1_Init+0x64>)
 8001338:	220a      	movs	r2, #10
 800133a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800133c:	4804      	ldr	r0, [pc, #16]	; (8001350 <MX_SPI1_Init+0x64>)
 800133e:	f001 fe91 	bl	8003064 <HAL_SPI_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001348:	f7ff ffc0 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200050ac 	.word	0x200050ac
 8001354:	40013000 	.word	0x40013000

08001358 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a19      	ldr	r2, [pc, #100]	; (80013dc <HAL_SPI_MspInit+0x84>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d12b      	bne.n	80013d2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <HAL_SPI_MspInit+0x88>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	4a17      	ldr	r2, [pc, #92]	; (80013e0 <HAL_SPI_MspInit+0x88>)
 8001384:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001388:	6453      	str	r3, [r2, #68]	; 0x44
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <HAL_SPI_MspInit+0x88>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <HAL_SPI_MspInit+0x88>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a10      	ldr	r2, [pc, #64]	; (80013e0 <HAL_SPI_MspInit+0x88>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <HAL_SPI_MspInit+0x88>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013b2:	23e0      	movs	r3, #224	; 0xe0
 80013b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ba:	2301      	movs	r3, #1
 80013bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013be:	2303      	movs	r3, #3
 80013c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013c2:	2305      	movs	r3, #5
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4619      	mov	r1, r3
 80013cc:	4805      	ldr	r0, [pc, #20]	; (80013e4 <HAL_SPI_MspInit+0x8c>)
 80013ce:	f000 fbb1 	bl	8001b34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80013d2:	bf00      	nop
 80013d4:	3728      	adds	r7, #40	; 0x28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40013000 	.word	0x40013000
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020000 	.word	0x40020000

080013e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_MspInit+0x54>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	4a11      	ldr	r2, [pc, #68]	; (800143c <HAL_MspInit+0x54>)
 80013f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fc:	6453      	str	r3, [r2, #68]	; 0x44
 80013fe:	4b0f      	ldr	r3, [pc, #60]	; (800143c <HAL_MspInit+0x54>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <HAL_MspInit+0x54>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	4a0a      	ldr	r2, [pc, #40]	; (800143c <HAL_MspInit+0x54>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001418:	6413      	str	r3, [r2, #64]	; 0x40
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <HAL_MspInit+0x54>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	210f      	movs	r1, #15
 800142a:	f06f 0001 	mvn.w	r0, #1
 800142e:	f000 faab 	bl	8001988 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800

08001440 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08c      	sub	sp, #48	; 0x30
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8001450:	2200      	movs	r2, #0
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	2032      	movs	r0, #50	; 0x32
 8001456:	f000 fa97 	bl	8001988 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800145a:	2032      	movs	r0, #50	; 0x32
 800145c:	f000 fac0 	bl	80019e0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <HAL_InitTick+0xa4>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	4a1e      	ldr	r2, [pc, #120]	; (80014e4 <HAL_InitTick+0xa4>)
 800146a:	f043 0308 	orr.w	r3, r3, #8
 800146e:	6413      	str	r3, [r2, #64]	; 0x40
 8001470:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <HAL_InitTick+0xa4>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800147c:	f107 0210 	add.w	r2, r7, #16
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4611      	mov	r1, r2
 8001486:	4618      	mov	r0, r3
 8001488:	f001 fdba 	bl	8003000 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800148c:	f001 fd90 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8001490:	4603      	mov	r3, r0
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001498:	4a13      	ldr	r2, [pc, #76]	; (80014e8 <HAL_InitTick+0xa8>)
 800149a:	fba2 2303 	umull	r2, r3, r2, r3
 800149e:	0c9b      	lsrs	r3, r3, #18
 80014a0:	3b01      	subs	r3, #1
 80014a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <HAL_InitTick+0xac>)
 80014a6:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <HAL_InitTick+0xb0>)
 80014a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <HAL_InitTick+0xac>)
 80014ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014b0:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80014b2:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <HAL_InitTick+0xac>)
 80014b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b6:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_InitTick+0xac>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <HAL_InitTick+0xac>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80014c4:	4809      	ldr	r0, [pc, #36]	; (80014ec <HAL_InitTick+0xac>)
 80014c6:	f002 f9e1 	bl	800388c <HAL_TIM_Base_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d104      	bne.n	80014da <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80014d0:	4806      	ldr	r0, [pc, #24]	; (80014ec <HAL_InitTick+0xac>)
 80014d2:	f002 faab 	bl	8003a2c <HAL_TIM_Base_Start_IT>
 80014d6:	4603      	mov	r3, r0
 80014d8:	e000      	b.n	80014dc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3730      	adds	r7, #48	; 0x30
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40023800 	.word	0x40023800
 80014e8:	431bde83 	.word	0x431bde83
 80014ec:	20005104 	.word	0x20005104
 80014f0:	40000c00 	.word	0x40000c00

080014f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <NMI_Handler+0x4>

080014fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <HardFault_Handler+0x4>

08001500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <MemManage_Handler+0x4>

08001506 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <BusFault_Handler+0x4>

0800150c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <UsageFault_Handler+0x4>

08001512 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <USART2_IRQHandler+0x10>)
 8001526:	f002 fef1 	bl	800430c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000514c 	.word	0x2000514c

08001534 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <TIM5_IRQHandler+0x10>)
 800153a:	f002 fb09 	bl	8003b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20005104 	.word	0x20005104

08001548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001550:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <_sbrk+0x5c>)
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <_sbrk+0x60>)
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <_sbrk+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <_sbrk+0x64>)
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <_sbrk+0x68>)
 8001568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	429a      	cmp	r2, r3
 8001576:	d207      	bcs.n	8001588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001578:	f00b fa50 	bl	800ca1c <__errno>
 800157c:	4603      	mov	r3, r0
 800157e:	220c      	movs	r2, #12
 8001580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001586:	e009      	b.n	800159c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	4a05      	ldr	r2, [pc, #20]	; (80015ac <_sbrk+0x64>)
 8001598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159a:	68fb      	ldr	r3, [r7, #12]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20020000 	.word	0x20020000
 80015a8:	00000400 	.word	0x00000400
 80015ac:	200001a8 	.word	0x200001a8
 80015b0:	20005658 	.word	0x20005658

080015b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <SystemInit+0x20>)
 80015ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015be:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <SystemInit+0x20>)
 80015c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015de:	4a12      	ldr	r2, [pc, #72]	; (8001628 <MX_USART2_UART_Init+0x50>)
 80015e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015fe:	220c      	movs	r2, #12
 8001600:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001602:	4b08      	ldr	r3, [pc, #32]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800160e:	4805      	ldr	r0, [pc, #20]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 8001610:	f002 fc62 	bl	8003ed8 <HAL_UART_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800161a:	f7ff fe57 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000514c 	.word	0x2000514c
 8001628:	40004400 	.word	0x40004400

0800162c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a1d      	ldr	r2, [pc, #116]	; (80016c0 <HAL_UART_MspInit+0x94>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d133      	bne.n	80016b6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <HAL_UART_MspInit+0x98>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	4a1b      	ldr	r2, [pc, #108]	; (80016c4 <HAL_UART_MspInit+0x98>)
 8001658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800165c:	6413      	str	r3, [r2, #64]	; 0x40
 800165e:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <HAL_UART_MspInit+0x98>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_UART_MspInit+0x98>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <HAL_UART_MspInit+0x98>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_UART_MspInit+0x98>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001686:	230c      	movs	r3, #12
 8001688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001692:	2303      	movs	r3, #3
 8001694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001696:	2307      	movs	r3, #7
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	4809      	ldr	r0, [pc, #36]	; (80016c8 <HAL_UART_MspInit+0x9c>)
 80016a2:	f000 fa47 	bl	8001b34 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2105      	movs	r1, #5
 80016aa:	2026      	movs	r0, #38	; 0x26
 80016ac:	f000 f96c 	bl	8001988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016b0:	2026      	movs	r0, #38	; 0x26
 80016b2:	f000 f995 	bl	80019e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016b6:	bf00      	nop
 80016b8:	3728      	adds	r7, #40	; 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40004400 	.word	0x40004400
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020000 	.word	0x40020000

080016cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001704 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016d0:	480d      	ldr	r0, [pc, #52]	; (8001708 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016d2:	490e      	ldr	r1, [pc, #56]	; (800170c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016d4:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d8:	e002      	b.n	80016e0 <LoopCopyDataInit>

080016da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016de:	3304      	adds	r3, #4

080016e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e4:	d3f9      	bcc.n	80016da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e6:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016e8:	4c0b      	ldr	r4, [pc, #44]	; (8001718 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ec:	e001      	b.n	80016f2 <LoopFillZerobss>

080016ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f0:	3204      	adds	r2, #4

080016f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f4:	d3fb      	bcc.n	80016ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016f6:	f7ff ff5d 	bl	80015b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016fa:	f00b f995 	bl	800ca28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016fe:	f7ff fd47 	bl	8001190 <main>
  bx  lr    
 8001702:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001704:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800170c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001710:	0800db18 	.word	0x0800db18
  ldr r2, =_sbss
 8001714:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001718:	20005658 	.word	0x20005658

0800171c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800171c:	e7fe      	b.n	800171c <ADC_IRQHandler>
	...

08001720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001724:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <HAL_Init+0x40>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0d      	ldr	r2, [pc, #52]	; (8001760 <HAL_Init+0x40>)
 800172a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800172e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_Init+0x40>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <HAL_Init+0x40>)
 8001736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800173a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a07      	ldr	r2, [pc, #28]	; (8001760 <HAL_Init+0x40>)
 8001742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001746:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001748:	2003      	movs	r0, #3
 800174a:	f000 f8fd 	bl	8001948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800174e:	200f      	movs	r0, #15
 8001750:	f7ff fe76 	bl	8001440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001754:	f7ff fe48 	bl	80013e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40023c00 	.word	0x40023c00

08001764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_IncTick+0x20>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_IncTick+0x24>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4413      	add	r3, r2
 8001774:	4a04      	ldr	r2, [pc, #16]	; (8001788 <HAL_IncTick+0x24>)
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000008 	.word	0x20000008
 8001788:	20005190 	.word	0x20005190

0800178c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return uwTick;
 8001790:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <HAL_GetTick+0x14>)
 8001792:	681b      	ldr	r3, [r3, #0]
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	20005190 	.word	0x20005190

080017a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017ac:	f7ff ffee 	bl	800178c <HAL_GetTick>
 80017b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017bc:	d005      	beq.n	80017ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <HAL_Delay+0x44>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ca:	bf00      	nop
 80017cc:	f7ff ffde 	bl	800178c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d8f7      	bhi.n	80017cc <HAL_Delay+0x28>
  {
  }
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000008 	.word	0x20000008

080017ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001808:	4013      	ands	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181e:	4a04      	ldr	r2, [pc, #16]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	60d3      	str	r3, [r2, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <__NVIC_GetPriorityGrouping+0x18>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	f003 0307 	and.w	r3, r3, #7
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	2b00      	cmp	r3, #0
 8001860:	db0b      	blt.n	800187a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	f003 021f 	and.w	r2, r3, #31
 8001868:	4907      	ldr	r1, [pc, #28]	; (8001888 <__NVIC_EnableIRQ+0x38>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	2001      	movs	r0, #1
 8001872:	fa00 f202 	lsl.w	r2, r0, r2
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000e100 	.word	0xe000e100

0800188c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db0a      	blt.n	80018b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	490c      	ldr	r1, [pc, #48]	; (80018d8 <__NVIC_SetPriority+0x4c>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	0112      	lsls	r2, r2, #4
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	440b      	add	r3, r1
 80018b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b4:	e00a      	b.n	80018cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4908      	ldr	r1, [pc, #32]	; (80018dc <__NVIC_SetPriority+0x50>)
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	3b04      	subs	r3, #4
 80018c4:	0112      	lsls	r2, r2, #4
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	440b      	add	r3, r1
 80018ca:	761a      	strb	r2, [r3, #24]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000e100 	.word	0xe000e100
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	; 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f1c3 0307 	rsb	r3, r3, #7
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	bf28      	it	cs
 80018fe:	2304      	movcs	r3, #4
 8001900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3304      	adds	r3, #4
 8001906:	2b06      	cmp	r3, #6
 8001908:	d902      	bls.n	8001910 <NVIC_EncodePriority+0x30>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3b03      	subs	r3, #3
 800190e:	e000      	b.n	8001912 <NVIC_EncodePriority+0x32>
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	401a      	ands	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001928:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	43d9      	mvns	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	4313      	orrs	r3, r2
         );
}
 800193a:	4618      	mov	r0, r3
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b07      	cmp	r3, #7
 8001954:	d00f      	beq.n	8001976 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b06      	cmp	r3, #6
 800195a:	d00c      	beq.n	8001976 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b05      	cmp	r3, #5
 8001960:	d009      	beq.n	8001976 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b04      	cmp	r3, #4
 8001966:	d006      	beq.n	8001976 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b03      	cmp	r3, #3
 800196c:	d003      	beq.n	8001976 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800196e:	2192      	movs	r1, #146	; 0x92
 8001970:	4804      	ldr	r0, [pc, #16]	; (8001984 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001972:	f7ff fcb0 	bl	80012d6 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff ff38 	bl	80017ec <__NVIC_SetPriorityGrouping>
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	0800d6f4 	.word	0x0800d6f4

08001988 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
 8001994:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b0f      	cmp	r3, #15
 800199e:	d903      	bls.n	80019a8 <HAL_NVIC_SetPriority+0x20>
 80019a0:	21aa      	movs	r1, #170	; 0xaa
 80019a2:	480e      	ldr	r0, [pc, #56]	; (80019dc <HAL_NVIC_SetPriority+0x54>)
 80019a4:	f7ff fc97 	bl	80012d6 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2b0f      	cmp	r3, #15
 80019ac:	d903      	bls.n	80019b6 <HAL_NVIC_SetPriority+0x2e>
 80019ae:	21ab      	movs	r1, #171	; 0xab
 80019b0:	480a      	ldr	r0, [pc, #40]	; (80019dc <HAL_NVIC_SetPriority+0x54>)
 80019b2:	f7ff fc90 	bl	80012d6 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b6:	f7ff ff3d 	bl	8001834 <__NVIC_GetPriorityGrouping>
 80019ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	68b9      	ldr	r1, [r7, #8]
 80019c0:	6978      	ldr	r0, [r7, #20]
 80019c2:	f7ff ff8d 	bl	80018e0 <NVIC_EncodePriority>
 80019c6:	4602      	mov	r2, r0
 80019c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019cc:	4611      	mov	r1, r2
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff ff5c 	bl	800188c <__NVIC_SetPriority>
}
 80019d4:	bf00      	nop
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	0800d6f4 	.word	0x0800d6f4

080019e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	da03      	bge.n	80019fa <HAL_NVIC_EnableIRQ+0x1a>
 80019f2:	21be      	movs	r1, #190	; 0xbe
 80019f4:	4805      	ldr	r0, [pc, #20]	; (8001a0c <HAL_NVIC_EnableIRQ+0x2c>)
 80019f6:	f7ff fc6e 	bl	80012d6 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff ff26 	bl	8001850 <__NVIC_EnableIRQ>
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	0800d6f4 	.word	0x0800d6f4

08001a10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a1e:	f7ff feb5 	bl	800178c <HAL_GetTick>
 8001a22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d008      	beq.n	8001a42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2280      	movs	r2, #128	; 0x80
 8001a34:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e052      	b.n	8001ae8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 0216 	bic.w	r2, r2, #22
 8001a50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	695a      	ldr	r2, [r3, #20]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d103      	bne.n	8001a72 <HAL_DMA_Abort+0x62>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d007      	beq.n	8001a82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0208 	bic.w	r2, r2, #8
 8001a80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0201 	bic.w	r2, r2, #1
 8001a90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a92:	e013      	b.n	8001abc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a94:	f7ff fe7a 	bl	800178c <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b05      	cmp	r3, #5
 8001aa0:	d90c      	bls.n	8001abc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2203      	movs	r2, #3
 8001aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e015      	b.n	8001ae8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1e4      	bne.n	8001a94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ace:	223f      	movs	r2, #63	; 0x3f
 8001ad0:	409a      	lsls	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d004      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2280      	movs	r2, #128	; 0x80
 8001b08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e00c      	b.n	8001b28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2205      	movs	r2, #5
 8001b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0201 	bic.w	r2, r2, #1
 8001b24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a33      	ldr	r2, [pc, #204]	; (8001c1c <HAL_GPIO_Init+0xe8>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d017      	beq.n	8001b82 <HAL_GPIO_Init+0x4e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a32      	ldr	r2, [pc, #200]	; (8001c20 <HAL_GPIO_Init+0xec>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d013      	beq.n	8001b82 <HAL_GPIO_Init+0x4e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a31      	ldr	r2, [pc, #196]	; (8001c24 <HAL_GPIO_Init+0xf0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d00f      	beq.n	8001b82 <HAL_GPIO_Init+0x4e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a30      	ldr	r2, [pc, #192]	; (8001c28 <HAL_GPIO_Init+0xf4>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d00b      	beq.n	8001b82 <HAL_GPIO_Init+0x4e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a2f      	ldr	r2, [pc, #188]	; (8001c2c <HAL_GPIO_Init+0xf8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d007      	beq.n	8001b82 <HAL_GPIO_Init+0x4e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a2e      	ldr	r2, [pc, #184]	; (8001c30 <HAL_GPIO_Init+0xfc>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x4e>
 8001b7a:	21ac      	movs	r1, #172	; 0xac
 8001b7c:	482d      	ldr	r0, [pc, #180]	; (8001c34 <HAL_GPIO_Init+0x100>)
 8001b7e:	f7ff fbaa 	bl	80012d6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <HAL_GPIO_Init+0x64>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	0c1b      	lsrs	r3, r3, #16
 8001b92:	041b      	lsls	r3, r3, #16
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x6c>
 8001b98:	21ad      	movs	r1, #173	; 0xad
 8001b9a:	4826      	ldr	r0, [pc, #152]	; (8001c34 <HAL_GPIO_Init+0x100>)
 8001b9c:	f7ff fb9b 	bl	80012d6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d035      	beq.n	8001c14 <HAL_GPIO_Init+0xe0>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d031      	beq.n	8001c14 <HAL_GPIO_Init+0xe0>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b11      	cmp	r3, #17
 8001bb6:	d02d      	beq.n	8001c14 <HAL_GPIO_Init+0xe0>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d029      	beq.n	8001c14 <HAL_GPIO_Init+0xe0>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b12      	cmp	r3, #18
 8001bc6:	d025      	beq.n	8001c14 <HAL_GPIO_Init+0xe0>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001bd0:	d020      	beq.n	8001c14 <HAL_GPIO_Init+0xe0>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001bda:	d01b      	beq.n	8001c14 <HAL_GPIO_Init+0xe0>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001be4:	d016      	beq.n	8001c14 <HAL_GPIO_Init+0xe0>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001bee:	d011      	beq.n	8001c14 <HAL_GPIO_Init+0xe0>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001bf8:	d00c      	beq.n	8001c14 <HAL_GPIO_Init+0xe0>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001c02:	d007      	beq.n	8001c14 <HAL_GPIO_Init+0xe0>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0xe0>
 8001c0c:	21ae      	movs	r1, #174	; 0xae
 8001c0e:	4809      	ldr	r0, [pc, #36]	; (8001c34 <HAL_GPIO_Init+0x100>)
 8001c10:	f7ff fb61 	bl	80012d6 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c14:	2300      	movs	r3, #0
 8001c16:	61fb      	str	r3, [r7, #28]
 8001c18:	e211      	b.n	800203e <HAL_GPIO_Init+0x50a>
 8001c1a:	bf00      	nop
 8001c1c:	40020000 	.word	0x40020000
 8001c20:	40020400 	.word	0x40020400
 8001c24:	40020800 	.word	0x40020800
 8001c28:	40020c00 	.word	0x40020c00
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40021c00 	.word	0x40021c00
 8001c34:	0800d730 	.word	0x0800d730
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c38:	2201      	movs	r2, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	f040 81f1 	bne.w	8002038 <HAL_GPIO_Init+0x504>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d005      	beq.n	8001c6e <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d144      	bne.n	8001cf8 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00f      	beq.n	8001c96 <HAL_GPIO_Init+0x162>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d00b      	beq.n	8001c96 <HAL_GPIO_Init+0x162>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d007      	beq.n	8001c96 <HAL_GPIO_Init+0x162>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x162>
 8001c8e:	21c0      	movs	r1, #192	; 0xc0
 8001c90:	489f      	ldr	r0, [pc, #636]	; (8001f10 <HAL_GPIO_Init+0x3dc>)
 8001c92:	f7ff fb20 	bl	80012d6 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ccc:	2201      	movs	r2, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	f003 0201 	and.w	r2, r3, #1
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d027      	beq.n	8001d54 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00b      	beq.n	8001d24 <HAL_GPIO_Init+0x1f0>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d007      	beq.n	8001d24 <HAL_GPIO_Init+0x1f0>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x1f0>
 8001d1c:	21d1      	movs	r1, #209	; 0xd1
 8001d1e:	487c      	ldr	r0, [pc, #496]	; (8001f10 <HAL_GPIO_Init+0x3dc>)
 8001d20:	f7ff fad9 	bl	80012d6 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	2203      	movs	r2, #3
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	f040 80a0 	bne.w	8001ea2 <HAL_GPIO_Init+0x36e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d077      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	2b09      	cmp	r3, #9
 8001d70:	d073      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d06f      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d06b      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d067      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d063      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d05f      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d05b      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d057      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d053      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d04f      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d04b      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d047      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d043      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	2b05      	cmp	r3, #5
 8001dd8:	d03f      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	2b05      	cmp	r3, #5
 8001de0:	d03b      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	2b05      	cmp	r3, #5
 8001de8:	d037      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d033      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	2b06      	cmp	r3, #6
 8001df8:	d02f      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	2b05      	cmp	r3, #5
 8001e00:	d02b      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d027      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	2b07      	cmp	r3, #7
 8001e10:	d023      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	2b07      	cmp	r3, #7
 8001e18:	d01f      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	2b07      	cmp	r3, #7
 8001e20:	d01b      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d017      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	2b0a      	cmp	r3, #10
 8001e30:	d013      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	2b09      	cmp	r3, #9
 8001e38:	d00f      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	2b09      	cmp	r3, #9
 8001e40:	d00b      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	2b0c      	cmp	r3, #12
 8001e48:	d007      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	2b0f      	cmp	r3, #15
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x326>
 8001e52:	21de      	movs	r1, #222	; 0xde
 8001e54:	482e      	ldr	r0, [pc, #184]	; (8001f10 <HAL_GPIO_Init+0x3dc>)
 8001e56:	f7ff fa3e 	bl	80012d6 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	08da      	lsrs	r2, r3, #3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3208      	adds	r2, #8
 8001e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	220f      	movs	r2, #15
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	691a      	ldr	r2, [r3, #16]
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	08da      	lsrs	r2, r3, #3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3208      	adds	r2, #8
 8001e9c:	69b9      	ldr	r1, [r7, #24]
 8001e9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	2203      	movs	r2, #3
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0203 	and.w	r2, r3, #3
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 80aa 	beq.w	8002038 <HAL_GPIO_Init+0x504>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <HAL_GPIO_Init+0x3e0>)
 8001eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eec:	4a09      	ldr	r2, [pc, #36]	; (8001f14 <HAL_GPIO_Init+0x3e0>)
 8001eee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef2:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef4:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <HAL_GPIO_Init+0x3e0>)
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f00:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <HAL_GPIO_Init+0x3e4>)
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	089b      	lsrs	r3, r3, #2
 8001f06:	3302      	adds	r3, #2
 8001f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0c:	e006      	b.n	8001f1c <HAL_GPIO_Init+0x3e8>
 8001f0e:	bf00      	nop
 8001f10:	0800d730 	.word	0x0800d730
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40013800 	.word	0x40013800
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	220f      	movs	r2, #15
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a46      	ldr	r2, [pc, #280]	; (8002050 <HAL_GPIO_Init+0x51c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d019      	beq.n	8001f70 <HAL_GPIO_Init+0x43c>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a45      	ldr	r2, [pc, #276]	; (8002054 <HAL_GPIO_Init+0x520>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d013      	beq.n	8001f6c <HAL_GPIO_Init+0x438>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a44      	ldr	r2, [pc, #272]	; (8002058 <HAL_GPIO_Init+0x524>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d00d      	beq.n	8001f68 <HAL_GPIO_Init+0x434>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a43      	ldr	r2, [pc, #268]	; (800205c <HAL_GPIO_Init+0x528>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d007      	beq.n	8001f64 <HAL_GPIO_Init+0x430>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a42      	ldr	r2, [pc, #264]	; (8002060 <HAL_GPIO_Init+0x52c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d101      	bne.n	8001f60 <HAL_GPIO_Init+0x42c>
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	e008      	b.n	8001f72 <HAL_GPIO_Init+0x43e>
 8001f60:	2307      	movs	r3, #7
 8001f62:	e006      	b.n	8001f72 <HAL_GPIO_Init+0x43e>
 8001f64:	2303      	movs	r3, #3
 8001f66:	e004      	b.n	8001f72 <HAL_GPIO_Init+0x43e>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e002      	b.n	8001f72 <HAL_GPIO_Init+0x43e>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <HAL_GPIO_Init+0x43e>
 8001f70:	2300      	movs	r3, #0
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	f002 0203 	and.w	r2, r2, #3
 8001f78:	0092      	lsls	r2, r2, #2
 8001f7a:	4093      	lsls	r3, r2
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f82:	4938      	ldr	r1, [pc, #224]	; (8002064 <HAL_GPIO_Init+0x530>)
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	3302      	adds	r3, #2
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f90:	4b35      	ldr	r3, [pc, #212]	; (8002068 <HAL_GPIO_Init+0x534>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fb4:	4a2c      	ldr	r2, [pc, #176]	; (8002068 <HAL_GPIO_Init+0x534>)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fba:	4b2b      	ldr	r3, [pc, #172]	; (8002068 <HAL_GPIO_Init+0x534>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fde:	4a22      	ldr	r2, [pc, #136]	; (8002068 <HAL_GPIO_Init+0x534>)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fe4:	4b20      	ldr	r3, [pc, #128]	; (8002068 <HAL_GPIO_Init+0x534>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002008:	4a17      	ldr	r2, [pc, #92]	; (8002068 <HAL_GPIO_Init+0x534>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800200e:	4b16      	ldr	r3, [pc, #88]	; (8002068 <HAL_GPIO_Init+0x534>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x4fe>
        {
          temp |= iocurrent;
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002032:	4a0d      	ldr	r2, [pc, #52]	; (8002068 <HAL_GPIO_Init+0x534>)
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	3301      	adds	r3, #1
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	2b0f      	cmp	r3, #15
 8002042:	f67f adf9 	bls.w	8001c38 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8002046:	bf00      	nop
 8002048:	bf00      	nop
 800204a:	3720      	adds	r7, #32
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40020000 	.word	0x40020000
 8002054:	40020400 	.word	0x40020400
 8002058:	40020800 	.word	0x40020800
 800205c:	40020c00 	.word	0x40020c00
 8002060:	40021000 	.word	0x40021000
 8002064:	40013800 	.word	0x40013800
 8002068:	40013c00 	.word	0x40013c00

0800206c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
 8002078:	4613      	mov	r3, r2
 800207a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800207c:	887b      	ldrh	r3, [r7, #2]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d004      	beq.n	800208c <HAL_GPIO_WritePin+0x20>
 8002082:	887b      	ldrh	r3, [r7, #2]
 8002084:	0c1b      	lsrs	r3, r3, #16
 8002086:	041b      	lsls	r3, r3, #16
 8002088:	2b00      	cmp	r3, #0
 800208a:	d004      	beq.n	8002096 <HAL_GPIO_WritePin+0x2a>
 800208c:	f240 119d 	movw	r1, #413	; 0x19d
 8002090:	480e      	ldr	r0, [pc, #56]	; (80020cc <HAL_GPIO_WritePin+0x60>)
 8002092:	f7ff f920 	bl	80012d6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002096:	787b      	ldrb	r3, [r7, #1]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d007      	beq.n	80020ac <HAL_GPIO_WritePin+0x40>
 800209c:	787b      	ldrb	r3, [r7, #1]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d004      	beq.n	80020ac <HAL_GPIO_WritePin+0x40>
 80020a2:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80020a6:	4809      	ldr	r0, [pc, #36]	; (80020cc <HAL_GPIO_WritePin+0x60>)
 80020a8:	f7ff f915 	bl	80012d6 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80020ac:	787b      	ldrb	r3, [r7, #1]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020b2:	887a      	ldrh	r2, [r7, #2]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020b8:	e003      	b.n	80020c2 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ba:	887b      	ldrh	r3, [r7, #2]
 80020bc:	041a      	lsls	r2, r3, #16
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	619a      	str	r2, [r3, #24]
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	0800d730 	.word	0x0800d730

080020d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e1be      	b.n	8002460 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a9f      	ldr	r2, [pc, #636]	; (8002364 <HAL_I2C_Init+0x294>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d00e      	beq.n	800210a <HAL_I2C_Init+0x3a>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a9d      	ldr	r2, [pc, #628]	; (8002368 <HAL_I2C_Init+0x298>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d009      	beq.n	800210a <HAL_I2C_Init+0x3a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a9c      	ldr	r2, [pc, #624]	; (800236c <HAL_I2C_Init+0x29c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d004      	beq.n	800210a <HAL_I2C_Init+0x3a>
 8002100:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002104:	489a      	ldr	r0, [pc, #616]	; (8002370 <HAL_I2C_Init+0x2a0>)
 8002106:	f7ff f8e6 	bl	80012d6 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d004      	beq.n	800211c <HAL_I2C_Init+0x4c>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	4a97      	ldr	r2, [pc, #604]	; (8002374 <HAL_I2C_Init+0x2a4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d904      	bls.n	8002126 <HAL_I2C_Init+0x56>
 800211c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002120:	4893      	ldr	r0, [pc, #588]	; (8002370 <HAL_I2C_Init+0x2a0>)
 8002122:	f7ff f8d8 	bl	80012d6 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d009      	beq.n	8002142 <HAL_I2C_Init+0x72>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002136:	d004      	beq.n	8002142 <HAL_I2C_Init+0x72>
 8002138:	f240 11c1 	movw	r1, #449	; 0x1c1
 800213c:	488c      	ldr	r0, [pc, #560]	; (8002370 <HAL_I2C_Init+0x2a0>)
 800213e:	f7ff f8ca 	bl	80012d6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800214a:	f023 0303 	bic.w	r3, r3, #3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d004      	beq.n	800215c <HAL_I2C_Init+0x8c>
 8002152:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002156:	4886      	ldr	r0, [pc, #536]	; (8002370 <HAL_I2C_Init+0x2a0>)
 8002158:	f7ff f8bd 	bl	80012d6 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002164:	d009      	beq.n	800217a <HAL_I2C_Init+0xaa>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800216e:	d004      	beq.n	800217a <HAL_I2C_Init+0xaa>
 8002170:	f240 11c3 	movw	r1, #451	; 0x1c3
 8002174:	487e      	ldr	r0, [pc, #504]	; (8002370 <HAL_I2C_Init+0x2a0>)
 8002176:	f7ff f8ae 	bl	80012d6 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d008      	beq.n	8002194 <HAL_I2C_Init+0xc4>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d004      	beq.n	8002194 <HAL_I2C_Init+0xc4>
 800218a:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800218e:	4878      	ldr	r0, [pc, #480]	; (8002370 <HAL_I2C_Init+0x2a0>)
 8002190:	f7ff f8a1 	bl	80012d6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800219c:	2b00      	cmp	r3, #0
 800219e:	d004      	beq.n	80021aa <HAL_I2C_Init+0xda>
 80021a0:	f240 11c5 	movw	r1, #453	; 0x1c5
 80021a4:	4872      	ldr	r0, [pc, #456]	; (8002370 <HAL_I2C_Init+0x2a0>)
 80021a6:	f7ff f896 	bl	80012d6 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d008      	beq.n	80021c4 <HAL_I2C_Init+0xf4>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	2b40      	cmp	r3, #64	; 0x40
 80021b8:	d004      	beq.n	80021c4 <HAL_I2C_Init+0xf4>
 80021ba:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80021be:	486c      	ldr	r0, [pc, #432]	; (8002370 <HAL_I2C_Init+0x2a0>)
 80021c0:	f7ff f889 	bl	80012d6 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d008      	beq.n	80021de <HAL_I2C_Init+0x10e>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	2b80      	cmp	r3, #128	; 0x80
 80021d2:	d004      	beq.n	80021de <HAL_I2C_Init+0x10e>
 80021d4:	f240 11c7 	movw	r1, #455	; 0x1c7
 80021d8:	4865      	ldr	r0, [pc, #404]	; (8002370 <HAL_I2C_Init+0x2a0>)
 80021da:	f7ff f87c 	bl	80012d6 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7fe ff84 	bl	8001100 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2224      	movs	r2, #36	; 0x24
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0201 	bic.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800221e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800222e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002230:	f000 febe 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8002234:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	4a4f      	ldr	r2, [pc, #316]	; (8002378 <HAL_I2C_Init+0x2a8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d807      	bhi.n	8002250 <HAL_I2C_Init+0x180>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4a4e      	ldr	r2, [pc, #312]	; (800237c <HAL_I2C_Init+0x2ac>)
 8002244:	4293      	cmp	r3, r2
 8002246:	bf94      	ite	ls
 8002248:	2301      	movls	r3, #1
 800224a:	2300      	movhi	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	e006      	b.n	800225e <HAL_I2C_Init+0x18e>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4a4b      	ldr	r2, [pc, #300]	; (8002380 <HAL_I2C_Init+0x2b0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	bf94      	ite	ls
 8002258:	2301      	movls	r3, #1
 800225a:	2300      	movhi	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e0fc      	b.n	8002460 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4a46      	ldr	r2, [pc, #280]	; (8002384 <HAL_I2C_Init+0x2b4>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	0c9b      	lsrs	r3, r3, #18
 8002270:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	430a      	orrs	r2, r1
 8002284:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	4a38      	ldr	r2, [pc, #224]	; (8002378 <HAL_I2C_Init+0x2a8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d802      	bhi.n	80022a0 <HAL_I2C_Init+0x1d0>
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	3301      	adds	r3, #1
 800229e:	e009      	b.n	80022b4 <HAL_I2C_Init+0x1e4>
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022a6:	fb02 f303 	mul.w	r3, r2, r3
 80022aa:	4a37      	ldr	r2, [pc, #220]	; (8002388 <HAL_I2C_Init+0x2b8>)
 80022ac:	fba2 2303 	umull	r2, r3, r2, r3
 80022b0:	099b      	lsrs	r3, r3, #6
 80022b2:	3301      	adds	r3, #1
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	430b      	orrs	r3, r1
 80022ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	492a      	ldr	r1, [pc, #168]	; (8002378 <HAL_I2C_Init+0x2a8>)
 80022d0:	428b      	cmp	r3, r1
 80022d2:	d819      	bhi.n	8002308 <HAL_I2C_Init+0x238>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	1e59      	subs	r1, r3, #1
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	fbb1 f3f3 	udiv	r3, r1, r3
 80022e2:	1c59      	adds	r1, r3, #1
 80022e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022e8:	400b      	ands	r3, r1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00a      	beq.n	8002304 <HAL_I2C_Init+0x234>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1e59      	subs	r1, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80022fc:	3301      	adds	r3, #1
 80022fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002302:	e066      	b.n	80023d2 <HAL_I2C_Init+0x302>
 8002304:	2304      	movs	r3, #4
 8002306:	e064      	b.n	80023d2 <HAL_I2C_Init+0x302>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d111      	bne.n	8002334 <HAL_I2C_Init+0x264>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	1e58      	subs	r0, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6859      	ldr	r1, [r3, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	440b      	add	r3, r1
 800231e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002322:	3301      	adds	r3, #1
 8002324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002328:	2b00      	cmp	r3, #0
 800232a:	bf0c      	ite	eq
 800232c:	2301      	moveq	r3, #1
 800232e:	2300      	movne	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	e012      	b.n	800235a <HAL_I2C_Init+0x28a>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	1e58      	subs	r0, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6859      	ldr	r1, [r3, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	0099      	lsls	r1, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	fbb0 f3f3 	udiv	r3, r0, r3
 800234a:	3301      	adds	r3, #1
 800234c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002350:	2b00      	cmp	r3, #0
 8002352:	bf0c      	ite	eq
 8002354:	2301      	moveq	r3, #1
 8002356:	2300      	movne	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d016      	beq.n	800238c <HAL_I2C_Init+0x2bc>
 800235e:	2301      	movs	r3, #1
 8002360:	e037      	b.n	80023d2 <HAL_I2C_Init+0x302>
 8002362:	bf00      	nop
 8002364:	40005400 	.word	0x40005400
 8002368:	40005800 	.word	0x40005800
 800236c:	40005c00 	.word	0x40005c00
 8002370:	0800d76c 	.word	0x0800d76c
 8002374:	00061a80 	.word	0x00061a80
 8002378:	000186a0 	.word	0x000186a0
 800237c:	001e847f 	.word	0x001e847f
 8002380:	003d08ff 	.word	0x003d08ff
 8002384:	431bde83 	.word	0x431bde83
 8002388:	10624dd3 	.word	0x10624dd3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10e      	bne.n	80023b2 <HAL_I2C_Init+0x2e2>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	1e58      	subs	r0, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6859      	ldr	r1, [r3, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	440b      	add	r3, r1
 80023a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023a6:	3301      	adds	r3, #1
 80023a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023b0:	e00f      	b.n	80023d2 <HAL_I2C_Init+0x302>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1e58      	subs	r0, r3, #1
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6859      	ldr	r1, [r3, #4]
 80023ba:	460b      	mov	r3, r1
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	0099      	lsls	r1, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c8:	3301      	adds	r3, #1
 80023ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	6809      	ldr	r1, [r1, #0]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69da      	ldr	r2, [r3, #28]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	431a      	orrs	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002400:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6911      	ldr	r1, [r2, #16]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	68d2      	ldr	r2, [r2, #12]
 800240c:	4311      	orrs	r1, r2
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6812      	ldr	r2, [r2, #0]
 8002412:	430b      	orrs	r3, r1
 8002414:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0201 	orr.w	r2, r2, #1
 8002440:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2220      	movs	r2, #32
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e316      	b.n	8002aa8 <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b0f      	cmp	r3, #15
 8002480:	d903      	bls.n	800248a <HAL_RCC_OscConfig+0x22>
 8002482:	21e8      	movs	r1, #232	; 0xe8
 8002484:	48a3      	ldr	r0, [pc, #652]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 8002486:	f7fe ff26 	bl	80012d6 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 8088 	beq.w	80025a8 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00d      	beq.n	80024bc <HAL_RCC_OscConfig+0x54>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a8:	d008      	beq.n	80024bc <HAL_RCC_OscConfig+0x54>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b2:	d003      	beq.n	80024bc <HAL_RCC_OscConfig+0x54>
 80024b4:	21ed      	movs	r1, #237	; 0xed
 80024b6:	4897      	ldr	r0, [pc, #604]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	f7fe ff0d 	bl	80012d6 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024bc:	4b96      	ldr	r3, [pc, #600]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 030c 	and.w	r3, r3, #12
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d00c      	beq.n	80024e2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024c8:	4b93      	ldr	r3, [pc, #588]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d112      	bne.n	80024fa <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d4:	4b90      	ldr	r3, [pc, #576]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024e0:	d10b      	bne.n	80024fa <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e2:	4b8d      	ldr	r3, [pc, #564]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d05b      	beq.n	80025a6 <HAL_RCC_OscConfig+0x13e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d157      	bne.n	80025a6 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e2d6      	b.n	8002aa8 <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002502:	d106      	bne.n	8002512 <HAL_RCC_OscConfig+0xaa>
 8002504:	4b84      	ldr	r3, [pc, #528]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a83      	ldr	r2, [pc, #524]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 800250a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	e01d      	b.n	800254e <HAL_RCC_OscConfig+0xe6>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800251a:	d10c      	bne.n	8002536 <HAL_RCC_OscConfig+0xce>
 800251c:	4b7e      	ldr	r3, [pc, #504]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a7d      	ldr	r2, [pc, #500]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 8002522:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b7b      	ldr	r3, [pc, #492]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a7a      	ldr	r2, [pc, #488]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 800252e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	e00b      	b.n	800254e <HAL_RCC_OscConfig+0xe6>
 8002536:	4b78      	ldr	r3, [pc, #480]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a77      	ldr	r2, [pc, #476]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 800253c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	4b75      	ldr	r3, [pc, #468]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a74      	ldr	r2, [pc, #464]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 8002548:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800254c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d013      	beq.n	800257e <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002556:	f7ff f919 	bl	800178c <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800255e:	f7ff f915 	bl	800178c <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b64      	cmp	r3, #100	; 0x64
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e29b      	b.n	8002aa8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002570:	4b69      	ldr	r3, [pc, #420]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0xf6>
 800257c:	e014      	b.n	80025a8 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7ff f905 	bl	800178c <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002586:	f7ff f901 	bl	800178c <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b64      	cmp	r3, #100	; 0x64
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e287      	b.n	8002aa8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002598:	4b5f      	ldr	r3, [pc, #380]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f0      	bne.n	8002586 <HAL_RCC_OscConfig+0x11e>
 80025a4:	e000      	b.n	80025a8 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d079      	beq.n	80026a8 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <HAL_RCC_OscConfig+0x166>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d004      	beq.n	80025ce <HAL_RCC_OscConfig+0x166>
 80025c4:	f240 111f 	movw	r1, #287	; 0x11f
 80025c8:	4852      	ldr	r0, [pc, #328]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80025ca:	f7fe fe84 	bl	80012d6 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	2b1f      	cmp	r3, #31
 80025d4:	d904      	bls.n	80025e0 <HAL_RCC_OscConfig+0x178>
 80025d6:	f44f 7190 	mov.w	r1, #288	; 0x120
 80025da:	484e      	ldr	r0, [pc, #312]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80025dc:	f7fe fe7b 	bl	80012d6 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025e0:	4b4d      	ldr	r3, [pc, #308]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00b      	beq.n	8002604 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ec:	4b4a      	ldr	r3, [pc, #296]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d11c      	bne.n	8002632 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f8:	4b47      	ldr	r3, [pc, #284]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d116      	bne.n	8002632 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002604:	4b44      	ldr	r3, [pc, #272]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_RCC_OscConfig+0x1b4>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d001      	beq.n	800261c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e245      	b.n	8002aa8 <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261c:	4b3e      	ldr	r3, [pc, #248]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	493b      	ldr	r1, [pc, #236]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 800262c:	4313      	orrs	r3, r2
 800262e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002630:	e03a      	b.n	80026a8 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d020      	beq.n	800267c <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800263a:	4b38      	ldr	r3, [pc, #224]	; (800271c <HAL_RCC_OscConfig+0x2b4>)
 800263c:	2201      	movs	r2, #1
 800263e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7ff f8a4 	bl	800178c <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002648:	f7ff f8a0 	bl	800178c <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e226      	b.n	8002aa8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265a:	4b2f      	ldr	r3, [pc, #188]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002666:	4b2c      	ldr	r3, [pc, #176]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4928      	ldr	r1, [pc, #160]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 8002676:	4313      	orrs	r3, r2
 8002678:	600b      	str	r3, [r1, #0]
 800267a:	e015      	b.n	80026a8 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267c:	4b27      	ldr	r3, [pc, #156]	; (800271c <HAL_RCC_OscConfig+0x2b4>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002682:	f7ff f883 	bl	800178c <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800268a:	f7ff f87f 	bl	800178c <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e205      	b.n	8002aa8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269c:	4b1e      	ldr	r3, [pc, #120]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1f0      	bne.n	800268a <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d046      	beq.n	8002742 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <HAL_RCC_OscConfig+0x266>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d004      	beq.n	80026ce <HAL_RCC_OscConfig+0x266>
 80026c4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80026c8:	4812      	ldr	r0, [pc, #72]	; (8002714 <HAL_RCC_OscConfig+0x2ac>)
 80026ca:	f7fe fe04 	bl	80012d6 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d016      	beq.n	8002704 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d6:	4b12      	ldr	r3, [pc, #72]	; (8002720 <HAL_RCC_OscConfig+0x2b8>)
 80026d8:	2201      	movs	r2, #1
 80026da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026dc:	f7ff f856 	bl	800178c <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e4:	f7ff f852 	bl	800178c <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e1d8      	b.n	8002aa8 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f6:	4b08      	ldr	r3, [pc, #32]	; (8002718 <HAL_RCC_OscConfig+0x2b0>)
 80026f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0f0      	beq.n	80026e4 <HAL_RCC_OscConfig+0x27c>
 8002702:	e01e      	b.n	8002742 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_RCC_OscConfig+0x2b8>)
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270a:	f7ff f83f 	bl	800178c <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002710:	e011      	b.n	8002736 <HAL_RCC_OscConfig+0x2ce>
 8002712:	bf00      	nop
 8002714:	0800d7a4 	.word	0x0800d7a4
 8002718:	40023800 	.word	0x40023800
 800271c:	42470000 	.word	0x42470000
 8002720:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002724:	f7ff f832 	bl	800178c <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e1b8      	b.n	8002aa8 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002736:	4b97      	ldr	r3, [pc, #604]	; (8002994 <HAL_RCC_OscConfig+0x52c>)
 8002738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0304 	and.w	r3, r3, #4
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 80a8 	beq.w	80028a0 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002750:	2300      	movs	r3, #0
 8002752:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00c      	beq.n	8002776 <HAL_RCC_OscConfig+0x30e>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d008      	beq.n	8002776 <HAL_RCC_OscConfig+0x30e>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b05      	cmp	r3, #5
 800276a:	d004      	beq.n	8002776 <HAL_RCC_OscConfig+0x30e>
 800276c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002770:	4889      	ldr	r0, [pc, #548]	; (8002998 <HAL_RCC_OscConfig+0x530>)
 8002772:	f7fe fdb0 	bl	80012d6 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002776:	4b87      	ldr	r3, [pc, #540]	; (8002994 <HAL_RCC_OscConfig+0x52c>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10f      	bne.n	80027a2 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	4b83      	ldr	r3, [pc, #524]	; (8002994 <HAL_RCC_OscConfig+0x52c>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	4a82      	ldr	r2, [pc, #520]	; (8002994 <HAL_RCC_OscConfig+0x52c>)
 800278c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002790:	6413      	str	r3, [r2, #64]	; 0x40
 8002792:	4b80      	ldr	r3, [pc, #512]	; (8002994 <HAL_RCC_OscConfig+0x52c>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279e:	2301      	movs	r3, #1
 80027a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a2:	4b7e      	ldr	r3, [pc, #504]	; (800299c <HAL_RCC_OscConfig+0x534>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d118      	bne.n	80027e0 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ae:	4b7b      	ldr	r3, [pc, #492]	; (800299c <HAL_RCC_OscConfig+0x534>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a7a      	ldr	r2, [pc, #488]	; (800299c <HAL_RCC_OscConfig+0x534>)
 80027b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ba:	f7fe ffe7 	bl	800178c <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c2:	f7fe ffe3 	bl	800178c <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e169      	b.n	8002aa8 <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d4:	4b71      	ldr	r3, [pc, #452]	; (800299c <HAL_RCC_OscConfig+0x534>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d106      	bne.n	80027f6 <HAL_RCC_OscConfig+0x38e>
 80027e8:	4b6a      	ldr	r3, [pc, #424]	; (8002994 <HAL_RCC_OscConfig+0x52c>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ec:	4a69      	ldr	r2, [pc, #420]	; (8002994 <HAL_RCC_OscConfig+0x52c>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6713      	str	r3, [r2, #112]	; 0x70
 80027f4:	e01c      	b.n	8002830 <HAL_RCC_OscConfig+0x3c8>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b05      	cmp	r3, #5
 80027fc:	d10c      	bne.n	8002818 <HAL_RCC_OscConfig+0x3b0>
 80027fe:	4b65      	ldr	r3, [pc, #404]	; (8002994 <HAL_RCC_OscConfig+0x52c>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002802:	4a64      	ldr	r2, [pc, #400]	; (8002994 <HAL_RCC_OscConfig+0x52c>)
 8002804:	f043 0304 	orr.w	r3, r3, #4
 8002808:	6713      	str	r3, [r2, #112]	; 0x70
 800280a:	4b62      	ldr	r3, [pc, #392]	; (8002994 <HAL_RCC_OscConfig+0x52c>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280e:	4a61      	ldr	r2, [pc, #388]	; (8002994 <HAL_RCC_OscConfig+0x52c>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	6713      	str	r3, [r2, #112]	; 0x70
 8002816:	e00b      	b.n	8002830 <HAL_RCC_OscConfig+0x3c8>
 8002818:	4b5e      	ldr	r3, [pc, #376]	; (8002994 <HAL_RCC_OscConfig+0x52c>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	4a5d      	ldr	r2, [pc, #372]	; (8002994 <HAL_RCC_OscConfig+0x52c>)
 800281e:	f023 0301 	bic.w	r3, r3, #1
 8002822:	6713      	str	r3, [r2, #112]	; 0x70
 8002824:	4b5b      	ldr	r3, [pc, #364]	; (8002994 <HAL_RCC_OscConfig+0x52c>)
 8002826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002828:	4a5a      	ldr	r2, [pc, #360]	; (8002994 <HAL_RCC_OscConfig+0x52c>)
 800282a:	f023 0304 	bic.w	r3, r3, #4
 800282e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d015      	beq.n	8002864 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002838:	f7fe ffa8 	bl	800178c <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283e:	e00a      	b.n	8002856 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002840:	f7fe ffa4 	bl	800178c <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	; 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e128      	b.n	8002aa8 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002856:	4b4f      	ldr	r3, [pc, #316]	; (8002994 <HAL_RCC_OscConfig+0x52c>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0ee      	beq.n	8002840 <HAL_RCC_OscConfig+0x3d8>
 8002862:	e014      	b.n	800288e <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002864:	f7fe ff92 	bl	800178c <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800286a:	e00a      	b.n	8002882 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800286c:	f7fe ff8e 	bl	800178c <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	f241 3288 	movw	r2, #5000	; 0x1388
 800287a:	4293      	cmp	r3, r2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e112      	b.n	8002aa8 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002882:	4b44      	ldr	r3, [pc, #272]	; (8002994 <HAL_RCC_OscConfig+0x52c>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1ee      	bne.n	800286c <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800288e:	7dfb      	ldrb	r3, [r7, #23]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d105      	bne.n	80028a0 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002894:	4b3f      	ldr	r3, [pc, #252]	; (8002994 <HAL_RCC_OscConfig+0x52c>)
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	4a3e      	ldr	r2, [pc, #248]	; (8002994 <HAL_RCC_OscConfig+0x52c>)
 800289a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800289e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00c      	beq.n	80028c2 <HAL_RCC_OscConfig+0x45a>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d008      	beq.n	80028c2 <HAL_RCC_OscConfig+0x45a>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d004      	beq.n	80028c2 <HAL_RCC_OscConfig+0x45a>
 80028b8:	f240 11cf 	movw	r1, #463	; 0x1cf
 80028bc:	4836      	ldr	r0, [pc, #216]	; (8002998 <HAL_RCC_OscConfig+0x530>)
 80028be:	f7fe fd0a 	bl	80012d6 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 80ed 	beq.w	8002aa6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028cc:	4b31      	ldr	r3, [pc, #196]	; (8002994 <HAL_RCC_OscConfig+0x52c>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 030c 	and.w	r3, r3, #12
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	f000 80ae 	beq.w	8002a36 <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	f040 8092 	bne.w	8002a08 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d009      	beq.n	8002900 <HAL_RCC_OscConfig+0x498>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028f4:	d004      	beq.n	8002900 <HAL_RCC_OscConfig+0x498>
 80028f6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80028fa:	4827      	ldr	r0, [pc, #156]	; (8002998 <HAL_RCC_OscConfig+0x530>)
 80028fc:	f7fe fceb 	bl	80012d6 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	2b3f      	cmp	r3, #63	; 0x3f
 8002906:	d904      	bls.n	8002912 <HAL_RCC_OscConfig+0x4aa>
 8002908:	f240 11d9 	movw	r1, #473	; 0x1d9
 800290c:	4822      	ldr	r0, [pc, #136]	; (8002998 <HAL_RCC_OscConfig+0x530>)
 800290e:	f7fe fce2 	bl	80012d6 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	2b31      	cmp	r3, #49	; 0x31
 8002918:	d904      	bls.n	8002924 <HAL_RCC_OscConfig+0x4bc>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002922:	d904      	bls.n	800292e <HAL_RCC_OscConfig+0x4c6>
 8002924:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8002928:	481b      	ldr	r0, [pc, #108]	; (8002998 <HAL_RCC_OscConfig+0x530>)
 800292a:	f7fe fcd4 	bl	80012d6 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002932:	2b02      	cmp	r3, #2
 8002934:	d010      	beq.n	8002958 <HAL_RCC_OscConfig+0x4f0>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293a:	2b04      	cmp	r3, #4
 800293c:	d00c      	beq.n	8002958 <HAL_RCC_OscConfig+0x4f0>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	2b06      	cmp	r3, #6
 8002944:	d008      	beq.n	8002958 <HAL_RCC_OscConfig+0x4f0>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	2b08      	cmp	r3, #8
 800294c:	d004      	beq.n	8002958 <HAL_RCC_OscConfig+0x4f0>
 800294e:	f240 11db 	movw	r1, #475	; 0x1db
 8002952:	4811      	ldr	r0, [pc, #68]	; (8002998 <HAL_RCC_OscConfig+0x530>)
 8002954:	f7fe fcbf 	bl	80012d6 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295c:	2b01      	cmp	r3, #1
 800295e:	d903      	bls.n	8002968 <HAL_RCC_OscConfig+0x500>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	2b0f      	cmp	r3, #15
 8002966:	d904      	bls.n	8002972 <HAL_RCC_OscConfig+0x50a>
 8002968:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800296c:	480a      	ldr	r0, [pc, #40]	; (8002998 <HAL_RCC_OscConfig+0x530>)
 800296e:	f7fe fcb2 	bl	80012d6 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002972:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_RCC_OscConfig+0x538>)
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7fe ff08 	bl	800178c <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297e:	e011      	b.n	80029a4 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002980:	f7fe ff04 	bl	800178c <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d90a      	bls.n	80029a4 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e08a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x640>
 8002992:	bf00      	nop
 8002994:	40023800 	.word	0x40023800
 8002998:	0800d7a4 	.word	0x0800d7a4
 800299c:	40007000 	.word	0x40007000
 80029a0:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a4:	4b42      	ldr	r3, [pc, #264]	; (8002ab0 <HAL_RCC_OscConfig+0x648>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1e7      	bne.n	8002980 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69da      	ldr	r2, [r3, #28]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	431a      	orrs	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	019b      	lsls	r3, r3, #6
 80029c0:	431a      	orrs	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c6:	085b      	lsrs	r3, r3, #1
 80029c8:	3b01      	subs	r3, #1
 80029ca:	041b      	lsls	r3, r3, #16
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	061b      	lsls	r3, r3, #24
 80029d4:	4936      	ldr	r1, [pc, #216]	; (8002ab0 <HAL_RCC_OscConfig+0x648>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029da:	4b36      	ldr	r3, [pc, #216]	; (8002ab4 <HAL_RCC_OscConfig+0x64c>)
 80029dc:	2201      	movs	r2, #1
 80029de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7fe fed4 	bl	800178c <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e8:	f7fe fed0 	bl	800178c <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e056      	b.n	8002aa8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fa:	4b2d      	ldr	r3, [pc, #180]	; (8002ab0 <HAL_RCC_OscConfig+0x648>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCC_OscConfig+0x580>
 8002a06:	e04e      	b.n	8002aa6 <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a08:	4b2a      	ldr	r3, [pc, #168]	; (8002ab4 <HAL_RCC_OscConfig+0x64c>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0e:	f7fe febd 	bl	800178c <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a16:	f7fe feb9 	bl	800178c <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e03f      	b.n	8002aa8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a28:	4b21      	ldr	r3, [pc, #132]	; (8002ab0 <HAL_RCC_OscConfig+0x648>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1f0      	bne.n	8002a16 <HAL_RCC_OscConfig+0x5ae>
 8002a34:	e037      	b.n	8002aa6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e032      	b.n	8002aa8 <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a42:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <HAL_RCC_OscConfig+0x648>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d028      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d121      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d11a      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a72:	4013      	ands	r3, r2
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a78:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d111      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a88:	085b      	lsrs	r3, r3, #1
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d107      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d001      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	42470060 	.word	0x42470060

08002ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e174      	b.n	8002db6 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_RCC_ClockConfig+0x24>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b0f      	cmp	r3, #15
 8002ada:	d904      	bls.n	8002ae6 <HAL_RCC_ClockConfig+0x2e>
 8002adc:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8002ae0:	487b      	ldr	r0, [pc, #492]	; (8002cd0 <HAL_RCC_ClockConfig+0x218>)
 8002ae2:	f7fe fbf8 	bl	80012d6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d019      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x68>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d016      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x68>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d013      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x68>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	d010      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x68>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d00d      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x68>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	2b05      	cmp	r3, #5
 8002b08:	d00a      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x68>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b06      	cmp	r3, #6
 8002b0e:	d007      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x68>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2b07      	cmp	r3, #7
 8002b14:	d004      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x68>
 8002b16:	f240 215d 	movw	r1, #605	; 0x25d
 8002b1a:	486d      	ldr	r0, [pc, #436]	; (8002cd0 <HAL_RCC_ClockConfig+0x218>)
 8002b1c:	f7fe fbdb 	bl	80012d6 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b20:	4b6c      	ldr	r3, [pc, #432]	; (8002cd4 <HAL_RCC_ClockConfig+0x21c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d90c      	bls.n	8002b48 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2e:	4b69      	ldr	r3, [pc, #420]	; (8002cd4 <HAL_RCC_ClockConfig+0x21c>)
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b36:	4b67      	ldr	r3, [pc, #412]	; (8002cd4 <HAL_RCC_ClockConfig+0x21c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e136      	b.n	8002db6 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d049      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b60:	4b5d      	ldr	r3, [pc, #372]	; (8002cd8 <HAL_RCC_ClockConfig+0x220>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4a5c      	ldr	r2, [pc, #368]	; (8002cd8 <HAL_RCC_ClockConfig+0x220>)
 8002b66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b78:	4b57      	ldr	r3, [pc, #348]	; (8002cd8 <HAL_RCC_ClockConfig+0x220>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4a56      	ldr	r2, [pc, #344]	; (8002cd8 <HAL_RCC_ClockConfig+0x220>)
 8002b7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d024      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x11e>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b80      	cmp	r3, #128	; 0x80
 8002b92:	d020      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x11e>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b90      	cmp	r3, #144	; 0x90
 8002b9a:	d01c      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x11e>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2ba0      	cmp	r3, #160	; 0xa0
 8002ba2:	d018      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x11e>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2bb0      	cmp	r3, #176	; 0xb0
 8002baa:	d014      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x11e>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2bc0      	cmp	r3, #192	; 0xc0
 8002bb2:	d010      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x11e>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2bd0      	cmp	r3, #208	; 0xd0
 8002bba:	d00c      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x11e>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2be0      	cmp	r3, #224	; 0xe0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x11e>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2bf0      	cmp	r3, #240	; 0xf0
 8002bca:	d004      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x11e>
 8002bcc:	f44f 7120 	mov.w	r1, #640	; 0x280
 8002bd0:	483f      	ldr	r0, [pc, #252]	; (8002cd0 <HAL_RCC_ClockConfig+0x218>)
 8002bd2:	f7fe fb80 	bl	80012d6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd6:	4b40      	ldr	r3, [pc, #256]	; (8002cd8 <HAL_RCC_ClockConfig+0x220>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	493d      	ldr	r1, [pc, #244]	; (8002cd8 <HAL_RCC_ClockConfig+0x220>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d059      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d010      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x166>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d00c      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x166>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d008      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x166>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d004      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x166>
 8002c14:	f240 2187 	movw	r1, #647	; 0x287
 8002c18:	482d      	ldr	r0, [pc, #180]	; (8002cd0 <HAL_RCC_ClockConfig+0x218>)
 8002c1a:	f7fe fb5c 	bl	80012d6 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d107      	bne.n	8002c36 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c26:	4b2c      	ldr	r3, [pc, #176]	; (8002cd8 <HAL_RCC_ClockConfig+0x220>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d119      	bne.n	8002c66 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e0bf      	b.n	8002db6 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d003      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	d107      	bne.n	8002c56 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c46:	4b24      	ldr	r3, [pc, #144]	; (8002cd8 <HAL_RCC_ClockConfig+0x220>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d109      	bne.n	8002c66 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e0af      	b.n	8002db6 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c56:	4b20      	ldr	r3, [pc, #128]	; (8002cd8 <HAL_RCC_ClockConfig+0x220>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e0a7      	b.n	8002db6 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c66:	4b1c      	ldr	r3, [pc, #112]	; (8002cd8 <HAL_RCC_ClockConfig+0x220>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f023 0203 	bic.w	r2, r3, #3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	4919      	ldr	r1, [pc, #100]	; (8002cd8 <HAL_RCC_ClockConfig+0x220>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c78:	f7fe fd88 	bl	800178c <HAL_GetTick>
 8002c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7e:	e00a      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c80:	f7fe fd84 	bl	800178c <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e08f      	b.n	8002db6 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c96:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <HAL_RCC_ClockConfig+0x220>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 020c 	and.w	r2, r3, #12
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d1eb      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ca8:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <HAL_RCC_ClockConfig+0x21c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d212      	bcs.n	8002cdc <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb6:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <HAL_RCC_ClockConfig+0x21c>)
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cbe:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <HAL_RCC_ClockConfig+0x21c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d007      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e072      	b.n	8002db6 <HAL_RCC_ClockConfig+0x2fe>
 8002cd0:	0800d7a4 	.word	0x0800d7a4
 8002cd4:	40023c00 	.word	0x40023c00
 8002cd8:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d025      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d018      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x26a>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf8:	d013      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x26a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d02:	d00e      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x26a>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002d0c:	d009      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x26a>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002d16:	d004      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x26a>
 8002d18:	f240 21c5 	movw	r1, #709	; 0x2c5
 8002d1c:	4828      	ldr	r0, [pc, #160]	; (8002dc0 <HAL_RCC_ClockConfig+0x308>)
 8002d1e:	f7fe fada 	bl	80012d6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d22:	4b28      	ldr	r3, [pc, #160]	; (8002dc4 <HAL_RCC_ClockConfig+0x30c>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	4925      	ldr	r1, [pc, #148]	; (8002dc4 <HAL_RCC_ClockConfig+0x30c>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d026      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d018      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x2c2>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d50:	d013      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x2c2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d5a:	d00e      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x2c2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002d64:	d009      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x2c2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002d6e:	d004      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x2c2>
 8002d70:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8002d74:	4812      	ldr	r0, [pc, #72]	; (8002dc0 <HAL_RCC_ClockConfig+0x308>)
 8002d76:	f7fe faae 	bl	80012d6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d7a:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <HAL_RCC_ClockConfig+0x30c>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	490e      	ldr	r1, [pc, #56]	; (8002dc4 <HAL_RCC_ClockConfig+0x30c>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d8e:	f000 f821 	bl	8002dd4 <HAL_RCC_GetSysClockFreq>
 8002d92:	4602      	mov	r2, r0
 8002d94:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_RCC_ClockConfig+0x30c>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	091b      	lsrs	r3, r3, #4
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	490a      	ldr	r1, [pc, #40]	; (8002dc8 <HAL_RCC_ClockConfig+0x310>)
 8002da0:	5ccb      	ldrb	r3, [r1, r3]
 8002da2:	fa22 f303 	lsr.w	r3, r2, r3
 8002da6:	4a09      	ldr	r2, [pc, #36]	; (8002dcc <HAL_RCC_ClockConfig+0x314>)
 8002da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002daa:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <HAL_RCC_ClockConfig+0x318>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe fb46 	bl	8001440 <HAL_InitTick>

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	0800d7a4 	.word	0x0800d7a4
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	0800d9dc 	.word	0x0800d9dc
 8002dcc:	20000000 	.word	0x20000000
 8002dd0:	20000004 	.word	0x20000004

08002dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	607b      	str	r3, [r7, #4]
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	2300      	movs	r3, #0
 8002de6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dec:	4b67      	ldr	r3, [pc, #412]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 030c 	and.w	r3, r3, #12
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d00d      	beq.n	8002e14 <HAL_RCC_GetSysClockFreq+0x40>
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	f200 80bd 	bhi.w	8002f78 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <HAL_RCC_GetSysClockFreq+0x34>
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d003      	beq.n	8002e0e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e06:	e0b7      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e08:	4b61      	ldr	r3, [pc, #388]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e0a:	60bb      	str	r3, [r7, #8]
       break;
 8002e0c:	e0b7      	b.n	8002f7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e0e:	4b61      	ldr	r3, [pc, #388]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002e10:	60bb      	str	r3, [r7, #8]
      break;
 8002e12:	e0b4      	b.n	8002f7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e14:	4b5d      	ldr	r3, [pc, #372]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e1e:	4b5b      	ldr	r3, [pc, #364]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d04d      	beq.n	8002ec6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e2a:	4b58      	ldr	r3, [pc, #352]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	099b      	lsrs	r3, r3, #6
 8002e30:	461a      	mov	r2, r3
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e3a:	f04f 0100 	mov.w	r1, #0
 8002e3e:	ea02 0800 	and.w	r8, r2, r0
 8002e42:	ea03 0901 	and.w	r9, r3, r1
 8002e46:	4640      	mov	r0, r8
 8002e48:	4649      	mov	r1, r9
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	014b      	lsls	r3, r1, #5
 8002e54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e58:	0142      	lsls	r2, r0, #5
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	ebb0 0008 	subs.w	r0, r0, r8
 8002e62:	eb61 0109 	sbc.w	r1, r1, r9
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	018b      	lsls	r3, r1, #6
 8002e70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e74:	0182      	lsls	r2, r0, #6
 8002e76:	1a12      	subs	r2, r2, r0
 8002e78:	eb63 0301 	sbc.w	r3, r3, r1
 8002e7c:	f04f 0000 	mov.w	r0, #0
 8002e80:	f04f 0100 	mov.w	r1, #0
 8002e84:	00d9      	lsls	r1, r3, #3
 8002e86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e8a:	00d0      	lsls	r0, r2, #3
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	eb12 0208 	adds.w	r2, r2, r8
 8002e94:	eb43 0309 	adc.w	r3, r3, r9
 8002e98:	f04f 0000 	mov.w	r0, #0
 8002e9c:	f04f 0100 	mov.w	r1, #0
 8002ea0:	0259      	lsls	r1, r3, #9
 8002ea2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002ea6:	0250      	lsls	r0, r2, #9
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4610      	mov	r0, r2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	f7fd f9fa 	bl	80002b0 <__aeabi_uldivmod>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	e04a      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec6:	4b31      	ldr	r3, [pc, #196]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	099b      	lsrs	r3, r3, #6
 8002ecc:	461a      	mov	r2, r3
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ed6:	f04f 0100 	mov.w	r1, #0
 8002eda:	ea02 0400 	and.w	r4, r2, r0
 8002ede:	ea03 0501 	and.w	r5, r3, r1
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	4629      	mov	r1, r5
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	014b      	lsls	r3, r1, #5
 8002ef0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ef4:	0142      	lsls	r2, r0, #5
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	4619      	mov	r1, r3
 8002efa:	1b00      	subs	r0, r0, r4
 8002efc:	eb61 0105 	sbc.w	r1, r1, r5
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	018b      	lsls	r3, r1, #6
 8002f0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f0e:	0182      	lsls	r2, r0, #6
 8002f10:	1a12      	subs	r2, r2, r0
 8002f12:	eb63 0301 	sbc.w	r3, r3, r1
 8002f16:	f04f 0000 	mov.w	r0, #0
 8002f1a:	f04f 0100 	mov.w	r1, #0
 8002f1e:	00d9      	lsls	r1, r3, #3
 8002f20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f24:	00d0      	lsls	r0, r2, #3
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	1912      	adds	r2, r2, r4
 8002f2c:	eb45 0303 	adc.w	r3, r5, r3
 8002f30:	f04f 0000 	mov.w	r0, #0
 8002f34:	f04f 0100 	mov.w	r1, #0
 8002f38:	0299      	lsls	r1, r3, #10
 8002f3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f3e:	0290      	lsls	r0, r2, #10
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4610      	mov	r0, r2
 8002f46:	4619      	mov	r1, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	f7fd f9ae 	bl	80002b0 <__aeabi_uldivmod>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4613      	mov	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	0c1b      	lsrs	r3, r3, #16
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	3301      	adds	r3, #1
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f74:	60bb      	str	r3, [r7, #8]
      break;
 8002f76:	e002      	b.n	8002f7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f78:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f7a:	60bb      	str	r3, [r7, #8]
      break;
 8002f7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	00f42400 	.word	0x00f42400
 8002f94:	007a1200 	.word	0x007a1200

08002f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f9c:	4b03      	ldr	r3, [pc, #12]	; (8002fac <HAL_RCC_GetHCLKFreq+0x14>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	20000000 	.word	0x20000000

08002fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fb4:	f7ff fff0 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	0a9b      	lsrs	r3, r3, #10
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	4903      	ldr	r1, [pc, #12]	; (8002fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fc6:	5ccb      	ldrb	r3, [r1, r3]
 8002fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	0800d9ec 	.word	0x0800d9ec

08002fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fdc:	f7ff ffdc 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	0b5b      	lsrs	r3, r3, #13
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	4903      	ldr	r1, [pc, #12]	; (8002ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fee:	5ccb      	ldrb	r3, [r1, r3]
 8002ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	0800d9ec 	.word	0x0800d9ec

08003000 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	220f      	movs	r2, #15
 800300e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003010:	4b12      	ldr	r3, [pc, #72]	; (800305c <HAL_RCC_GetClockConfig+0x5c>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 0203 	and.w	r2, r3, #3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800301c:	4b0f      	ldr	r3, [pc, #60]	; (800305c <HAL_RCC_GetClockConfig+0x5c>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <HAL_RCC_GetClockConfig+0x5c>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003034:	4b09      	ldr	r3, [pc, #36]	; (800305c <HAL_RCC_GetClockConfig+0x5c>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	08db      	lsrs	r3, r3, #3
 800303a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003042:	4b07      	ldr	r3, [pc, #28]	; (8003060 <HAL_RCC_GetClockConfig+0x60>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0207 	and.w	r2, r3, #7
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	601a      	str	r2, [r3, #0]
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40023800 	.word	0x40023800
 8003060:	40023c00 	.word	0x40023c00

08003064 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e18c      	b.n	8003390 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a75      	ldr	r2, [pc, #468]	; (8003250 <HAL_SPI_Init+0x1ec>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d018      	beq.n	80030b2 <HAL_SPI_Init+0x4e>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a73      	ldr	r2, [pc, #460]	; (8003254 <HAL_SPI_Init+0x1f0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d013      	beq.n	80030b2 <HAL_SPI_Init+0x4e>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a72      	ldr	r2, [pc, #456]	; (8003258 <HAL_SPI_Init+0x1f4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d00e      	beq.n	80030b2 <HAL_SPI_Init+0x4e>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a70      	ldr	r2, [pc, #448]	; (800325c <HAL_SPI_Init+0x1f8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d009      	beq.n	80030b2 <HAL_SPI_Init+0x4e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a6f      	ldr	r2, [pc, #444]	; (8003260 <HAL_SPI_Init+0x1fc>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d004      	beq.n	80030b2 <HAL_SPI_Init+0x4e>
 80030a8:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80030ac:	486d      	ldr	r0, [pc, #436]	; (8003264 <HAL_SPI_Init+0x200>)
 80030ae:	f7fe f912 	bl	80012d6 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d009      	beq.n	80030ce <HAL_SPI_Init+0x6a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030c2:	d004      	beq.n	80030ce <HAL_SPI_Init+0x6a>
 80030c4:	f240 1143 	movw	r1, #323	; 0x143
 80030c8:	4866      	ldr	r0, [pc, #408]	; (8003264 <HAL_SPI_Init+0x200>)
 80030ca:	f7fe f904 	bl	80012d6 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00e      	beq.n	80030f4 <HAL_SPI_Init+0x90>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030de:	d009      	beq.n	80030f4 <HAL_SPI_Init+0x90>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030e8:	d004      	beq.n	80030f4 <HAL_SPI_Init+0x90>
 80030ea:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80030ee:	485d      	ldr	r0, [pc, #372]	; (8003264 <HAL_SPI_Init+0x200>)
 80030f0:	f7fe f8f1 	bl	80012d6 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030fc:	d008      	beq.n	8003110 <HAL_SPI_Init+0xac>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d004      	beq.n	8003110 <HAL_SPI_Init+0xac>
 8003106:	f240 1145 	movw	r1, #325	; 0x145
 800310a:	4856      	ldr	r0, [pc, #344]	; (8003264 <HAL_SPI_Init+0x200>)
 800310c:	f7fe f8e3 	bl	80012d6 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003118:	d00d      	beq.n	8003136 <HAL_SPI_Init+0xd2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <HAL_SPI_Init+0xd2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800312a:	d004      	beq.n	8003136 <HAL_SPI_Init+0xd2>
 800312c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8003130:	484c      	ldr	r0, [pc, #304]	; (8003264 <HAL_SPI_Init+0x200>)
 8003132:	f7fe f8d0 	bl	80012d6 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d020      	beq.n	8003180 <HAL_SPI_Init+0x11c>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	2b08      	cmp	r3, #8
 8003144:	d01c      	beq.n	8003180 <HAL_SPI_Init+0x11c>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	2b10      	cmp	r3, #16
 800314c:	d018      	beq.n	8003180 <HAL_SPI_Init+0x11c>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	2b18      	cmp	r3, #24
 8003154:	d014      	beq.n	8003180 <HAL_SPI_Init+0x11c>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	2b20      	cmp	r3, #32
 800315c:	d010      	beq.n	8003180 <HAL_SPI_Init+0x11c>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	2b28      	cmp	r3, #40	; 0x28
 8003164:	d00c      	beq.n	8003180 <HAL_SPI_Init+0x11c>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	2b30      	cmp	r3, #48	; 0x30
 800316c:	d008      	beq.n	8003180 <HAL_SPI_Init+0x11c>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	2b38      	cmp	r3, #56	; 0x38
 8003174:	d004      	beq.n	8003180 <HAL_SPI_Init+0x11c>
 8003176:	f240 1147 	movw	r1, #327	; 0x147
 800317a:	483a      	ldr	r0, [pc, #232]	; (8003264 <HAL_SPI_Init+0x200>)
 800317c:	f7fe f8ab 	bl	80012d6 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_SPI_Init+0x136>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	2b80      	cmp	r3, #128	; 0x80
 800318e:	d004      	beq.n	800319a <HAL_SPI_Init+0x136>
 8003190:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003194:	4833      	ldr	r0, [pc, #204]	; (8003264 <HAL_SPI_Init+0x200>)
 8003196:	f7fe f89e 	bl	80012d6 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d008      	beq.n	80031b4 <HAL_SPI_Init+0x150>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	2b10      	cmp	r3, #16
 80031a8:	d004      	beq.n	80031b4 <HAL_SPI_Init+0x150>
 80031aa:	f240 1149 	movw	r1, #329	; 0x149
 80031ae:	482d      	ldr	r0, [pc, #180]	; (8003264 <HAL_SPI_Init+0x200>)
 80031b0:	f7fe f891 	bl	80012d6 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d155      	bne.n	8003268 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_SPI_Init+0x172>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d004      	beq.n	80031d6 <HAL_SPI_Init+0x172>
 80031cc:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80031d0:	4824      	ldr	r0, [pc, #144]	; (8003264 <HAL_SPI_Init+0x200>)
 80031d2:	f7fe f880 	bl	80012d6 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d008      	beq.n	80031f0 <HAL_SPI_Init+0x18c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d004      	beq.n	80031f0 <HAL_SPI_Init+0x18c>
 80031e6:	f240 114d 	movw	r1, #333	; 0x14d
 80031ea:	481e      	ldr	r0, [pc, #120]	; (8003264 <HAL_SPI_Init+0x200>)
 80031ec:	f7fe f873 	bl	80012d6 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031f8:	d125      	bne.n	8003246 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d05d      	beq.n	80032be <HAL_SPI_Init+0x25a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	2b08      	cmp	r3, #8
 8003208:	d059      	beq.n	80032be <HAL_SPI_Init+0x25a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	2b10      	cmp	r3, #16
 8003210:	d055      	beq.n	80032be <HAL_SPI_Init+0x25a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	2b18      	cmp	r3, #24
 8003218:	d051      	beq.n	80032be <HAL_SPI_Init+0x25a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	2b20      	cmp	r3, #32
 8003220:	d04d      	beq.n	80032be <HAL_SPI_Init+0x25a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	2b28      	cmp	r3, #40	; 0x28
 8003228:	d049      	beq.n	80032be <HAL_SPI_Init+0x25a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	2b30      	cmp	r3, #48	; 0x30
 8003230:	d045      	beq.n	80032be <HAL_SPI_Init+0x25a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	2b38      	cmp	r3, #56	; 0x38
 8003238:	d041      	beq.n	80032be <HAL_SPI_Init+0x25a>
 800323a:	f240 1151 	movw	r1, #337	; 0x151
 800323e:	4809      	ldr	r0, [pc, #36]	; (8003264 <HAL_SPI_Init+0x200>)
 8003240:	f7fe f849 	bl	80012d6 <assert_failed>
 8003244:	e03b      	b.n	80032be <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	61da      	str	r2, [r3, #28]
 800324c:	e037      	b.n	80032be <HAL_SPI_Init+0x25a>
 800324e:	bf00      	nop
 8003250:	40013000 	.word	0x40013000
 8003254:	40003800 	.word	0x40003800
 8003258:	40003c00 	.word	0x40003c00
 800325c:	40013400 	.word	0x40013400
 8003260:	40015000 	.word	0x40015000
 8003264:	0800d7dc 	.word	0x0800d7dc
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d020      	beq.n	80032b2 <HAL_SPI_Init+0x24e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	2b08      	cmp	r3, #8
 8003276:	d01c      	beq.n	80032b2 <HAL_SPI_Init+0x24e>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	2b10      	cmp	r3, #16
 800327e:	d018      	beq.n	80032b2 <HAL_SPI_Init+0x24e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	2b18      	cmp	r3, #24
 8003286:	d014      	beq.n	80032b2 <HAL_SPI_Init+0x24e>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	2b20      	cmp	r3, #32
 800328e:	d010      	beq.n	80032b2 <HAL_SPI_Init+0x24e>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	2b28      	cmp	r3, #40	; 0x28
 8003296:	d00c      	beq.n	80032b2 <HAL_SPI_Init+0x24e>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	2b30      	cmp	r3, #48	; 0x30
 800329e:	d008      	beq.n	80032b2 <HAL_SPI_Init+0x24e>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	2b38      	cmp	r3, #56	; 0x38
 80032a6:	d004      	beq.n	80032b2 <HAL_SPI_Init+0x24e>
 80032a8:	f240 115b 	movw	r1, #347	; 0x15b
 80032ac:	483a      	ldr	r0, [pc, #232]	; (8003398 <HAL_SPI_Init+0x334>)
 80032ae:	f7fe f812 	bl	80012d6 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d106      	bne.n	80032de <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7fe f83d 	bl	8001358 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2202      	movs	r2, #2
 80032e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032f4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003338:	431a      	orrs	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003342:	ea42 0103 	orr.w	r1, r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	0c1b      	lsrs	r3, r3, #16
 800335c:	f003 0104 	and.w	r1, r3, #4
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	f003 0210 	and.w	r2, r3, #16
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	69da      	ldr	r2, [r3, #28]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800337e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	0800d7dc 	.word	0x0800d7dc

0800339c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08c      	sub	sp, #48	; 0x30
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
 80033a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80033aa:	2301      	movs	r3, #1
 80033ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d004      	beq.n	80033c6 <HAL_SPI_TransmitReceive+0x2a>
 80033bc:	f240 417e 	movw	r1, #1150	; 0x47e
 80033c0:	4884      	ldr	r0, [pc, #528]	; (80035d4 <HAL_SPI_TransmitReceive+0x238>)
 80033c2:	f7fd ff88 	bl	80012d6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_SPI_TransmitReceive+0x38>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e18d      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x354>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033dc:	f7fe f9d6 	bl	800178c <HAL_GetTick>
 80033e0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80033f2:	887b      	ldrh	r3, [r7, #2]
 80033f4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80033f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d00f      	beq.n	800341e <HAL_SPI_TransmitReceive+0x82>
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003404:	d107      	bne.n	8003416 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d103      	bne.n	8003416 <HAL_SPI_TransmitReceive+0x7a>
 800340e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003412:	2b04      	cmp	r3, #4
 8003414:	d003      	beq.n	800341e <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8003416:	2302      	movs	r3, #2
 8003418:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800341c:	e15e      	b.n	80036dc <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <HAL_SPI_TransmitReceive+0x94>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <HAL_SPI_TransmitReceive+0x94>
 800342a:	887b      	ldrh	r3, [r7, #2]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d103      	bne.n	8003438 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003436:	e151      	b.n	80036dc <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b04      	cmp	r3, #4
 8003442:	d003      	beq.n	800344c <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2205      	movs	r2, #5
 8003448:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	887a      	ldrh	r2, [r7, #2]
 800345c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	887a      	ldrh	r2, [r7, #2]
 8003462:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	887a      	ldrh	r2, [r7, #2]
 800346e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	887a      	ldrh	r2, [r7, #2]
 8003474:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348c:	2b40      	cmp	r3, #64	; 0x40
 800348e:	d007      	beq.n	80034a0 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800349e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034a8:	d178      	bne.n	800359c <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <HAL_SPI_TransmitReceive+0x11c>
 80034b2:	8b7b      	ldrh	r3, [r7, #26]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d166      	bne.n	8003586 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034bc:	881a      	ldrh	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	1c9a      	adds	r2, r3, #2
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034dc:	e053      	b.n	8003586 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d11b      	bne.n	8003524 <HAL_SPI_TransmitReceive+0x188>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d016      	beq.n	8003524 <HAL_SPI_TransmitReceive+0x188>
 80034f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d113      	bne.n	8003524 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003500:	881a      	ldrh	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350c:	1c9a      	adds	r2, r3, #2
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003516:	b29b      	uxth	r3, r3
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b01      	cmp	r3, #1
 8003530:	d119      	bne.n	8003566 <HAL_SPI_TransmitReceive+0x1ca>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003536:	b29b      	uxth	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d014      	beq.n	8003566 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003546:	b292      	uxth	r2, r2
 8003548:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354e:	1c9a      	adds	r2, r3, #2
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003558:	b29b      	uxth	r3, r3
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003562:	2301      	movs	r3, #1
 8003564:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003566:	f7fe f911 	bl	800178c <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003572:	429a      	cmp	r2, r3
 8003574:	d807      	bhi.n	8003586 <HAL_SPI_TransmitReceive+0x1ea>
 8003576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800357c:	d003      	beq.n	8003586 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003584:	e0aa      	b.n	80036dc <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1a6      	bne.n	80034de <HAL_SPI_TransmitReceive+0x142>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1a1      	bne.n	80034de <HAL_SPI_TransmitReceive+0x142>
 800359a:	e07f      	b.n	800369c <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <HAL_SPI_TransmitReceive+0x20e>
 80035a4:	8b7b      	ldrh	r3, [r7, #26]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d16e      	bne.n	8003688 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	330c      	adds	r3, #12
 80035b4:	7812      	ldrb	r2, [r2, #0]
 80035b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035d0:	e05a      	b.n	8003688 <HAL_SPI_TransmitReceive+0x2ec>
 80035d2:	bf00      	nop
 80035d4:	0800d7dc 	.word	0x0800d7dc
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d11c      	bne.n	8003620 <HAL_SPI_TransmitReceive+0x284>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d017      	beq.n	8003620 <HAL_SPI_TransmitReceive+0x284>
 80035f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d114      	bne.n	8003620 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	330c      	adds	r3, #12
 8003600:	7812      	ldrb	r2, [r2, #0]
 8003602:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003612:	b29b      	uxth	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b01      	cmp	r3, #1
 800362c:	d119      	bne.n	8003662 <HAL_SPI_TransmitReceive+0x2c6>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d014      	beq.n	8003662 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800365e:	2301      	movs	r3, #1
 8003660:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003662:	f7fe f893 	bl	800178c <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800366e:	429a      	cmp	r2, r3
 8003670:	d803      	bhi.n	800367a <HAL_SPI_TransmitReceive+0x2de>
 8003672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003678:	d102      	bne.n	8003680 <HAL_SPI_TransmitReceive+0x2e4>
 800367a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367c:	2b00      	cmp	r3, #0
 800367e:	d103      	bne.n	8003688 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003686:	e029      	b.n	80036dc <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1a2      	bne.n	80035d8 <HAL_SPI_TransmitReceive+0x23c>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003696:	b29b      	uxth	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d19d      	bne.n	80035d8 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800369c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f8b1 	bl	8003808 <SPI_EndRxTxTransaction>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d006      	beq.n	80036ba <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2220      	movs	r2, #32
 80036b6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80036b8:	e010      	b.n	80036dc <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10b      	bne.n	80036da <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	617b      	str	r3, [r7, #20]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	e000      	b.n	80036dc <HAL_SPI_TransmitReceive+0x340>
  }

error :
 80036da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3730      	adds	r7, #48	; 0x30
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	603b      	str	r3, [r7, #0]
 8003704:	4613      	mov	r3, r2
 8003706:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003708:	f7fe f840 	bl	800178c <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003710:	1a9b      	subs	r3, r3, r2
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	4413      	add	r3, r2
 8003716:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003718:	f7fe f838 	bl	800178c <HAL_GetTick>
 800371c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800371e:	4b39      	ldr	r3, [pc, #228]	; (8003804 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	015b      	lsls	r3, r3, #5
 8003724:	0d1b      	lsrs	r3, r3, #20
 8003726:	69fa      	ldr	r2, [r7, #28]
 8003728:	fb02 f303 	mul.w	r3, r2, r3
 800372c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800372e:	e054      	b.n	80037da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003736:	d050      	beq.n	80037da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003738:	f7fe f828 	bl	800178c <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	69fa      	ldr	r2, [r7, #28]
 8003744:	429a      	cmp	r2, r3
 8003746:	d902      	bls.n	800374e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d13d      	bne.n	80037ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800375c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003766:	d111      	bne.n	800378c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003770:	d004      	beq.n	800377c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800377a:	d107      	bne.n	800378c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800378a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003794:	d10f      	bne.n	80037b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e017      	b.n	80037fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	4013      	ands	r3, r2
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	bf0c      	ite	eq
 80037ea:	2301      	moveq	r3, #1
 80037ec:	2300      	movne	r3, #0
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	461a      	mov	r2, r3
 80037f2:	79fb      	ldrb	r3, [r7, #7]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d19b      	bne.n	8003730 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3720      	adds	r7, #32
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	20000000 	.word	0x20000000

08003808 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af02      	add	r7, sp, #8
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003814:	4b1b      	ldr	r3, [pc, #108]	; (8003884 <SPI_EndRxTxTransaction+0x7c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1b      	ldr	r2, [pc, #108]	; (8003888 <SPI_EndRxTxTransaction+0x80>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	0d5b      	lsrs	r3, r3, #21
 8003820:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003824:	fb02 f303 	mul.w	r3, r2, r3
 8003828:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003832:	d112      	bne.n	800385a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2200      	movs	r2, #0
 800383c:	2180      	movs	r1, #128	; 0x80
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f7ff ff5a 	bl	80036f8 <SPI_WaitFlagStateUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d016      	beq.n	8003878 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	f043 0220 	orr.w	r2, r3, #32
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e00f      	b.n	800387a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	3b01      	subs	r3, #1
 8003864:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003870:	2b80      	cmp	r3, #128	; 0x80
 8003872:	d0f2      	beq.n	800385a <SPI_EndRxTxTransaction+0x52>
 8003874:	e000      	b.n	8003878 <SPI_EndRxTxTransaction+0x70>
        break;
 8003876:	bf00      	nop
  }

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20000000 	.word	0x20000000
 8003888:	165e9f81 	.word	0x165e9f81

0800388c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e0a7      	b.n	80039ee <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a55      	ldr	r2, [pc, #340]	; (80039f8 <HAL_TIM_Base_Init+0x16c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d027      	beq.n	80038f8 <HAL_TIM_Base_Init+0x6c>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b0:	d022      	beq.n	80038f8 <HAL_TIM_Base_Init+0x6c>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a51      	ldr	r2, [pc, #324]	; (80039fc <HAL_TIM_Base_Init+0x170>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d01d      	beq.n	80038f8 <HAL_TIM_Base_Init+0x6c>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a4f      	ldr	r2, [pc, #316]	; (8003a00 <HAL_TIM_Base_Init+0x174>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d018      	beq.n	80038f8 <HAL_TIM_Base_Init+0x6c>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a4e      	ldr	r2, [pc, #312]	; (8003a04 <HAL_TIM_Base_Init+0x178>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d013      	beq.n	80038f8 <HAL_TIM_Base_Init+0x6c>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a4c      	ldr	r2, [pc, #304]	; (8003a08 <HAL_TIM_Base_Init+0x17c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00e      	beq.n	80038f8 <HAL_TIM_Base_Init+0x6c>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a4b      	ldr	r2, [pc, #300]	; (8003a0c <HAL_TIM_Base_Init+0x180>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d009      	beq.n	80038f8 <HAL_TIM_Base_Init+0x6c>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a49      	ldr	r2, [pc, #292]	; (8003a10 <HAL_TIM_Base_Init+0x184>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d004      	beq.n	80038f8 <HAL_TIM_Base_Init+0x6c>
 80038ee:	f240 1113 	movw	r1, #275	; 0x113
 80038f2:	4848      	ldr	r0, [pc, #288]	; (8003a14 <HAL_TIM_Base_Init+0x188>)
 80038f4:	f7fd fcef 	bl	80012d6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d014      	beq.n	800392a <HAL_TIM_Base_Init+0x9e>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2b10      	cmp	r3, #16
 8003906:	d010      	beq.n	800392a <HAL_TIM_Base_Init+0x9e>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b20      	cmp	r3, #32
 800390e:	d00c      	beq.n	800392a <HAL_TIM_Base_Init+0x9e>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	2b40      	cmp	r3, #64	; 0x40
 8003916:	d008      	beq.n	800392a <HAL_TIM_Base_Init+0x9e>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b60      	cmp	r3, #96	; 0x60
 800391e:	d004      	beq.n	800392a <HAL_TIM_Base_Init+0x9e>
 8003920:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003924:	483b      	ldr	r0, [pc, #236]	; (8003a14 <HAL_TIM_Base_Init+0x188>)
 8003926:	f7fd fcd6 	bl	80012d6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00e      	beq.n	8003950 <HAL_TIM_Base_Init+0xc4>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800393a:	d009      	beq.n	8003950 <HAL_TIM_Base_Init+0xc4>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003944:	d004      	beq.n	8003950 <HAL_TIM_Base_Init+0xc4>
 8003946:	f240 1115 	movw	r1, #277	; 0x115
 800394a:	4832      	ldr	r0, [pc, #200]	; (8003a14 <HAL_TIM_Base_Init+0x188>)
 800394c:	f7fd fcc3 	bl	80012d6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_TIM_Base_Init+0xde>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	2b80      	cmp	r3, #128	; 0x80
 800395e:	d004      	beq.n	800396a <HAL_TIM_Base_Init+0xde>
 8003960:	f44f 718b 	mov.w	r1, #278	; 0x116
 8003964:	482b      	ldr	r0, [pc, #172]	; (8003a14 <HAL_TIM_Base_Init+0x188>)
 8003966:	f7fd fcb6 	bl	80012d6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f84a 	bl	8003a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3304      	adds	r3, #4
 8003994:	4619      	mov	r1, r3
 8003996:	4610      	mov	r0, r2
 8003998:	f000 fa0a 	bl	8003db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40010000 	.word	0x40010000
 80039fc:	40000400 	.word	0x40000400
 8003a00:	40000800 	.word	0x40000800
 8003a04:	40000c00 	.word	0x40000c00
 8003a08:	40014000 	.word	0x40014000
 8003a0c:	40014400 	.word	0x40014400
 8003a10:	40014800 	.word	0x40014800
 8003a14:	0800d814 	.word	0x0800d814

08003a18 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a3d      	ldr	r2, [pc, #244]	; (8003b30 <HAL_TIM_Base_Start_IT+0x104>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d027      	beq.n	8003a8e <HAL_TIM_Base_Start_IT+0x62>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a46:	d022      	beq.n	8003a8e <HAL_TIM_Base_Start_IT+0x62>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a39      	ldr	r2, [pc, #228]	; (8003b34 <HAL_TIM_Base_Start_IT+0x108>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01d      	beq.n	8003a8e <HAL_TIM_Base_Start_IT+0x62>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a38      	ldr	r2, [pc, #224]	; (8003b38 <HAL_TIM_Base_Start_IT+0x10c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d018      	beq.n	8003a8e <HAL_TIM_Base_Start_IT+0x62>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a36      	ldr	r2, [pc, #216]	; (8003b3c <HAL_TIM_Base_Start_IT+0x110>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d013      	beq.n	8003a8e <HAL_TIM_Base_Start_IT+0x62>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a35      	ldr	r2, [pc, #212]	; (8003b40 <HAL_TIM_Base_Start_IT+0x114>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d00e      	beq.n	8003a8e <HAL_TIM_Base_Start_IT+0x62>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a33      	ldr	r2, [pc, #204]	; (8003b44 <HAL_TIM_Base_Start_IT+0x118>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d009      	beq.n	8003a8e <HAL_TIM_Base_Start_IT+0x62>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a32      	ldr	r2, [pc, #200]	; (8003b48 <HAL_TIM_Base_Start_IT+0x11c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d004      	beq.n	8003a8e <HAL_TIM_Base_Start_IT+0x62>
 8003a84:	f240 11cf 	movw	r1, #463	; 0x1cf
 8003a88:	4830      	ldr	r0, [pc, #192]	; (8003b4c <HAL_TIM_Base_Start_IT+0x120>)
 8003a8a:	f7fd fc24 	bl	80012d6 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d001      	beq.n	8003a9e <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e044      	b.n	8003b28 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f042 0201 	orr.w	r2, r2, #1
 8003ab4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a1d      	ldr	r2, [pc, #116]	; (8003b30 <HAL_TIM_Base_Start_IT+0x104>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d018      	beq.n	8003af2 <HAL_TIM_Base_Start_IT+0xc6>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac8:	d013      	beq.n	8003af2 <HAL_TIM_Base_Start_IT+0xc6>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a19      	ldr	r2, [pc, #100]	; (8003b34 <HAL_TIM_Base_Start_IT+0x108>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d00e      	beq.n	8003af2 <HAL_TIM_Base_Start_IT+0xc6>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a17      	ldr	r2, [pc, #92]	; (8003b38 <HAL_TIM_Base_Start_IT+0x10c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d009      	beq.n	8003af2 <HAL_TIM_Base_Start_IT+0xc6>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a16      	ldr	r2, [pc, #88]	; (8003b3c <HAL_TIM_Base_Start_IT+0x110>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d004      	beq.n	8003af2 <HAL_TIM_Base_Start_IT+0xc6>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a14      	ldr	r2, [pc, #80]	; (8003b40 <HAL_TIM_Base_Start_IT+0x114>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d111      	bne.n	8003b16 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b06      	cmp	r3, #6
 8003b02:	d010      	beq.n	8003b26 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b14:	e007      	b.n	8003b26 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 0201 	orr.w	r2, r2, #1
 8003b24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40010000 	.word	0x40010000
 8003b34:	40000400 	.word	0x40000400
 8003b38:	40000800 	.word	0x40000800
 8003b3c:	40000c00 	.word	0x40000c00
 8003b40:	40014000 	.word	0x40014000
 8003b44:	40014400 	.word	0x40014400
 8003b48:	40014800 	.word	0x40014800
 8003b4c:	0800d814 	.word	0x0800d814

08003b50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d122      	bne.n	8003bac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d11b      	bne.n	8003bac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f06f 0202 	mvn.w	r2, #2
 8003b7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f8ee 	bl	8003d74 <HAL_TIM_IC_CaptureCallback>
 8003b98:	e005      	b.n	8003ba6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f8e0 	bl	8003d60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f8f1 	bl	8003d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d122      	bne.n	8003c00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d11b      	bne.n	8003c00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f06f 0204 	mvn.w	r2, #4
 8003bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f8c4 	bl	8003d74 <HAL_TIM_IC_CaptureCallback>
 8003bec:	e005      	b.n	8003bfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f8b6 	bl	8003d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f8c7 	bl	8003d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d122      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d11b      	bne.n	8003c54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0208 	mvn.w	r2, #8
 8003c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2204      	movs	r2, #4
 8003c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f89a 	bl	8003d74 <HAL_TIM_IC_CaptureCallback>
 8003c40:	e005      	b.n	8003c4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f88c 	bl	8003d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f89d 	bl	8003d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	f003 0310 	and.w	r3, r3, #16
 8003c5e:	2b10      	cmp	r3, #16
 8003c60:	d122      	bne.n	8003ca8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b10      	cmp	r3, #16
 8003c6e:	d11b      	bne.n	8003ca8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f06f 0210 	mvn.w	r2, #16
 8003c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2208      	movs	r2, #8
 8003c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f870 	bl	8003d74 <HAL_TIM_IC_CaptureCallback>
 8003c94:	e005      	b.n	8003ca2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f862 	bl	8003d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f873 	bl	8003d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d10e      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d107      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f06f 0201 	mvn.w	r2, #1
 8003ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7fd faea 	bl	80012a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cde:	2b80      	cmp	r3, #128	; 0x80
 8003ce0:	d10e      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cec:	2b80      	cmp	r3, #128	; 0x80
 8003cee:	d107      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f8e2 	bl	8003ec4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0a:	2b40      	cmp	r3, #64	; 0x40
 8003d0c:	d10e      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d18:	2b40      	cmp	r3, #64	; 0x40
 8003d1a:	d107      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f838 	bl	8003d9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d10e      	bne.n	8003d58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	2b20      	cmp	r3, #32
 8003d46:	d107      	bne.n	8003d58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f06f 0220 	mvn.w	r2, #32
 8003d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f8ac 	bl	8003eb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d58:	bf00      	nop
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a34      	ldr	r2, [pc, #208]	; (8003e94 <TIM_Base_SetConfig+0xe4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00f      	beq.n	8003de8 <TIM_Base_SetConfig+0x38>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dce:	d00b      	beq.n	8003de8 <TIM_Base_SetConfig+0x38>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a31      	ldr	r2, [pc, #196]	; (8003e98 <TIM_Base_SetConfig+0xe8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d007      	beq.n	8003de8 <TIM_Base_SetConfig+0x38>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a30      	ldr	r2, [pc, #192]	; (8003e9c <TIM_Base_SetConfig+0xec>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d003      	beq.n	8003de8 <TIM_Base_SetConfig+0x38>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a2f      	ldr	r2, [pc, #188]	; (8003ea0 <TIM_Base_SetConfig+0xf0>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d108      	bne.n	8003dfa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a25      	ldr	r2, [pc, #148]	; (8003e94 <TIM_Base_SetConfig+0xe4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d01b      	beq.n	8003e3a <TIM_Base_SetConfig+0x8a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e08:	d017      	beq.n	8003e3a <TIM_Base_SetConfig+0x8a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a22      	ldr	r2, [pc, #136]	; (8003e98 <TIM_Base_SetConfig+0xe8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d013      	beq.n	8003e3a <TIM_Base_SetConfig+0x8a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a21      	ldr	r2, [pc, #132]	; (8003e9c <TIM_Base_SetConfig+0xec>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00f      	beq.n	8003e3a <TIM_Base_SetConfig+0x8a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a20      	ldr	r2, [pc, #128]	; (8003ea0 <TIM_Base_SetConfig+0xf0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00b      	beq.n	8003e3a <TIM_Base_SetConfig+0x8a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a1f      	ldr	r2, [pc, #124]	; (8003ea4 <TIM_Base_SetConfig+0xf4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d007      	beq.n	8003e3a <TIM_Base_SetConfig+0x8a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a1e      	ldr	r2, [pc, #120]	; (8003ea8 <TIM_Base_SetConfig+0xf8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d003      	beq.n	8003e3a <TIM_Base_SetConfig+0x8a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a1d      	ldr	r2, [pc, #116]	; (8003eac <TIM_Base_SetConfig+0xfc>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d108      	bne.n	8003e4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a08      	ldr	r2, [pc, #32]	; (8003e94 <TIM_Base_SetConfig+0xe4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d103      	bne.n	8003e80 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	691a      	ldr	r2, [r3, #16]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	615a      	str	r2, [r3, #20]
}
 8003e86:	bf00      	nop
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40010000 	.word	0x40010000
 8003e98:	40000400 	.word	0x40000400
 8003e9c:	40000800 	.word	0x40000800
 8003ea0:	40000c00 	.word	0x40000c00
 8003ea4:	40014000 	.word	0x40014000
 8003ea8:	40014400 	.word	0x40014400
 8003eac:	40014800 	.word	0x40014800

08003eb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e0a0      	b.n	800402c <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d02c      	beq.n	8003f4c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a4f      	ldr	r2, [pc, #316]	; (8004034 <HAL_UART_Init+0x15c>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00e      	beq.n	8003f1a <HAL_UART_Init+0x42>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a4d      	ldr	r2, [pc, #308]	; (8004038 <HAL_UART_Init+0x160>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d009      	beq.n	8003f1a <HAL_UART_Init+0x42>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a4c      	ldr	r2, [pc, #304]	; (800403c <HAL_UART_Init+0x164>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d004      	beq.n	8003f1a <HAL_UART_Init+0x42>
 8003f10:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8003f14:	484a      	ldr	r0, [pc, #296]	; (8004040 <HAL_UART_Init+0x168>)
 8003f16:	f7fd f9de 	bl	80012d6 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d028      	beq.n	8003f74 <HAL_UART_Init+0x9c>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f2a:	d023      	beq.n	8003f74 <HAL_UART_Init+0x9c>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f34:	d01e      	beq.n	8003f74 <HAL_UART_Init+0x9c>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f3e:	d019      	beq.n	8003f74 <HAL_UART_Init+0x9c>
 8003f40:	f240 1173 	movw	r1, #371	; 0x173
 8003f44:	483e      	ldr	r0, [pc, #248]	; (8004040 <HAL_UART_Init+0x168>)
 8003f46:	f7fd f9c6 	bl	80012d6 <assert_failed>
 8003f4a:	e013      	b.n	8003f74 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a38      	ldr	r2, [pc, #224]	; (8004034 <HAL_UART_Init+0x15c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00e      	beq.n	8003f74 <HAL_UART_Init+0x9c>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a37      	ldr	r2, [pc, #220]	; (8004038 <HAL_UART_Init+0x160>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d009      	beq.n	8003f74 <HAL_UART_Init+0x9c>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a35      	ldr	r2, [pc, #212]	; (800403c <HAL_UART_Init+0x164>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d004      	beq.n	8003f74 <HAL_UART_Init+0x9c>
 8003f6a:	f240 1177 	movw	r1, #375	; 0x177
 8003f6e:	4834      	ldr	r0, [pc, #208]	; (8004040 <HAL_UART_Init+0x168>)
 8003f70:	f7fd f9b1 	bl	80012d6 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d009      	beq.n	8003f90 <HAL_UART_Init+0xb8>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f84:	d004      	beq.n	8003f90 <HAL_UART_Init+0xb8>
 8003f86:	f240 1179 	movw	r1, #377	; 0x179
 8003f8a:	482d      	ldr	r0, [pc, #180]	; (8004040 <HAL_UART_Init+0x168>)
 8003f8c:	f7fd f9a3 	bl	80012d6 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d009      	beq.n	8003fac <HAL_UART_Init+0xd4>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa0:	d004      	beq.n	8003fac <HAL_UART_Init+0xd4>
 8003fa2:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8003fa6:	4826      	ldr	r0, [pc, #152]	; (8004040 <HAL_UART_Init+0x168>)
 8003fa8:	f7fd f995 	bl	80012d6 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d106      	bne.n	8003fc6 <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7fd fb33 	bl	800162c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2224      	movs	r2, #36	; 0x24
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fdc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 fe84 	bl	8004cec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ff2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695a      	ldr	r2, [r3, #20]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004002:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004012:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2220      	movs	r2, #32
 800401e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40011000 	.word	0x40011000
 8004038:	40004400 	.word	0x40004400
 800403c:	40011400 	.word	0x40011400
 8004040:	0800d84c 	.word	0x0800d84c

08004044 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08a      	sub	sp, #40	; 0x28
 8004048:	af02      	add	r7, sp, #8
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	603b      	str	r3, [r7, #0]
 8004050:	4613      	mov	r3, r2
 8004052:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b20      	cmp	r3, #32
 8004062:	d17c      	bne.n	800415e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <HAL_UART_Transmit+0x2c>
 800406a:	88fb      	ldrh	r3, [r7, #6]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e075      	b.n	8004160 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800407a:	2b01      	cmp	r3, #1
 800407c:	d101      	bne.n	8004082 <HAL_UART_Transmit+0x3e>
 800407e:	2302      	movs	r3, #2
 8004080:	e06e      	b.n	8004160 <HAL_UART_Transmit+0x11c>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2221      	movs	r2, #33	; 0x21
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004098:	f7fd fb78 	bl	800178c <HAL_GetTick>
 800409c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	88fa      	ldrh	r2, [r7, #6]
 80040a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	88fa      	ldrh	r2, [r7, #6]
 80040a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b2:	d108      	bne.n	80040c6 <HAL_UART_Transmit+0x82>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d104      	bne.n	80040c6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80040bc:	2300      	movs	r3, #0
 80040be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	61bb      	str	r3, [r7, #24]
 80040c4:	e003      	b.n	80040ce <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040d6:	e02a      	b.n	800412e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	2200      	movs	r2, #0
 80040e0:	2180      	movs	r1, #128	; 0x80
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 fbc0 	bl	8004868 <UART_WaitOnFlagUntilTimeout>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e036      	b.n	8004160 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10b      	bne.n	8004110 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004106:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	3302      	adds	r3, #2
 800410c:	61bb      	str	r3, [r7, #24]
 800410e:	e007      	b.n	8004120 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	781a      	ldrb	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	3301      	adds	r3, #1
 800411e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1cf      	bne.n	80040d8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2200      	movs	r2, #0
 8004140:	2140      	movs	r1, #64	; 0x40
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 fb90 	bl	8004868 <UART_WaitOnFlagUntilTimeout>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e006      	b.n	8004160 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	e000      	b.n	8004160 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800415e:	2302      	movs	r3, #2
  }
}
 8004160:	4618      	mov	r0, r3
 8004162:	3720      	adds	r7, #32
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08a      	sub	sp, #40	; 0x28
 800416c:	af02      	add	r7, sp, #8
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	4613      	mov	r3, r2
 8004176:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b20      	cmp	r3, #32
 8004186:	f040 808c 	bne.w	80042a2 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d002      	beq.n	8004196 <HAL_UART_Receive+0x2e>
 8004190:	88fb      	ldrh	r3, [r7, #6]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e084      	b.n	80042a4 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d101      	bne.n	80041a8 <HAL_UART_Receive+0x40>
 80041a4:	2302      	movs	r3, #2
 80041a6:	e07d      	b.n	80042a4 <HAL_UART_Receive+0x13c>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2222      	movs	r2, #34	; 0x22
 80041ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041c4:	f7fd fae2 	bl	800178c <HAL_GetTick>
 80041c8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	88fa      	ldrh	r2, [r7, #6]
 80041ce:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	88fa      	ldrh	r2, [r7, #6]
 80041d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041de:	d108      	bne.n	80041f2 <HAL_UART_Receive+0x8a>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d104      	bne.n	80041f2 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80041e8:	2300      	movs	r3, #0
 80041ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	61bb      	str	r3, [r7, #24]
 80041f0:	e003      	b.n	80041fa <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041f6:	2300      	movs	r3, #0
 80041f8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004202:	e043      	b.n	800428c <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2200      	movs	r2, #0
 800420c:	2120      	movs	r1, #32
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 fb2a 	bl	8004868 <UART_WaitOnFlagUntilTimeout>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e042      	b.n	80042a4 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10c      	bne.n	800423e <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	b29b      	uxth	r3, r3
 800422c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004230:	b29a      	uxth	r2, r3
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	3302      	adds	r3, #2
 800423a:	61bb      	str	r3, [r7, #24]
 800423c:	e01f      	b.n	800427e <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004246:	d007      	beq.n	8004258 <HAL_UART_Receive+0xf0>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10a      	bne.n	8004266 <HAL_UART_Receive+0xfe>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d106      	bne.n	8004266 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	b2da      	uxtb	r2, r3
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	701a      	strb	r2, [r3, #0]
 8004264:	e008      	b.n	8004278 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004272:	b2da      	uxtb	r2, r3
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	3301      	adds	r3, #1
 800427c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004282:	b29b      	uxth	r3, r3
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1b6      	bne.n	8004204 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	e000      	b.n	80042a4 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80042a2:	2302      	movs	r3, #2
  }
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3720      	adds	r7, #32
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	4613      	mov	r3, r2
 80042b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b20      	cmp	r3, #32
 80042c4:	d11d      	bne.n	8004302 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <HAL_UART_Receive_IT+0x26>
 80042cc:	88fb      	ldrh	r3, [r7, #6]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e016      	b.n	8004304 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <HAL_UART_Receive_IT+0x38>
 80042e0:	2302      	movs	r3, #2
 80042e2:	e00f      	b.n	8004304 <HAL_UART_Receive_IT+0x58>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	461a      	mov	r2, r3
 80042f6:	68b9      	ldr	r1, [r7, #8]
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 fb23 	bl	8004944 <UART_Start_Receive_IT>
 80042fe:	4603      	mov	r3, r0
 8004300:	e000      	b.n	8004304 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004302:	2302      	movs	r3, #2
  }
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b0ba      	sub	sp, #232	; 0xe8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004332:	2300      	movs	r3, #0
 8004334:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004338:	2300      	movs	r3, #0
 800433a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800433e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800434a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10f      	bne.n	8004372 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b00      	cmp	r3, #0
 800435c:	d009      	beq.n	8004372 <HAL_UART_IRQHandler+0x66>
 800435e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004362:	f003 0320 	and.w	r3, r3, #32
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fc03 	bl	8004b76 <UART_Receive_IT>
      return;
 8004370:	e256      	b.n	8004820 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004372:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 80de 	beq.w	8004538 <HAL_UART_IRQHandler+0x22c>
 800437c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	d106      	bne.n	8004396 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800438c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 80d1 	beq.w	8004538 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00b      	beq.n	80043ba <HAL_UART_IRQHandler+0xae>
 80043a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d005      	beq.n	80043ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	f043 0201 	orr.w	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043be:	f003 0304 	and.w	r3, r3, #4
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00b      	beq.n	80043de <HAL_UART_IRQHandler+0xd2>
 80043c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d005      	beq.n	80043de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	f043 0202 	orr.w	r2, r3, #2
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00b      	beq.n	8004402 <HAL_UART_IRQHandler+0xf6>
 80043ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d005      	beq.n	8004402 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	f043 0204 	orr.w	r2, r3, #4
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b00      	cmp	r3, #0
 800440c:	d011      	beq.n	8004432 <HAL_UART_IRQHandler+0x126>
 800440e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	d105      	bne.n	8004426 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800441a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d005      	beq.n	8004432 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	f043 0208 	orr.w	r2, r3, #8
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 81ed 	beq.w	8004816 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800443c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004440:	f003 0320 	and.w	r3, r3, #32
 8004444:	2b00      	cmp	r3, #0
 8004446:	d008      	beq.n	800445a <HAL_UART_IRQHandler+0x14e>
 8004448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800444c:	f003 0320 	and.w	r3, r3, #32
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fb8e 	bl	8004b76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004464:	2b40      	cmp	r3, #64	; 0x40
 8004466:	bf0c      	ite	eq
 8004468:	2301      	moveq	r3, #1
 800446a:	2300      	movne	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b00      	cmp	r3, #0
 800447c:	d103      	bne.n	8004486 <HAL_UART_IRQHandler+0x17a>
 800447e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004482:	2b00      	cmp	r3, #0
 8004484:	d04f      	beq.n	8004526 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fa96 	bl	80049b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004496:	2b40      	cmp	r3, #64	; 0x40
 8004498:	d141      	bne.n	800451e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3314      	adds	r3, #20
 80044a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044a8:	e853 3f00 	ldrex	r3, [r3]
 80044ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80044b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3314      	adds	r3, #20
 80044c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80044c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80044ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80044d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80044d6:	e841 2300 	strex	r3, r2, [r1]
 80044da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80044de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1d9      	bne.n	800449a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d013      	beq.n	8004516 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f2:	4a7d      	ldr	r2, [pc, #500]	; (80046e8 <HAL_UART_IRQHandler+0x3dc>)
 80044f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fd faf8 	bl	8001af0 <HAL_DMA_Abort_IT>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d016      	beq.n	8004534 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004510:	4610      	mov	r0, r2
 8004512:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004514:	e00e      	b.n	8004534 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f990 	bl	800483c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800451c:	e00a      	b.n	8004534 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f98c 	bl	800483c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004524:	e006      	b.n	8004534 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f988 	bl	800483c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004532:	e170      	b.n	8004816 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004534:	bf00      	nop
    return;
 8004536:	e16e      	b.n	8004816 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453c:	2b01      	cmp	r3, #1
 800453e:	f040 814a 	bne.w	80047d6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004546:	f003 0310 	and.w	r3, r3, #16
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 8143 	beq.w	80047d6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 813c 	beq.w	80047d6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800455e:	2300      	movs	r3, #0
 8004560:	60bb      	str	r3, [r7, #8]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	60bb      	str	r3, [r7, #8]
 8004572:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457e:	2b40      	cmp	r3, #64	; 0x40
 8004580:	f040 80b4 	bne.w	80046ec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004590:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 8140 	beq.w	800481a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800459e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045a2:	429a      	cmp	r2, r3
 80045a4:	f080 8139 	bcs.w	800481a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ba:	f000 8088 	beq.w	80046ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	330c      	adds	r3, #12
 80045c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045cc:	e853 3f00 	ldrex	r3, [r3]
 80045d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80045d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	330c      	adds	r3, #12
 80045e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80045ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80045f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045fa:	e841 2300 	strex	r3, r2, [r1]
 80045fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004602:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1d9      	bne.n	80045be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3314      	adds	r3, #20
 8004610:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004614:	e853 3f00 	ldrex	r3, [r3]
 8004618:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800461a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800461c:	f023 0301 	bic.w	r3, r3, #1
 8004620:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3314      	adds	r3, #20
 800462a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800462e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004632:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004634:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004636:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800463a:	e841 2300 	strex	r3, r2, [r1]
 800463e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1e1      	bne.n	800460a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3314      	adds	r3, #20
 800464c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004650:	e853 3f00 	ldrex	r3, [r3]
 8004654:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800465c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3314      	adds	r3, #20
 8004666:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800466a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800466c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004670:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e3      	bne.n	8004646 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2220      	movs	r2, #32
 8004682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	330c      	adds	r3, #12
 8004692:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004696:	e853 3f00 	ldrex	r3, [r3]
 800469a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800469c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800469e:	f023 0310 	bic.w	r3, r3, #16
 80046a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	330c      	adds	r3, #12
 80046ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80046b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80046b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046b8:	e841 2300 	strex	r3, r2, [r1]
 80046bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80046be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1e3      	bne.n	800468c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fd f9a1 	bl	8001a10 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	b29b      	uxth	r3, r3
 80046dc:	4619      	mov	r1, r3
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f8b6 	bl	8004850 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046e4:	e099      	b.n	800481a <HAL_UART_IRQHandler+0x50e>
 80046e6:	bf00      	nop
 80046e8:	08004a7f 	.word	0x08004a7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004700:	b29b      	uxth	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 808b 	beq.w	800481e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004708:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 8086 	beq.w	800481e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	330c      	adds	r3, #12
 8004718:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471c:	e853 3f00 	ldrex	r3, [r3]
 8004720:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004724:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004728:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	330c      	adds	r3, #12
 8004732:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004736:	647a      	str	r2, [r7, #68]	; 0x44
 8004738:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800473c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800473e:	e841 2300 	strex	r3, r2, [r1]
 8004742:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e3      	bne.n	8004712 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3314      	adds	r3, #20
 8004750:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	e853 3f00 	ldrex	r3, [r3]
 8004758:	623b      	str	r3, [r7, #32]
   return(result);
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	f023 0301 	bic.w	r3, r3, #1
 8004760:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3314      	adds	r3, #20
 800476a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800476e:	633a      	str	r2, [r7, #48]	; 0x30
 8004770:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004772:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004776:	e841 2300 	strex	r3, r2, [r1]
 800477a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800477c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1e3      	bne.n	800474a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2220      	movs	r2, #32
 8004786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	330c      	adds	r3, #12
 8004796:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	e853 3f00 	ldrex	r3, [r3]
 800479e:	60fb      	str	r3, [r7, #12]
   return(result);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 0310 	bic.w	r3, r3, #16
 80047a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	330c      	adds	r3, #12
 80047b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80047b4:	61fa      	str	r2, [r7, #28]
 80047b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b8:	69b9      	ldr	r1, [r7, #24]
 80047ba:	69fa      	ldr	r2, [r7, #28]
 80047bc:	e841 2300 	strex	r3, r2, [r1]
 80047c0:	617b      	str	r3, [r7, #20]
   return(result);
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1e3      	bne.n	8004790 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047cc:	4619      	mov	r1, r3
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f83e 	bl	8004850 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047d4:	e023      	b.n	800481e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d009      	beq.n	80047f6 <HAL_UART_IRQHandler+0x4ea>
 80047e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f959 	bl	8004aa6 <UART_Transmit_IT>
    return;
 80047f4:	e014      	b.n	8004820 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00e      	beq.n	8004820 <HAL_UART_IRQHandler+0x514>
 8004802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480a:	2b00      	cmp	r3, #0
 800480c:	d008      	beq.n	8004820 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f999 	bl	8004b46 <UART_EndTransmit_IT>
    return;
 8004814:	e004      	b.n	8004820 <HAL_UART_IRQHandler+0x514>
    return;
 8004816:	bf00      	nop
 8004818:	e002      	b.n	8004820 <HAL_UART_IRQHandler+0x514>
      return;
 800481a:	bf00      	nop
 800481c:	e000      	b.n	8004820 <HAL_UART_IRQHandler+0x514>
      return;
 800481e:	bf00      	nop
  }
}
 8004820:	37e8      	adds	r7, #232	; 0xe8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop

08004828 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	460b      	mov	r3, r1
 800485a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b090      	sub	sp, #64	; 0x40
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	603b      	str	r3, [r7, #0]
 8004874:	4613      	mov	r3, r2
 8004876:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004878:	e050      	b.n	800491c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800487a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800487c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004880:	d04c      	beq.n	800491c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004884:	2b00      	cmp	r3, #0
 8004886:	d007      	beq.n	8004898 <UART_WaitOnFlagUntilTimeout+0x30>
 8004888:	f7fc ff80 	bl	800178c <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004894:	429a      	cmp	r2, r3
 8004896:	d241      	bcs.n	800491c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	330c      	adds	r3, #12
 800489e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a2:	e853 3f00 	ldrex	r3, [r3]
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	330c      	adds	r3, #12
 80048b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048b8:	637a      	str	r2, [r7, #52]	; 0x34
 80048ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048c0:	e841 2300 	strex	r3, r2, [r1]
 80048c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e5      	bne.n	8004898 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3314      	adds	r3, #20
 80048d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	e853 3f00 	ldrex	r3, [r3]
 80048da:	613b      	str	r3, [r7, #16]
   return(result);
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f023 0301 	bic.w	r3, r3, #1
 80048e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3314      	adds	r3, #20
 80048ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048ec:	623a      	str	r2, [r7, #32]
 80048ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	69f9      	ldr	r1, [r7, #28]
 80048f2:	6a3a      	ldr	r2, [r7, #32]
 80048f4:	e841 2300 	strex	r3, r2, [r1]
 80048f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e5      	bne.n	80048cc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e00f      	b.n	800493c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	4013      	ands	r3, r2
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	429a      	cmp	r2, r3
 800492a:	bf0c      	ite	eq
 800492c:	2301      	moveq	r3, #1
 800492e:	2300      	movne	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	461a      	mov	r2, r3
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	429a      	cmp	r2, r3
 8004938:	d09f      	beq.n	800487a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3740      	adds	r7, #64	; 0x40
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	4613      	mov	r3, r2
 8004950:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	88fa      	ldrh	r2, [r7, #6]
 800495c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	88fa      	ldrh	r2, [r7, #6]
 8004962:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2222      	movs	r2, #34	; 0x22
 800496e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004988:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695a      	ldr	r2, [r3, #20]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f042 0201 	orr.w	r2, r2, #1
 8004998:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0220 	orr.w	r2, r2, #32
 80049a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b095      	sub	sp, #84	; 0x54
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	330c      	adds	r3, #12
 80049c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ca:	e853 3f00 	ldrex	r3, [r3]
 80049ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	330c      	adds	r3, #12
 80049de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049e0:	643a      	str	r2, [r7, #64]	; 0x40
 80049e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049e8:	e841 2300 	strex	r3, r2, [r1]
 80049ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1e5      	bne.n	80049c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3314      	adds	r3, #20
 80049fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	e853 3f00 	ldrex	r3, [r3]
 8004a02:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f023 0301 	bic.w	r3, r3, #1
 8004a0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3314      	adds	r3, #20
 8004a12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a1c:	e841 2300 	strex	r3, r2, [r1]
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1e5      	bne.n	80049f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d119      	bne.n	8004a64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	330c      	adds	r3, #12
 8004a36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	e853 3f00 	ldrex	r3, [r3]
 8004a3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f023 0310 	bic.w	r3, r3, #16
 8004a46:	647b      	str	r3, [r7, #68]	; 0x44
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	330c      	adds	r3, #12
 8004a4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a50:	61ba      	str	r2, [r7, #24]
 8004a52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a54:	6979      	ldr	r1, [r7, #20]
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	e841 2300 	strex	r3, r2, [r1]
 8004a5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e5      	bne.n	8004a30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a72:	bf00      	nop
 8004a74:	3754      	adds	r7, #84	; 0x54
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b084      	sub	sp, #16
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f7ff fecf 	bl	800483c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a9e:	bf00      	nop
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b085      	sub	sp, #20
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b21      	cmp	r3, #33	; 0x21
 8004ab8:	d13e      	bne.n	8004b38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac2:	d114      	bne.n	8004aee <UART_Transmit_IT+0x48>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d110      	bne.n	8004aee <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ae0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	1c9a      	adds	r2, r3, #2
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	621a      	str	r2, [r3, #32]
 8004aec:	e008      	b.n	8004b00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	1c59      	adds	r1, r3, #1
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6211      	str	r1, [r2, #32]
 8004af8:	781a      	ldrb	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	3b01      	subs	r3, #1
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10f      	bne.n	8004b34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b34:	2300      	movs	r3, #0
 8004b36:	e000      	b.n	8004b3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b38:	2302      	movs	r3, #2
  }
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b082      	sub	sp, #8
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff fe5e 	bl	8004828 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b08c      	sub	sp, #48	; 0x30
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b22      	cmp	r3, #34	; 0x22
 8004b88:	f040 80ab 	bne.w	8004ce2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b94:	d117      	bne.n	8004bc6 <UART_Receive_IT+0x50>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d113      	bne.n	8004bc6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbe:	1c9a      	adds	r2, r3, #2
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	629a      	str	r2, [r3, #40]	; 0x28
 8004bc4:	e026      	b.n	8004c14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd8:	d007      	beq.n	8004bea <UART_Receive_IT+0x74>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10a      	bne.n	8004bf8 <UART_Receive_IT+0x82>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d106      	bne.n	8004bf8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf4:	701a      	strb	r2, [r3, #0]
 8004bf6:	e008      	b.n	8004c0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	4619      	mov	r1, r3
 8004c22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d15a      	bne.n	8004cde <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0220 	bic.w	r2, r2, #32
 8004c36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695a      	ldr	r2, [r3, #20]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0201 	bic.w	r2, r2, #1
 8004c56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d135      	bne.n	8004cd4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	330c      	adds	r3, #12
 8004c74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	e853 3f00 	ldrex	r3, [r3]
 8004c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f023 0310 	bic.w	r3, r3, #16
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	330c      	adds	r3, #12
 8004c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c8e:	623a      	str	r2, [r7, #32]
 8004c90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c92:	69f9      	ldr	r1, [r7, #28]
 8004c94:	6a3a      	ldr	r2, [r7, #32]
 8004c96:	e841 2300 	strex	r3, r2, [r1]
 8004c9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1e5      	bne.n	8004c6e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	2b10      	cmp	r3, #16
 8004cae:	d10a      	bne.n	8004cc6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cca:	4619      	mov	r1, r3
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff fdbf 	bl	8004850 <HAL_UARTEx_RxEventCallback>
 8004cd2:	e002      	b.n	8004cda <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7fc f835 	bl	8000d44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e002      	b.n	8004ce4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	e000      	b.n	8004ce4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004ce2:	2302      	movs	r3, #2
  }
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3730      	adds	r7, #48	; 0x30
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf0:	b09f      	sub	sp, #124	; 0x7c
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8004cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	4b9b      	ldr	r3, [pc, #620]	; (8004f68 <UART_SetConfig+0x27c>)
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d904      	bls.n	8004d0a <UART_SetConfig+0x1e>
 8004d00:	f640 6156 	movw	r1, #3670	; 0xe56
 8004d04:	4899      	ldr	r0, [pc, #612]	; (8004f6c <UART_SetConfig+0x280>)
 8004d06:	f7fc fae6 	bl	80012d6 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8004d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d009      	beq.n	8004d26 <UART_SetConfig+0x3a>
 8004d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d1a:	d004      	beq.n	8004d26 <UART_SetConfig+0x3a>
 8004d1c:	f640 6157 	movw	r1, #3671	; 0xe57
 8004d20:	4892      	ldr	r0, [pc, #584]	; (8004f6c <UART_SetConfig+0x280>)
 8004d22:	f7fc fad8 	bl	80012d6 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8004d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00e      	beq.n	8004d4c <UART_SetConfig+0x60>
 8004d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d36:	d009      	beq.n	8004d4c <UART_SetConfig+0x60>
 8004d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004d40:	d004      	beq.n	8004d4c <UART_SetConfig+0x60>
 8004d42:	f640 6158 	movw	r1, #3672	; 0xe58
 8004d46:	4889      	ldr	r0, [pc, #548]	; (8004f6c <UART_SetConfig+0x280>)
 8004d48:	f7fc fac5 	bl	80012d6 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d4e:	695a      	ldr	r2, [r3, #20]
 8004d50:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8004d54:	4013      	ands	r3, r2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d103      	bne.n	8004d62 <UART_SetConfig+0x76>
 8004d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d104      	bne.n	8004d6c <UART_SetConfig+0x80>
 8004d62:	f640 6159 	movw	r1, #3673	; 0xe59
 8004d66:	4881      	ldr	r0, [pc, #516]	; (8004f6c <UART_SetConfig+0x280>)
 8004d68:	f7fc fab5 	bl	80012d6 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d78:	68d9      	ldr	r1, [r3, #12]
 8004d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	ea40 0301 	orr.w	r3, r0, r1
 8004d82:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	431a      	orrs	r2, r3
 8004d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004da6:	f021 010c 	bic.w	r1, r1, #12
 8004daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004db0:	430b      	orrs	r3, r1
 8004db2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc0:	6999      	ldr	r1, [r3, #24]
 8004dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	ea40 0301 	orr.w	r3, r0, r1
 8004dca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	4b67      	ldr	r3, [pc, #412]	; (8004f70 <UART_SetConfig+0x284>)
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d004      	beq.n	8004de0 <UART_SetConfig+0xf4>
 8004dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	4b66      	ldr	r3, [pc, #408]	; (8004f74 <UART_SetConfig+0x288>)
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d103      	bne.n	8004de8 <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004de0:	f7fe f8fa 	bl	8002fd8 <HAL_RCC_GetPCLK2Freq>
 8004de4:	6778      	str	r0, [r7, #116]	; 0x74
 8004de6:	e002      	b.n	8004dee <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004de8:	f7fe f8e2 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8004dec:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df6:	f040 80c1 	bne.w	8004f7c <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dfc:	461c      	mov	r4, r3
 8004dfe:	f04f 0500 	mov.w	r5, #0
 8004e02:	4622      	mov	r2, r4
 8004e04:	462b      	mov	r3, r5
 8004e06:	1891      	adds	r1, r2, r2
 8004e08:	6439      	str	r1, [r7, #64]	; 0x40
 8004e0a:	415b      	adcs	r3, r3
 8004e0c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e12:	1912      	adds	r2, r2, r4
 8004e14:	eb45 0303 	adc.w	r3, r5, r3
 8004e18:	f04f 0000 	mov.w	r0, #0
 8004e1c:	f04f 0100 	mov.w	r1, #0
 8004e20:	00d9      	lsls	r1, r3, #3
 8004e22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e26:	00d0      	lsls	r0, r2, #3
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	1911      	adds	r1, r2, r4
 8004e2e:	6639      	str	r1, [r7, #96]	; 0x60
 8004e30:	416b      	adcs	r3, r5
 8004e32:	667b      	str	r3, [r7, #100]	; 0x64
 8004e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	f04f 0300 	mov.w	r3, #0
 8004e3e:	1891      	adds	r1, r2, r2
 8004e40:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e42:	415b      	adcs	r3, r3
 8004e44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e46:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e4a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004e4e:	f7fb fa2f 	bl	80002b0 <__aeabi_uldivmod>
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	4b48      	ldr	r3, [pc, #288]	; (8004f78 <UART_SetConfig+0x28c>)
 8004e58:	fba3 2302 	umull	r2, r3, r3, r2
 8004e5c:	095b      	lsrs	r3, r3, #5
 8004e5e:	011e      	lsls	r6, r3, #4
 8004e60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e62:	461c      	mov	r4, r3
 8004e64:	f04f 0500 	mov.w	r5, #0
 8004e68:	4622      	mov	r2, r4
 8004e6a:	462b      	mov	r3, r5
 8004e6c:	1891      	adds	r1, r2, r2
 8004e6e:	6339      	str	r1, [r7, #48]	; 0x30
 8004e70:	415b      	adcs	r3, r3
 8004e72:	637b      	str	r3, [r7, #52]	; 0x34
 8004e74:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004e78:	1912      	adds	r2, r2, r4
 8004e7a:	eb45 0303 	adc.w	r3, r5, r3
 8004e7e:	f04f 0000 	mov.w	r0, #0
 8004e82:	f04f 0100 	mov.w	r1, #0
 8004e86:	00d9      	lsls	r1, r3, #3
 8004e88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e8c:	00d0      	lsls	r0, r2, #3
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	1911      	adds	r1, r2, r4
 8004e94:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e96:	416b      	adcs	r3, r5
 8004e98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f04f 0300 	mov.w	r3, #0
 8004ea4:	1891      	adds	r1, r2, r2
 8004ea6:	62b9      	str	r1, [r7, #40]	; 0x28
 8004ea8:	415b      	adcs	r3, r3
 8004eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004eb0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004eb4:	f7fb f9fc 	bl	80002b0 <__aeabi_uldivmod>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4b2e      	ldr	r3, [pc, #184]	; (8004f78 <UART_SetConfig+0x28c>)
 8004ebe:	fba3 1302 	umull	r1, r3, r3, r2
 8004ec2:	095b      	lsrs	r3, r3, #5
 8004ec4:	2164      	movs	r1, #100	; 0x64
 8004ec6:	fb01 f303 	mul.w	r3, r1, r3
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	3332      	adds	r3, #50	; 0x32
 8004ed0:	4a29      	ldr	r2, [pc, #164]	; (8004f78 <UART_SetConfig+0x28c>)
 8004ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ede:	441e      	add	r6, r3
 8004ee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f04f 0100 	mov.w	r1, #0
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	1894      	adds	r4, r2, r2
 8004eee:	623c      	str	r4, [r7, #32]
 8004ef0:	415b      	adcs	r3, r3
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ef4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ef8:	1812      	adds	r2, r2, r0
 8004efa:	eb41 0303 	adc.w	r3, r1, r3
 8004efe:	f04f 0400 	mov.w	r4, #0
 8004f02:	f04f 0500 	mov.w	r5, #0
 8004f06:	00dd      	lsls	r5, r3, #3
 8004f08:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f0c:	00d4      	lsls	r4, r2, #3
 8004f0e:	4622      	mov	r2, r4
 8004f10:	462b      	mov	r3, r5
 8004f12:	1814      	adds	r4, r2, r0
 8004f14:	653c      	str	r4, [r7, #80]	; 0x50
 8004f16:	414b      	adcs	r3, r1
 8004f18:	657b      	str	r3, [r7, #84]	; 0x54
 8004f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	1891      	adds	r1, r2, r2
 8004f26:	61b9      	str	r1, [r7, #24]
 8004f28:	415b      	adcs	r3, r3
 8004f2a:	61fb      	str	r3, [r7, #28]
 8004f2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f30:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004f34:	f7fb f9bc 	bl	80002b0 <__aeabi_uldivmod>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4b0e      	ldr	r3, [pc, #56]	; (8004f78 <UART_SetConfig+0x28c>)
 8004f3e:	fba3 1302 	umull	r1, r3, r3, r2
 8004f42:	095b      	lsrs	r3, r3, #5
 8004f44:	2164      	movs	r1, #100	; 0x64
 8004f46:	fb01 f303 	mul.w	r3, r1, r3
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	3332      	adds	r3, #50	; 0x32
 8004f50:	4a09      	ldr	r2, [pc, #36]	; (8004f78 <UART_SetConfig+0x28c>)
 8004f52:	fba2 2303 	umull	r2, r3, r2, r3
 8004f56:	095b      	lsrs	r3, r3, #5
 8004f58:	f003 0207 	and.w	r2, r3, #7
 8004f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4432      	add	r2, r6
 8004f62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f64:	e0c4      	b.n	80050f0 <UART_SetConfig+0x404>
 8004f66:	bf00      	nop
 8004f68:	00a037a0 	.word	0x00a037a0
 8004f6c:	0800d84c 	.word	0x0800d84c
 8004f70:	40011000 	.word	0x40011000
 8004f74:	40011400 	.word	0x40011400
 8004f78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f7e:	461c      	mov	r4, r3
 8004f80:	f04f 0500 	mov.w	r5, #0
 8004f84:	4622      	mov	r2, r4
 8004f86:	462b      	mov	r3, r5
 8004f88:	1891      	adds	r1, r2, r2
 8004f8a:	6139      	str	r1, [r7, #16]
 8004f8c:	415b      	adcs	r3, r3
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f94:	1912      	adds	r2, r2, r4
 8004f96:	eb45 0303 	adc.w	r3, r5, r3
 8004f9a:	f04f 0000 	mov.w	r0, #0
 8004f9e:	f04f 0100 	mov.w	r1, #0
 8004fa2:	00d9      	lsls	r1, r3, #3
 8004fa4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fa8:	00d0      	lsls	r0, r2, #3
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	eb12 0804 	adds.w	r8, r2, r4
 8004fb2:	eb43 0905 	adc.w	r9, r3, r5
 8004fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f04f 0100 	mov.w	r1, #0
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	f04f 0300 	mov.w	r3, #0
 8004fc8:	008b      	lsls	r3, r1, #2
 8004fca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004fce:	0082      	lsls	r2, r0, #2
 8004fd0:	4640      	mov	r0, r8
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	f7fb f96c 	bl	80002b0 <__aeabi_uldivmod>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4b47      	ldr	r3, [pc, #284]	; (80050fc <UART_SetConfig+0x410>)
 8004fde:	fba3 2302 	umull	r2, r3, r3, r2
 8004fe2:	095b      	lsrs	r3, r3, #5
 8004fe4:	011e      	lsls	r6, r3, #4
 8004fe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f04f 0100 	mov.w	r1, #0
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	1894      	adds	r4, r2, r2
 8004ff4:	60bc      	str	r4, [r7, #8]
 8004ff6:	415b      	adcs	r3, r3
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ffe:	1812      	adds	r2, r2, r0
 8005000:	eb41 0303 	adc.w	r3, r1, r3
 8005004:	f04f 0400 	mov.w	r4, #0
 8005008:	f04f 0500 	mov.w	r5, #0
 800500c:	00dd      	lsls	r5, r3, #3
 800500e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005012:	00d4      	lsls	r4, r2, #3
 8005014:	4622      	mov	r2, r4
 8005016:	462b      	mov	r3, r5
 8005018:	1814      	adds	r4, r2, r0
 800501a:	64bc      	str	r4, [r7, #72]	; 0x48
 800501c:	414b      	adcs	r3, r1
 800501e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	4618      	mov	r0, r3
 8005026:	f04f 0100 	mov.w	r1, #0
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	f04f 0300 	mov.w	r3, #0
 8005032:	008b      	lsls	r3, r1, #2
 8005034:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005038:	0082      	lsls	r2, r0, #2
 800503a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800503e:	f7fb f937 	bl	80002b0 <__aeabi_uldivmod>
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	4b2d      	ldr	r3, [pc, #180]	; (80050fc <UART_SetConfig+0x410>)
 8005048:	fba3 1302 	umull	r1, r3, r3, r2
 800504c:	095b      	lsrs	r3, r3, #5
 800504e:	2164      	movs	r1, #100	; 0x64
 8005050:	fb01 f303 	mul.w	r3, r1, r3
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	011b      	lsls	r3, r3, #4
 8005058:	3332      	adds	r3, #50	; 0x32
 800505a:	4a28      	ldr	r2, [pc, #160]	; (80050fc <UART_SetConfig+0x410>)
 800505c:	fba2 2303 	umull	r2, r3, r2, r3
 8005060:	095b      	lsrs	r3, r3, #5
 8005062:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005066:	441e      	add	r6, r3
 8005068:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800506a:	4618      	mov	r0, r3
 800506c:	f04f 0100 	mov.w	r1, #0
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	1894      	adds	r4, r2, r2
 8005076:	603c      	str	r4, [r7, #0]
 8005078:	415b      	adcs	r3, r3
 800507a:	607b      	str	r3, [r7, #4]
 800507c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005080:	1812      	adds	r2, r2, r0
 8005082:	eb41 0303 	adc.w	r3, r1, r3
 8005086:	f04f 0400 	mov.w	r4, #0
 800508a:	f04f 0500 	mov.w	r5, #0
 800508e:	00dd      	lsls	r5, r3, #3
 8005090:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005094:	00d4      	lsls	r4, r2, #3
 8005096:	4622      	mov	r2, r4
 8005098:	462b      	mov	r3, r5
 800509a:	eb12 0a00 	adds.w	sl, r2, r0
 800509e:	eb43 0b01 	adc.w	fp, r3, r1
 80050a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f04f 0100 	mov.w	r1, #0
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	f04f 0300 	mov.w	r3, #0
 80050b4:	008b      	lsls	r3, r1, #2
 80050b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80050ba:	0082      	lsls	r2, r0, #2
 80050bc:	4650      	mov	r0, sl
 80050be:	4659      	mov	r1, fp
 80050c0:	f7fb f8f6 	bl	80002b0 <__aeabi_uldivmod>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4b0c      	ldr	r3, [pc, #48]	; (80050fc <UART_SetConfig+0x410>)
 80050ca:	fba3 1302 	umull	r1, r3, r3, r2
 80050ce:	095b      	lsrs	r3, r3, #5
 80050d0:	2164      	movs	r1, #100	; 0x64
 80050d2:	fb01 f303 	mul.w	r3, r1, r3
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	011b      	lsls	r3, r3, #4
 80050da:	3332      	adds	r3, #50	; 0x32
 80050dc:	4a07      	ldr	r2, [pc, #28]	; (80050fc <UART_SetConfig+0x410>)
 80050de:	fba2 2303 	umull	r2, r3, r2, r3
 80050e2:	095b      	lsrs	r3, r3, #5
 80050e4:	f003 020f 	and.w	r2, r3, #15
 80050e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4432      	add	r2, r6
 80050ee:	609a      	str	r2, [r3, #8]
}
 80050f0:	bf00      	nop
 80050f2:	377c      	adds	r7, #124	; 0x7c
 80050f4:	46bd      	mov	sp, r7
 80050f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050fa:	bf00      	nop
 80050fc:	51eb851f 	.word	0x51eb851f

08005100 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005104:	4904      	ldr	r1, [pc, #16]	; (8005118 <MX_FATFS_Init+0x18>)
 8005106:	4805      	ldr	r0, [pc, #20]	; (800511c <MX_FATFS_Init+0x1c>)
 8005108:	f003 fc92 	bl	8008a30 <FATFS_LinkDriver>
 800510c:	4603      	mov	r3, r0
 800510e:	461a      	mov	r2, r3
 8005110:	4b03      	ldr	r3, [pc, #12]	; (8005120 <MX_FATFS_Init+0x20>)
 8005112:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005114:	bf00      	nop
 8005116:	bd80      	pop	{r7, pc}
 8005118:	20005194 	.word	0x20005194
 800511c:	2000000c 	.word	0x2000000c
 8005120:	20005198 	.word	0x20005198

08005124 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005128:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800512a:	4618      	mov	r0, r3
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	4603      	mov	r3, r0
 800513c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800513e:	79fb      	ldrb	r3, [r7, #7]
 8005140:	4618      	mov	r0, r3
 8005142:	f000 f9d9 	bl	80054f8 <USER_SPI_initialize>
 8005146:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005148:	4618      	mov	r0, r3
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	4603      	mov	r3, r0
 8005158:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800515a:	79fb      	ldrb	r3, [r7, #7]
 800515c:	4618      	mov	r0, r3
 800515e:	f000 fab7 	bl	80056d0 <USER_SPI_status>
 8005162:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005164:	4618      	mov	r0, r3
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	60b9      	str	r1, [r7, #8]
 8005174:	607a      	str	r2, [r7, #4]
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	4603      	mov	r3, r0
 800517a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800517c:	7bf8      	ldrb	r0, [r7, #15]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	68b9      	ldr	r1, [r7, #8]
 8005184:	f000 faba 	bl	80056fc <USER_SPI_read>
 8005188:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b084      	sub	sp, #16
 8005196:	af00      	add	r7, sp, #0
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	603b      	str	r3, [r7, #0]
 800519e:	4603      	mov	r3, r0
 80051a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 80051a2:	7bf8      	ldrb	r0, [r7, #15]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	68b9      	ldr	r1, [r7, #8]
 80051aa:	f000 fb0d 	bl	80057c8 <USER_SPI_write>
 80051ae:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	4603      	mov	r3, r0
 80051c0:	603a      	str	r2, [r7, #0]
 80051c2:	71fb      	strb	r3, [r7, #7]
 80051c4:	460b      	mov	r3, r1
 80051c6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80051c8:	79b9      	ldrb	r1, [r7, #6]
 80051ca:	79fb      	ldrb	r3, [r7, #7]
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fb76 	bl	80058c0 <USER_SPI_ioctl>
 80051d4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80051e8:	f7fc fad0 	bl	800178c <HAL_GetTick>
 80051ec:	4603      	mov	r3, r0
 80051ee:	4a04      	ldr	r2, [pc, #16]	; (8005200 <SPI_Timer_On+0x20>)
 80051f0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80051f2:	4a04      	ldr	r2, [pc, #16]	; (8005204 <SPI_Timer_On+0x24>)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6013      	str	r3, [r2, #0]
}
 80051f8:	bf00      	nop
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	20005600 	.word	0x20005600
 8005204:	20005604 	.word	0x20005604

08005208 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800520c:	f7fc fabe 	bl	800178c <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	4b06      	ldr	r3, [pc, #24]	; (800522c <SPI_Timer_Status+0x24>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	1ad2      	subs	r2, r2, r3
 8005218:	4b05      	ldr	r3, [pc, #20]	; (8005230 <SPI_Timer_Status+0x28>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	bf34      	ite	cc
 8005220:	2301      	movcc	r3, #1
 8005222:	2300      	movcs	r3, #0
 8005224:	b2db      	uxtb	r3, r3
}
 8005226:	4618      	mov	r0, r3
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	20005600 	.word	0x20005600
 8005230:	20005604 	.word	0x20005604

08005234 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af02      	add	r7, sp, #8
 800523a:	4603      	mov	r3, r0
 800523c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800523e:	f107 020f 	add.w	r2, r7, #15
 8005242:	1df9      	adds	r1, r7, #7
 8005244:	2332      	movs	r3, #50	; 0x32
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	2301      	movs	r3, #1
 800524a:	4804      	ldr	r0, [pc, #16]	; (800525c <xchg_spi+0x28>)
 800524c:	f7fe f8a6 	bl	800339c <HAL_SPI_TransmitReceive>
    return rxDat;
 8005250:	7bfb      	ldrb	r3, [r7, #15]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	200050ac 	.word	0x200050ac

08005260 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8005260:	b590      	push	{r4, r7, lr}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800526a:	2300      	movs	r3, #0
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	e00a      	b.n	8005286 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	18d4      	adds	r4, r2, r3
 8005276:	20ff      	movs	r0, #255	; 0xff
 8005278:	f7ff ffdc 	bl	8005234 <xchg_spi>
 800527c:	4603      	mov	r3, r0
 800527e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	3301      	adds	r3, #1
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d3f0      	bcc.n	8005270 <rcvr_spi_multi+0x10>
	}
}
 800528e:	bf00      	nop
 8005290:	bf00      	nop
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	bd90      	pop	{r4, r7, pc}

08005298 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80052a2:	2300      	movs	r3, #0
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	e009      	b.n	80052bc <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4413      	add	r3, r2
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff ffbf 	bl	8005234 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3301      	adds	r3, #1
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d3f1      	bcc.n	80052a8 <xmit_spi_multi+0x10>
	}
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b086      	sub	sp, #24
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80052d6:	f7fc fa59 	bl	800178c <HAL_GetTick>
 80052da:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80052e0:	20ff      	movs	r0, #255	; 0xff
 80052e2:	f7ff ffa7 	bl	8005234 <xchg_spi>
 80052e6:	4603      	mov	r3, r0
 80052e8:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80052ea:	7bfb      	ldrb	r3, [r7, #15]
 80052ec:	2bff      	cmp	r3, #255	; 0xff
 80052ee:	d007      	beq.n	8005300 <wait_ready+0x32>
 80052f0:	f7fc fa4c 	bl	800178c <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d8ef      	bhi.n	80052e0 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8005300:	7bfb      	ldrb	r3, [r7, #15]
 8005302:	2bff      	cmp	r3, #255	; 0xff
 8005304:	bf0c      	ite	eq
 8005306:	2301      	moveq	r3, #1
 8005308:	2300      	movne	r3, #0
 800530a:	b2db      	uxtb	r3, r3
}
 800530c:	4618      	mov	r0, r3
 800530e:	3718      	adds	r7, #24
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8005318:	2201      	movs	r2, #1
 800531a:	2102      	movs	r1, #2
 800531c:	4803      	ldr	r0, [pc, #12]	; (800532c <despiselect+0x18>)
 800531e:	f7fc fea5 	bl	800206c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8005322:	20ff      	movs	r0, #255	; 0xff
 8005324:	f7ff ff86 	bl	8005234 <xchg_spi>

}
 8005328:	bf00      	nop
 800532a:	bd80      	pop	{r7, pc}
 800532c:	40020400 	.word	0x40020400

08005330 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8005334:	2200      	movs	r2, #0
 8005336:	2102      	movs	r1, #2
 8005338:	4809      	ldr	r0, [pc, #36]	; (8005360 <spiselect+0x30>)
 800533a:	f7fc fe97 	bl	800206c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800533e:	20ff      	movs	r0, #255	; 0xff
 8005340:	f7ff ff78 	bl	8005234 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8005344:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005348:	f7ff ffc1 	bl	80052ce <wait_ready>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <spiselect+0x26>
 8005352:	2301      	movs	r3, #1
 8005354:	e002      	b.n	800535c <spiselect+0x2c>

	despiselect();
 8005356:	f7ff ffdd 	bl	8005314 <despiselect>
	return 0;	/* Timeout */
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	bd80      	pop	{r7, pc}
 8005360:	40020400 	.word	0x40020400

08005364 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800536e:	20c8      	movs	r0, #200	; 0xc8
 8005370:	f7ff ff36 	bl	80051e0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8005374:	20ff      	movs	r0, #255	; 0xff
 8005376:	f7ff ff5d 	bl	8005234 <xchg_spi>
 800537a:	4603      	mov	r3, r0
 800537c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800537e:	7bfb      	ldrb	r3, [r7, #15]
 8005380:	2bff      	cmp	r3, #255	; 0xff
 8005382:	d104      	bne.n	800538e <rcvr_datablock+0x2a>
 8005384:	f7ff ff40 	bl	8005208 <SPI_Timer_Status>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1f2      	bne.n	8005374 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800538e:	7bfb      	ldrb	r3, [r7, #15]
 8005390:	2bfe      	cmp	r3, #254	; 0xfe
 8005392:	d001      	beq.n	8005398 <rcvr_datablock+0x34>
 8005394:	2300      	movs	r3, #0
 8005396:	e00a      	b.n	80053ae <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8005398:	6839      	ldr	r1, [r7, #0]
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7ff ff60 	bl	8005260 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80053a0:	20ff      	movs	r0, #255	; 0xff
 80053a2:	f7ff ff47 	bl	8005234 <xchg_spi>
 80053a6:	20ff      	movs	r0, #255	; 0xff
 80053a8:	f7ff ff44 	bl	8005234 <xchg_spi>

	return 1;						/* Function succeeded */
 80053ac:	2301      	movs	r3, #1
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b084      	sub	sp, #16
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	460b      	mov	r3, r1
 80053c0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80053c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80053c6:	f7ff ff82 	bl	80052ce <wait_ready>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <xmit_datablock+0x1e>
 80053d0:	2300      	movs	r3, #0
 80053d2:	e01e      	b.n	8005412 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff ff2c 	bl	8005234 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	2bfd      	cmp	r3, #253	; 0xfd
 80053e0:	d016      	beq.n	8005410 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80053e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7ff ff56 	bl	8005298 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80053ec:	20ff      	movs	r0, #255	; 0xff
 80053ee:	f7ff ff21 	bl	8005234 <xchg_spi>
 80053f2:	20ff      	movs	r0, #255	; 0xff
 80053f4:	f7ff ff1e 	bl	8005234 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80053f8:	20ff      	movs	r0, #255	; 0xff
 80053fa:	f7ff ff1b 	bl	8005234 <xchg_spi>
 80053fe:	4603      	mov	r3, r0
 8005400:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8005402:	7bfb      	ldrb	r3, [r7, #15]
 8005404:	f003 031f 	and.w	r3, r3, #31
 8005408:	2b05      	cmp	r3, #5
 800540a:	d001      	beq.n	8005410 <xmit_datablock+0x5a>
 800540c:	2300      	movs	r3, #0
 800540e:	e000      	b.n	8005412 <xmit_datablock+0x5c>
	}
	return 1;
 8005410:	2301      	movs	r3, #1
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b084      	sub	sp, #16
 800541e:	af00      	add	r7, sp, #0
 8005420:	4603      	mov	r3, r0
 8005422:	6039      	str	r1, [r7, #0]
 8005424:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8005426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800542a:	2b00      	cmp	r3, #0
 800542c:	da0e      	bge.n	800544c <send_cmd+0x32>
		cmd &= 0x7F;
 800542e:	79fb      	ldrb	r3, [r7, #7]
 8005430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005434:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8005436:	2100      	movs	r1, #0
 8005438:	2037      	movs	r0, #55	; 0x37
 800543a:	f7ff ffee 	bl	800541a <send_cmd>
 800543e:	4603      	mov	r3, r0
 8005440:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8005442:	7bbb      	ldrb	r3, [r7, #14]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d901      	bls.n	800544c <send_cmd+0x32>
 8005448:	7bbb      	ldrb	r3, [r7, #14]
 800544a:	e051      	b.n	80054f0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800544c:	79fb      	ldrb	r3, [r7, #7]
 800544e:	2b0c      	cmp	r3, #12
 8005450:	d008      	beq.n	8005464 <send_cmd+0x4a>
		despiselect();
 8005452:	f7ff ff5f 	bl	8005314 <despiselect>
		if (!spiselect()) return 0xFF;
 8005456:	f7ff ff6b 	bl	8005330 <spiselect>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <send_cmd+0x4a>
 8005460:	23ff      	movs	r3, #255	; 0xff
 8005462:	e045      	b.n	80054f0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005464:	79fb      	ldrb	r3, [r7, #7]
 8005466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800546a:	b2db      	uxtb	r3, r3
 800546c:	4618      	mov	r0, r3
 800546e:	f7ff fee1 	bl	8005234 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	0e1b      	lsrs	r3, r3, #24
 8005476:	b2db      	uxtb	r3, r3
 8005478:	4618      	mov	r0, r3
 800547a:	f7ff fedb 	bl	8005234 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	0c1b      	lsrs	r3, r3, #16
 8005482:	b2db      	uxtb	r3, r3
 8005484:	4618      	mov	r0, r3
 8005486:	f7ff fed5 	bl	8005234 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	0a1b      	lsrs	r3, r3, #8
 800548e:	b2db      	uxtb	r3, r3
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff fecf 	bl	8005234 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	b2db      	uxtb	r3, r3
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff feca 	bl	8005234 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80054a0:	2301      	movs	r3, #1
 80054a2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80054a4:	79fb      	ldrb	r3, [r7, #7]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <send_cmd+0x94>
 80054aa:	2395      	movs	r3, #149	; 0x95
 80054ac:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80054ae:	79fb      	ldrb	r3, [r7, #7]
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d101      	bne.n	80054b8 <send_cmd+0x9e>
 80054b4:	2387      	movs	r3, #135	; 0x87
 80054b6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff feba 	bl	8005234 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	2b0c      	cmp	r3, #12
 80054c4:	d102      	bne.n	80054cc <send_cmd+0xb2>
 80054c6:	20ff      	movs	r0, #255	; 0xff
 80054c8:	f7ff feb4 	bl	8005234 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80054cc:	230a      	movs	r3, #10
 80054ce:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80054d0:	20ff      	movs	r0, #255	; 0xff
 80054d2:	f7ff feaf 	bl	8005234 <xchg_spi>
 80054d6:	4603      	mov	r3, r0
 80054d8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80054da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	da05      	bge.n	80054ee <send_cmd+0xd4>
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
 80054e4:	3b01      	subs	r3, #1
 80054e6:	73fb      	strb	r3, [r7, #15]
 80054e8:	7bfb      	ldrb	r3, [r7, #15]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f0      	bne.n	80054d0 <send_cmd+0xb6>

	return res;							/* Return received response */
 80054ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80054f8:	b590      	push	{r4, r7, lr}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	4603      	mov	r3, r0
 8005500:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8005502:	79fb      	ldrb	r3, [r7, #7]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <USER_SPI_initialize+0x14>
 8005508:	2301      	movs	r3, #1
 800550a:	e0d6      	b.n	80056ba <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800550c:	4b6d      	ldr	r3, [pc, #436]	; (80056c4 <USER_SPI_initialize+0x1cc>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	b2db      	uxtb	r3, r3
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <USER_SPI_initialize+0x2a>
 800551a:	4b6a      	ldr	r3, [pc, #424]	; (80056c4 <USER_SPI_initialize+0x1cc>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	b2db      	uxtb	r3, r3
 8005520:	e0cb      	b.n	80056ba <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8005522:	4b69      	ldr	r3, [pc, #420]	; (80056c8 <USER_SPI_initialize+0x1d0>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800552c:	4b66      	ldr	r3, [pc, #408]	; (80056c8 <USER_SPI_initialize+0x1d0>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8005534:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8005536:	230a      	movs	r3, #10
 8005538:	73fb      	strb	r3, [r7, #15]
 800553a:	e005      	b.n	8005548 <USER_SPI_initialize+0x50>
 800553c:	20ff      	movs	r0, #255	; 0xff
 800553e:	f7ff fe79 	bl	8005234 <xchg_spi>
 8005542:	7bfb      	ldrb	r3, [r7, #15]
 8005544:	3b01      	subs	r3, #1
 8005546:	73fb      	strb	r3, [r7, #15]
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1f6      	bne.n	800553c <USER_SPI_initialize+0x44>

	ty = 0;
 800554e:	2300      	movs	r3, #0
 8005550:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8005552:	2100      	movs	r1, #0
 8005554:	2000      	movs	r0, #0
 8005556:	f7ff ff60 	bl	800541a <send_cmd>
 800555a:	4603      	mov	r3, r0
 800555c:	2b01      	cmp	r3, #1
 800555e:	f040 808b 	bne.w	8005678 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8005562:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005566:	f7ff fe3b 	bl	80051e0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800556a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800556e:	2008      	movs	r0, #8
 8005570:	f7ff ff53 	bl	800541a <send_cmd>
 8005574:	4603      	mov	r3, r0
 8005576:	2b01      	cmp	r3, #1
 8005578:	d151      	bne.n	800561e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800557a:	2300      	movs	r3, #0
 800557c:	73fb      	strb	r3, [r7, #15]
 800557e:	e00d      	b.n	800559c <USER_SPI_initialize+0xa4>
 8005580:	7bfc      	ldrb	r4, [r7, #15]
 8005582:	20ff      	movs	r0, #255	; 0xff
 8005584:	f7ff fe56 	bl	8005234 <xchg_spi>
 8005588:	4603      	mov	r3, r0
 800558a:	461a      	mov	r2, r3
 800558c:	f107 0310 	add.w	r3, r7, #16
 8005590:	4423      	add	r3, r4
 8005592:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005596:	7bfb      	ldrb	r3, [r7, #15]
 8005598:	3301      	adds	r3, #1
 800559a:	73fb      	strb	r3, [r7, #15]
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	2b03      	cmp	r3, #3
 80055a0:	d9ee      	bls.n	8005580 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80055a2:	7abb      	ldrb	r3, [r7, #10]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d167      	bne.n	8005678 <USER_SPI_initialize+0x180>
 80055a8:	7afb      	ldrb	r3, [r7, #11]
 80055aa:	2baa      	cmp	r3, #170	; 0xaa
 80055ac:	d164      	bne.n	8005678 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80055ae:	bf00      	nop
 80055b0:	f7ff fe2a 	bl	8005208 <SPI_Timer_Status>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d007      	beq.n	80055ca <USER_SPI_initialize+0xd2>
 80055ba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80055be:	20a9      	movs	r0, #169	; 0xa9
 80055c0:	f7ff ff2b 	bl	800541a <send_cmd>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1f2      	bne.n	80055b0 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80055ca:	f7ff fe1d 	bl	8005208 <SPI_Timer_Status>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d051      	beq.n	8005678 <USER_SPI_initialize+0x180>
 80055d4:	2100      	movs	r1, #0
 80055d6:	203a      	movs	r0, #58	; 0x3a
 80055d8:	f7ff ff1f 	bl	800541a <send_cmd>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d14a      	bne.n	8005678 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80055e2:	2300      	movs	r3, #0
 80055e4:	73fb      	strb	r3, [r7, #15]
 80055e6:	e00d      	b.n	8005604 <USER_SPI_initialize+0x10c>
 80055e8:	7bfc      	ldrb	r4, [r7, #15]
 80055ea:	20ff      	movs	r0, #255	; 0xff
 80055ec:	f7ff fe22 	bl	8005234 <xchg_spi>
 80055f0:	4603      	mov	r3, r0
 80055f2:	461a      	mov	r2, r3
 80055f4:	f107 0310 	add.w	r3, r7, #16
 80055f8:	4423      	add	r3, r4
 80055fa:	f803 2c08 	strb.w	r2, [r3, #-8]
 80055fe:	7bfb      	ldrb	r3, [r7, #15]
 8005600:	3301      	adds	r3, #1
 8005602:	73fb      	strb	r3, [r7, #15]
 8005604:	7bfb      	ldrb	r3, [r7, #15]
 8005606:	2b03      	cmp	r3, #3
 8005608:	d9ee      	bls.n	80055e8 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800560a:	7a3b      	ldrb	r3, [r7, #8]
 800560c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <USER_SPI_initialize+0x120>
 8005614:	230c      	movs	r3, #12
 8005616:	e000      	b.n	800561a <USER_SPI_initialize+0x122>
 8005618:	2304      	movs	r3, #4
 800561a:	737b      	strb	r3, [r7, #13]
 800561c:	e02c      	b.n	8005678 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800561e:	2100      	movs	r1, #0
 8005620:	20a9      	movs	r0, #169	; 0xa9
 8005622:	f7ff fefa 	bl	800541a <send_cmd>
 8005626:	4603      	mov	r3, r0
 8005628:	2b01      	cmp	r3, #1
 800562a:	d804      	bhi.n	8005636 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800562c:	2302      	movs	r3, #2
 800562e:	737b      	strb	r3, [r7, #13]
 8005630:	23a9      	movs	r3, #169	; 0xa9
 8005632:	73bb      	strb	r3, [r7, #14]
 8005634:	e003      	b.n	800563e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8005636:	2301      	movs	r3, #1
 8005638:	737b      	strb	r3, [r7, #13]
 800563a:	2301      	movs	r3, #1
 800563c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800563e:	bf00      	nop
 8005640:	f7ff fde2 	bl	8005208 <SPI_Timer_Status>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d007      	beq.n	800565a <USER_SPI_initialize+0x162>
 800564a:	7bbb      	ldrb	r3, [r7, #14]
 800564c:	2100      	movs	r1, #0
 800564e:	4618      	mov	r0, r3
 8005650:	f7ff fee3 	bl	800541a <send_cmd>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f2      	bne.n	8005640 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800565a:	f7ff fdd5 	bl	8005208 <SPI_Timer_Status>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d007      	beq.n	8005674 <USER_SPI_initialize+0x17c>
 8005664:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005668:	2010      	movs	r0, #16
 800566a:	f7ff fed6 	bl	800541a <send_cmd>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <USER_SPI_initialize+0x180>
				ty = 0;
 8005674:	2300      	movs	r3, #0
 8005676:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8005678:	4a14      	ldr	r2, [pc, #80]	; (80056cc <USER_SPI_initialize+0x1d4>)
 800567a:	7b7b      	ldrb	r3, [r7, #13]
 800567c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800567e:	f7ff fe49 	bl	8005314 <despiselect>

	if (ty) {			/* OK */
 8005682:	7b7b      	ldrb	r3, [r7, #13]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d012      	beq.n	80056ae <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8005688:	4b0f      	ldr	r3, [pc, #60]	; (80056c8 <USER_SPI_initialize+0x1d0>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005692:	4b0d      	ldr	r3, [pc, #52]	; (80056c8 <USER_SPI_initialize+0x1d0>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0210 	orr.w	r2, r2, #16
 800569a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800569c:	4b09      	ldr	r3, [pc, #36]	; (80056c4 <USER_SPI_initialize+0x1cc>)
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	f023 0301 	bic.w	r3, r3, #1
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	4b06      	ldr	r3, [pc, #24]	; (80056c4 <USER_SPI_initialize+0x1cc>)
 80056aa:	701a      	strb	r2, [r3, #0]
 80056ac:	e002      	b.n	80056b4 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80056ae:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <USER_SPI_initialize+0x1cc>)
 80056b0:	2201      	movs	r2, #1
 80056b2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80056b4:	4b03      	ldr	r3, [pc, #12]	; (80056c4 <USER_SPI_initialize+0x1cc>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	b2db      	uxtb	r3, r3
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd90      	pop	{r4, r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20000020 	.word	0x20000020
 80056c8:	200050ac 	.word	0x200050ac
 80056cc:	200001ac 	.word	0x200001ac

080056d0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	4603      	mov	r3, r0
 80056d8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80056da:	79fb      	ldrb	r3, [r7, #7]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <USER_SPI_status+0x14>
 80056e0:	2301      	movs	r3, #1
 80056e2:	e002      	b.n	80056ea <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80056e4:	4b04      	ldr	r3, [pc, #16]	; (80056f8 <USER_SPI_status+0x28>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	b2db      	uxtb	r3, r3
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	20000020 	.word	0x20000020

080056fc <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	60b9      	str	r1, [r7, #8]
 8005704:	607a      	str	r2, [r7, #4]
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	4603      	mov	r3, r0
 800570a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800570c:	7bfb      	ldrb	r3, [r7, #15]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d102      	bne.n	8005718 <USER_SPI_read+0x1c>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <USER_SPI_read+0x20>
 8005718:	2304      	movs	r3, #4
 800571a:	e04d      	b.n	80057b8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800571c:	4b28      	ldr	r3, [pc, #160]	; (80057c0 <USER_SPI_read+0xc4>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	b2db      	uxtb	r3, r3
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <USER_SPI_read+0x32>
 800572a:	2303      	movs	r3, #3
 800572c:	e044      	b.n	80057b8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800572e:	4b25      	ldr	r3, [pc, #148]	; (80057c4 <USER_SPI_read+0xc8>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	f003 0308 	and.w	r3, r3, #8
 8005736:	2b00      	cmp	r3, #0
 8005738:	d102      	bne.n	8005740 <USER_SPI_read+0x44>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	025b      	lsls	r3, r3, #9
 800573e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d111      	bne.n	800576a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8005746:	6879      	ldr	r1, [r7, #4]
 8005748:	2011      	movs	r0, #17
 800574a:	f7ff fe66 	bl	800541a <send_cmd>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d129      	bne.n	80057a8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8005754:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005758:	68b8      	ldr	r0, [r7, #8]
 800575a:	f7ff fe03 	bl	8005364 <rcvr_datablock>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d021      	beq.n	80057a8 <USER_SPI_read+0xac>
			count = 0;
 8005764:	2300      	movs	r3, #0
 8005766:	603b      	str	r3, [r7, #0]
 8005768:	e01e      	b.n	80057a8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	2012      	movs	r0, #18
 800576e:	f7ff fe54 	bl	800541a <send_cmd>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d117      	bne.n	80057a8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8005778:	f44f 7100 	mov.w	r1, #512	; 0x200
 800577c:	68b8      	ldr	r0, [r7, #8]
 800577e:	f7ff fdf1 	bl	8005364 <rcvr_datablock>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00a      	beq.n	800579e <USER_SPI_read+0xa2>
				buff += 512;
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800578e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	3b01      	subs	r3, #1
 8005794:	603b      	str	r3, [r7, #0]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1ed      	bne.n	8005778 <USER_SPI_read+0x7c>
 800579c:	e000      	b.n	80057a0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800579e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80057a0:	2100      	movs	r1, #0
 80057a2:	200c      	movs	r0, #12
 80057a4:	f7ff fe39 	bl	800541a <send_cmd>
		}
	}
	despiselect();
 80057a8:	f7ff fdb4 	bl	8005314 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	bf14      	ite	ne
 80057b2:	2301      	movne	r3, #1
 80057b4:	2300      	moveq	r3, #0
 80057b6:	b2db      	uxtb	r3, r3
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	20000020 	.word	0x20000020
 80057c4:	200001ac 	.word	0x200001ac

080057c8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	607a      	str	r2, [r7, #4]
 80057d2:	603b      	str	r3, [r7, #0]
 80057d4:	4603      	mov	r3, r0
 80057d6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d102      	bne.n	80057e4 <USER_SPI_write+0x1c>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <USER_SPI_write+0x20>
 80057e4:	2304      	movs	r3, #4
 80057e6:	e063      	b.n	80058b0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80057e8:	4b33      	ldr	r3, [pc, #204]	; (80058b8 <USER_SPI_write+0xf0>)
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <USER_SPI_write+0x32>
 80057f6:	2303      	movs	r3, #3
 80057f8:	e05a      	b.n	80058b0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80057fa:	4b2f      	ldr	r3, [pc, #188]	; (80058b8 <USER_SPI_write+0xf0>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <USER_SPI_write+0x44>
 8005808:	2302      	movs	r3, #2
 800580a:	e051      	b.n	80058b0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800580c:	4b2b      	ldr	r3, [pc, #172]	; (80058bc <USER_SPI_write+0xf4>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	f003 0308 	and.w	r3, r3, #8
 8005814:	2b00      	cmp	r3, #0
 8005816:	d102      	bne.n	800581e <USER_SPI_write+0x56>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	025b      	lsls	r3, r3, #9
 800581c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d110      	bne.n	8005846 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8005824:	6879      	ldr	r1, [r7, #4]
 8005826:	2018      	movs	r0, #24
 8005828:	f7ff fdf7 	bl	800541a <send_cmd>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d136      	bne.n	80058a0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8005832:	21fe      	movs	r1, #254	; 0xfe
 8005834:	68b8      	ldr	r0, [r7, #8]
 8005836:	f7ff fdbe 	bl	80053b6 <xmit_datablock>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d02f      	beq.n	80058a0 <USER_SPI_write+0xd8>
			count = 0;
 8005840:	2300      	movs	r3, #0
 8005842:	603b      	str	r3, [r7, #0]
 8005844:	e02c      	b.n	80058a0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8005846:	4b1d      	ldr	r3, [pc, #116]	; (80058bc <USER_SPI_write+0xf4>)
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	f003 0306 	and.w	r3, r3, #6
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <USER_SPI_write+0x92>
 8005852:	6839      	ldr	r1, [r7, #0]
 8005854:	2097      	movs	r0, #151	; 0x97
 8005856:	f7ff fde0 	bl	800541a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800585a:	6879      	ldr	r1, [r7, #4]
 800585c:	2019      	movs	r0, #25
 800585e:	f7ff fddc 	bl	800541a <send_cmd>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d11b      	bne.n	80058a0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8005868:	21fc      	movs	r1, #252	; 0xfc
 800586a:	68b8      	ldr	r0, [r7, #8]
 800586c:	f7ff fda3 	bl	80053b6 <xmit_datablock>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <USER_SPI_write+0xc4>
				buff += 512;
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800587c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	3b01      	subs	r3, #1
 8005882:	603b      	str	r3, [r7, #0]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1ee      	bne.n	8005868 <USER_SPI_write+0xa0>
 800588a:	e000      	b.n	800588e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800588c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800588e:	21fd      	movs	r1, #253	; 0xfd
 8005890:	2000      	movs	r0, #0
 8005892:	f7ff fd90 	bl	80053b6 <xmit_datablock>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <USER_SPI_write+0xd8>
 800589c:	2301      	movs	r3, #1
 800589e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80058a0:	f7ff fd38 	bl	8005314 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	bf14      	ite	ne
 80058aa:	2301      	movne	r3, #1
 80058ac:	2300      	moveq	r3, #0
 80058ae:	b2db      	uxtb	r3, r3
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	20000020 	.word	0x20000020
 80058bc:	200001ac 	.word	0x200001ac

080058c0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b08c      	sub	sp, #48	; 0x30
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	4603      	mov	r3, r0
 80058c8:	603a      	str	r2, [r7, #0]
 80058ca:	71fb      	strb	r3, [r7, #7]
 80058cc:	460b      	mov	r3, r1
 80058ce:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80058d0:	79fb      	ldrb	r3, [r7, #7]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <USER_SPI_ioctl+0x1a>
 80058d6:	2304      	movs	r3, #4
 80058d8:	e15a      	b.n	8005b90 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80058da:	4baf      	ldr	r3, [pc, #700]	; (8005b98 <USER_SPI_ioctl+0x2d8>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <USER_SPI_ioctl+0x2c>
 80058e8:	2303      	movs	r3, #3
 80058ea:	e151      	b.n	8005b90 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80058f2:	79bb      	ldrb	r3, [r7, #6]
 80058f4:	2b04      	cmp	r3, #4
 80058f6:	f200 8136 	bhi.w	8005b66 <USER_SPI_ioctl+0x2a6>
 80058fa:	a201      	add	r2, pc, #4	; (adr r2, 8005900 <USER_SPI_ioctl+0x40>)
 80058fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005900:	08005915 	.word	0x08005915
 8005904:	08005929 	.word	0x08005929
 8005908:	08005b67 	.word	0x08005b67
 800590c:	080059d5 	.word	0x080059d5
 8005910:	08005acb 	.word	0x08005acb
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8005914:	f7ff fd0c 	bl	8005330 <spiselect>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 8127 	beq.w	8005b6e <USER_SPI_ioctl+0x2ae>
 8005920:	2300      	movs	r3, #0
 8005922:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005926:	e122      	b.n	8005b6e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005928:	2100      	movs	r1, #0
 800592a:	2009      	movs	r0, #9
 800592c:	f7ff fd75 	bl	800541a <send_cmd>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	f040 811d 	bne.w	8005b72 <USER_SPI_ioctl+0x2b2>
 8005938:	f107 030c 	add.w	r3, r7, #12
 800593c:	2110      	movs	r1, #16
 800593e:	4618      	mov	r0, r3
 8005940:	f7ff fd10 	bl	8005364 <rcvr_datablock>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	f000 8113 	beq.w	8005b72 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800594c:	7b3b      	ldrb	r3, [r7, #12]
 800594e:	099b      	lsrs	r3, r3, #6
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b01      	cmp	r3, #1
 8005954:	d111      	bne.n	800597a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8005956:	7d7b      	ldrb	r3, [r7, #21]
 8005958:	461a      	mov	r2, r3
 800595a:	7d3b      	ldrb	r3, [r7, #20]
 800595c:	021b      	lsls	r3, r3, #8
 800595e:	4413      	add	r3, r2
 8005960:	461a      	mov	r2, r3
 8005962:	7cfb      	ldrb	r3, [r7, #19]
 8005964:	041b      	lsls	r3, r3, #16
 8005966:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800596a:	4413      	add	r3, r2
 800596c:	3301      	adds	r3, #1
 800596e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	029a      	lsls	r2, r3, #10
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	e028      	b.n	80059cc <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800597a:	7c7b      	ldrb	r3, [r7, #17]
 800597c:	f003 030f 	and.w	r3, r3, #15
 8005980:	b2da      	uxtb	r2, r3
 8005982:	7dbb      	ldrb	r3, [r7, #22]
 8005984:	09db      	lsrs	r3, r3, #7
 8005986:	b2db      	uxtb	r3, r3
 8005988:	4413      	add	r3, r2
 800598a:	b2da      	uxtb	r2, r3
 800598c:	7d7b      	ldrb	r3, [r7, #21]
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	b2db      	uxtb	r3, r3
 8005992:	f003 0306 	and.w	r3, r3, #6
 8005996:	b2db      	uxtb	r3, r3
 8005998:	4413      	add	r3, r2
 800599a:	b2db      	uxtb	r3, r3
 800599c:	3302      	adds	r3, #2
 800599e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80059a2:	7d3b      	ldrb	r3, [r7, #20]
 80059a4:	099b      	lsrs	r3, r3, #6
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	461a      	mov	r2, r3
 80059aa:	7cfb      	ldrb	r3, [r7, #19]
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	441a      	add	r2, r3
 80059b0:	7cbb      	ldrb	r3, [r7, #18]
 80059b2:	029b      	lsls	r3, r3, #10
 80059b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059b8:	4413      	add	r3, r2
 80059ba:	3301      	adds	r3, #1
 80059bc:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80059be:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80059c2:	3b09      	subs	r3, #9
 80059c4:	69fa      	ldr	r2, [r7, #28]
 80059c6:	409a      	lsls	r2, r3
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80059d2:	e0ce      	b.n	8005b72 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80059d4:	4b71      	ldr	r3, [pc, #452]	; (8005b9c <USER_SPI_ioctl+0x2dc>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d031      	beq.n	8005a44 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80059e0:	2100      	movs	r1, #0
 80059e2:	208d      	movs	r0, #141	; 0x8d
 80059e4:	f7ff fd19 	bl	800541a <send_cmd>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f040 80c3 	bne.w	8005b76 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80059f0:	20ff      	movs	r0, #255	; 0xff
 80059f2:	f7ff fc1f 	bl	8005234 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80059f6:	f107 030c 	add.w	r3, r7, #12
 80059fa:	2110      	movs	r1, #16
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7ff fcb1 	bl	8005364 <rcvr_datablock>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 80b6 	beq.w	8005b76 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8005a0a:	2330      	movs	r3, #48	; 0x30
 8005a0c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005a10:	e007      	b.n	8005a22 <USER_SPI_ioctl+0x162>
 8005a12:	20ff      	movs	r0, #255	; 0xff
 8005a14:	f7ff fc0e 	bl	8005234 <xchg_spi>
 8005a18:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005a22:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1f3      	bne.n	8005a12 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8005a2a:	7dbb      	ldrb	r3, [r7, #22]
 8005a2c:	091b      	lsrs	r3, r3, #4
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	461a      	mov	r2, r3
 8005a32:	2310      	movs	r3, #16
 8005a34:	fa03 f202 	lsl.w	r2, r3, r2
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8005a42:	e098      	b.n	8005b76 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8005a44:	2100      	movs	r1, #0
 8005a46:	2009      	movs	r0, #9
 8005a48:	f7ff fce7 	bl	800541a <send_cmd>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f040 8091 	bne.w	8005b76 <USER_SPI_ioctl+0x2b6>
 8005a54:	f107 030c 	add.w	r3, r7, #12
 8005a58:	2110      	movs	r1, #16
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7ff fc82 	bl	8005364 <rcvr_datablock>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 8087 	beq.w	8005b76 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005a68:	4b4c      	ldr	r3, [pc, #304]	; (8005b9c <USER_SPI_ioctl+0x2dc>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d012      	beq.n	8005a9a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8005a74:	7dbb      	ldrb	r3, [r7, #22]
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005a7c:	7dfa      	ldrb	r2, [r7, #23]
 8005a7e:	09d2      	lsrs	r2, r2, #7
 8005a80:	b2d2      	uxtb	r2, r2
 8005a82:	4413      	add	r3, r2
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	7e7b      	ldrb	r3, [r7, #25]
 8005a88:	099b      	lsrs	r3, r3, #6
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a92:	461a      	mov	r2, r3
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	e013      	b.n	8005ac2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8005a9a:	7dbb      	ldrb	r3, [r7, #22]
 8005a9c:	109b      	asrs	r3, r3, #2
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	f003 031f 	and.w	r3, r3, #31
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	7dfa      	ldrb	r2, [r7, #23]
 8005aa8:	00d2      	lsls	r2, r2, #3
 8005aaa:	f002 0218 	and.w	r2, r2, #24
 8005aae:	7df9      	ldrb	r1, [r7, #23]
 8005ab0:	0949      	lsrs	r1, r1, #5
 8005ab2:	b2c9      	uxtb	r1, r1
 8005ab4:	440a      	add	r2, r1
 8005ab6:	3201      	adds	r2, #1
 8005ab8:	fb02 f303 	mul.w	r3, r2, r3
 8005abc:	461a      	mov	r2, r3
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005ac8:	e055      	b.n	8005b76 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005aca:	4b34      	ldr	r3, [pc, #208]	; (8005b9c <USER_SPI_ioctl+0x2dc>)
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	f003 0306 	and.w	r3, r3, #6
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d051      	beq.n	8005b7a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005ad6:	f107 020c 	add.w	r2, r7, #12
 8005ada:	79fb      	ldrb	r3, [r7, #7]
 8005adc:	210b      	movs	r1, #11
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7ff feee 	bl	80058c0 <USER_SPI_ioctl>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d149      	bne.n	8005b7e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005aea:	7b3b      	ldrb	r3, [r7, #12]
 8005aec:	099b      	lsrs	r3, r3, #6
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d104      	bne.n	8005afe <USER_SPI_ioctl+0x23e>
 8005af4:	7dbb      	ldrb	r3, [r7, #22]
 8005af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d041      	beq.n	8005b82 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	623b      	str	r3, [r7, #32]
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8005b0e:	4b23      	ldr	r3, [pc, #140]	; (8005b9c <USER_SPI_ioctl+0x2dc>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	f003 0308 	and.w	r3, r3, #8
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d105      	bne.n	8005b26 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8005b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1c:	025b      	lsls	r3, r3, #9
 8005b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	025b      	lsls	r3, r3, #9
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8005b26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b28:	2020      	movs	r0, #32
 8005b2a:	f7ff fc76 	bl	800541a <send_cmd>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d128      	bne.n	8005b86 <USER_SPI_ioctl+0x2c6>
 8005b34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b36:	2021      	movs	r0, #33	; 0x21
 8005b38:	f7ff fc6f 	bl	800541a <send_cmd>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d121      	bne.n	8005b86 <USER_SPI_ioctl+0x2c6>
 8005b42:	2100      	movs	r1, #0
 8005b44:	2026      	movs	r0, #38	; 0x26
 8005b46:	f7ff fc68 	bl	800541a <send_cmd>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d11a      	bne.n	8005b86 <USER_SPI_ioctl+0x2c6>
 8005b50:	f247 5030 	movw	r0, #30000	; 0x7530
 8005b54:	f7ff fbbb 	bl	80052ce <wait_ready>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d013      	beq.n	8005b86 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8005b64:	e00f      	b.n	8005b86 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8005b66:	2304      	movs	r3, #4
 8005b68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005b6c:	e00c      	b.n	8005b88 <USER_SPI_ioctl+0x2c8>
		break;
 8005b6e:	bf00      	nop
 8005b70:	e00a      	b.n	8005b88 <USER_SPI_ioctl+0x2c8>
		break;
 8005b72:	bf00      	nop
 8005b74:	e008      	b.n	8005b88 <USER_SPI_ioctl+0x2c8>
		break;
 8005b76:	bf00      	nop
 8005b78:	e006      	b.n	8005b88 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005b7a:	bf00      	nop
 8005b7c:	e004      	b.n	8005b88 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005b7e:	bf00      	nop
 8005b80:	e002      	b.n	8005b88 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005b82:	bf00      	nop
 8005b84:	e000      	b.n	8005b88 <USER_SPI_ioctl+0x2c8>
		break;
 8005b86:	bf00      	nop
	}

	despiselect();
 8005b88:	f7ff fbc4 	bl	8005314 <despiselect>

	return res;
 8005b8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3730      	adds	r7, #48	; 0x30
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	20000020 	.word	0x20000020
 8005b9c:	200001ac 	.word	0x200001ac

08005ba0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005baa:	79fb      	ldrb	r3, [r7, #7]
 8005bac:	4a08      	ldr	r2, [pc, #32]	; (8005bd0 <disk_status+0x30>)
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	79fa      	ldrb	r2, [r7, #7]
 8005bb8:	4905      	ldr	r1, [pc, #20]	; (8005bd0 <disk_status+0x30>)
 8005bba:	440a      	add	r2, r1
 8005bbc:	7a12      	ldrb	r2, [r2, #8]
 8005bbe:	4610      	mov	r0, r2
 8005bc0:	4798      	blx	r3
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	200001d8 	.word	0x200001d8

08005bd4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	4603      	mov	r3, r0
 8005bdc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005be2:	79fb      	ldrb	r3, [r7, #7]
 8005be4:	4a0d      	ldr	r2, [pc, #52]	; (8005c1c <disk_initialize+0x48>)
 8005be6:	5cd3      	ldrb	r3, [r2, r3]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d111      	bne.n	8005c10 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005bec:	79fb      	ldrb	r3, [r7, #7]
 8005bee:	4a0b      	ldr	r2, [pc, #44]	; (8005c1c <disk_initialize+0x48>)
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005bf4:	79fb      	ldrb	r3, [r7, #7]
 8005bf6:	4a09      	ldr	r2, [pc, #36]	; (8005c1c <disk_initialize+0x48>)
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	79fa      	ldrb	r2, [r7, #7]
 8005c02:	4906      	ldr	r1, [pc, #24]	; (8005c1c <disk_initialize+0x48>)
 8005c04:	440a      	add	r2, r1
 8005c06:	7a12      	ldrb	r2, [r2, #8]
 8005c08:	4610      	mov	r0, r2
 8005c0a:	4798      	blx	r3
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	200001d8 	.word	0x200001d8

08005c20 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005c20:	b590      	push	{r4, r7, lr}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60b9      	str	r1, [r7, #8]
 8005c28:	607a      	str	r2, [r7, #4]
 8005c2a:	603b      	str	r3, [r7, #0]
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
 8005c32:	4a0a      	ldr	r2, [pc, #40]	; (8005c5c <disk_read+0x3c>)
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	689c      	ldr	r4, [r3, #8]
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
 8005c3e:	4a07      	ldr	r2, [pc, #28]	; (8005c5c <disk_read+0x3c>)
 8005c40:	4413      	add	r3, r2
 8005c42:	7a18      	ldrb	r0, [r3, #8]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	68b9      	ldr	r1, [r7, #8]
 8005c4a:	47a0      	blx	r4
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	371c      	adds	r7, #28
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd90      	pop	{r4, r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	200001d8 	.word	0x200001d8

08005c60 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005c60:	b590      	push	{r4, r7, lr}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60b9      	str	r1, [r7, #8]
 8005c68:	607a      	str	r2, [r7, #4]
 8005c6a:	603b      	str	r3, [r7, #0]
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005c70:	7bfb      	ldrb	r3, [r7, #15]
 8005c72:	4a0a      	ldr	r2, [pc, #40]	; (8005c9c <disk_write+0x3c>)
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	68dc      	ldr	r4, [r3, #12]
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
 8005c7e:	4a07      	ldr	r2, [pc, #28]	; (8005c9c <disk_write+0x3c>)
 8005c80:	4413      	add	r3, r2
 8005c82:	7a18      	ldrb	r0, [r3, #8]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	68b9      	ldr	r1, [r7, #8]
 8005c8a:	47a0      	blx	r4
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	371c      	adds	r7, #28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd90      	pop	{r4, r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	200001d8 	.word	0x200001d8

08005ca0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	603a      	str	r2, [r7, #0]
 8005caa:	71fb      	strb	r3, [r7, #7]
 8005cac:	460b      	mov	r3, r1
 8005cae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005cb0:	79fb      	ldrb	r3, [r7, #7]
 8005cb2:	4a09      	ldr	r2, [pc, #36]	; (8005cd8 <disk_ioctl+0x38>)
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	79fa      	ldrb	r2, [r7, #7]
 8005cbe:	4906      	ldr	r1, [pc, #24]	; (8005cd8 <disk_ioctl+0x38>)
 8005cc0:	440a      	add	r2, r1
 8005cc2:	7a10      	ldrb	r0, [r2, #8]
 8005cc4:	79b9      	ldrb	r1, [r7, #6]
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	4798      	blx	r3
 8005cca:	4603      	mov	r3, r0
 8005ccc:	73fb      	strb	r3, [r7, #15]
  return res;
 8005cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	200001d8 	.word	0x200001d8

08005cdc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005cec:	89fb      	ldrh	r3, [r7, #14]
 8005cee:	021b      	lsls	r3, r3, #8
 8005cf0:	b21a      	sxth	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	b21b      	sxth	r3, r3
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	b21b      	sxth	r3, r3
 8005cfc:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005cfe:	89fb      	ldrh	r3, [r7, #14]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	3303      	adds	r3, #3
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	021b      	lsls	r3, r3, #8
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	3202      	adds	r2, #2
 8005d24:	7812      	ldrb	r2, [r2, #0]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	021b      	lsls	r3, r3, #8
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	3201      	adds	r2, #1
 8005d32:	7812      	ldrb	r2, [r2, #0]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	021b      	lsls	r3, r3, #8
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	7812      	ldrb	r2, [r2, #0]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]
	return rv;
 8005d44:	68fb      	ldr	r3, [r7, #12]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	607a      	str	r2, [r7, #4]
 8005d64:	887a      	ldrh	r2, [r7, #2]
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	887b      	ldrh	r3, [r7, #2]
 8005d6c:	0a1b      	lsrs	r3, r3, #8
 8005d6e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	607a      	str	r2, [r7, #4]
 8005d76:	887a      	ldrh	r2, [r7, #2]
 8005d78:	b2d2      	uxtb	r2, r2
 8005d7a:	701a      	strb	r2, [r3, #0]
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	1c5a      	adds	r2, r3, #1
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	b2d2      	uxtb	r2, r2
 8005d9c:	701a      	strb	r2, [r3, #0]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	0a1b      	lsrs	r3, r3, #8
 8005da2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	1c5a      	adds	r2, r3, #1
 8005da8:	607a      	str	r2, [r7, #4]
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	b2d2      	uxtb	r2, r2
 8005dae:	701a      	strb	r2, [r3, #0]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	0a1b      	lsrs	r3, r3, #8
 8005db4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	1c5a      	adds	r2, r3, #1
 8005dba:	607a      	str	r2, [r7, #4]
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	b2d2      	uxtb	r2, r2
 8005dc0:	701a      	strb	r2, [r3, #0]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	0a1b      	lsrs	r3, r3, #8
 8005dc6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	607a      	str	r2, [r7, #4]
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	701a      	strb	r2, [r3, #0]
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00d      	beq.n	8005e16 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	1c53      	adds	r3, r2, #1
 8005dfe:	613b      	str	r3, [r7, #16]
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	1c59      	adds	r1, r3, #1
 8005e04:	6179      	str	r1, [r7, #20]
 8005e06:	7812      	ldrb	r2, [r2, #0]
 8005e08:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	607b      	str	r3, [r7, #4]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1f1      	bne.n	8005dfa <mem_cpy+0x1a>
	}
}
 8005e16:	bf00      	nop
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005e22:	b480      	push	{r7}
 8005e24:	b087      	sub	sp, #28
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	60f8      	str	r0, [r7, #12]
 8005e2a:	60b9      	str	r1, [r7, #8]
 8005e2c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	617a      	str	r2, [r7, #20]
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	b2d2      	uxtb	r2, r2
 8005e3c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	3b01      	subs	r3, #1
 8005e42:	607b      	str	r3, [r7, #4]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1f3      	bne.n	8005e32 <mem_set+0x10>
}
 8005e4a:	bf00      	nop
 8005e4c:	bf00      	nop
 8005e4e:	371c      	adds	r7, #28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005e58:	b480      	push	{r7}
 8005e5a:	b089      	sub	sp, #36	; 0x24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	61fb      	str	r3, [r7, #28]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	61fa      	str	r2, [r7, #28]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	4619      	mov	r1, r3
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	1c5a      	adds	r2, r3, #1
 8005e7e:	61ba      	str	r2, [r7, #24]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	1acb      	subs	r3, r1, r3
 8005e84:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	607b      	str	r3, [r7, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <mem_cmp+0x40>
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0eb      	beq.n	8005e70 <mem_cmp+0x18>

	return r;
 8005e98:	697b      	ldr	r3, [r7, #20]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3724      	adds	r7, #36	; 0x24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005eb0:	e002      	b.n	8005eb8 <chk_chr+0x12>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	607b      	str	r3, [r7, #4]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d005      	beq.n	8005ecc <chk_chr+0x26>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d1f2      	bne.n	8005eb2 <chk_chr+0xc>
	return *str;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	781b      	ldrb	r3, [r3, #0]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d009      	beq.n	8005efe <lock_fs+0x22>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f002 fdd4 	bl	8008a9c <ff_req_grant>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <lock_fs+0x22>
 8005efa:	2301      	movs	r3, #1
 8005efc:	e000      	b.n	8005f00 <lock_fs+0x24>
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00d      	beq.n	8005f36 <unlock_fs+0x2e>
 8005f1a:	78fb      	ldrb	r3, [r7, #3]
 8005f1c:	2b0c      	cmp	r3, #12
 8005f1e:	d00a      	beq.n	8005f36 <unlock_fs+0x2e>
 8005f20:	78fb      	ldrb	r3, [r7, #3]
 8005f22:	2b0b      	cmp	r3, #11
 8005f24:	d007      	beq.n	8005f36 <unlock_fs+0x2e>
 8005f26:	78fb      	ldrb	r3, [r7, #3]
 8005f28:	2b0f      	cmp	r3, #15
 8005f2a:	d004      	beq.n	8005f36 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	4618      	mov	r0, r3
 8005f32:	f002 fdc8 	bl	8008ac6 <ff_rel_grant>
	}
}
 8005f36:	bf00      	nop
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
	...

08005f40 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60bb      	str	r3, [r7, #8]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	e029      	b.n	8005fa8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005f54:	4a27      	ldr	r2, [pc, #156]	; (8005ff4 <chk_lock+0xb4>)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	4413      	add	r3, r2
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d01d      	beq.n	8005f9e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005f62:	4a24      	ldr	r2, [pc, #144]	; (8005ff4 <chk_lock+0xb4>)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	011b      	lsls	r3, r3, #4
 8005f68:	4413      	add	r3, r2
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d116      	bne.n	8005fa2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005f74:	4a1f      	ldr	r2, [pc, #124]	; (8005ff4 <chk_lock+0xb4>)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	011b      	lsls	r3, r3, #4
 8005f7a:	4413      	add	r3, r2
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d10c      	bne.n	8005fa2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005f88:	4a1a      	ldr	r2, [pc, #104]	; (8005ff4 <chk_lock+0xb4>)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	4413      	add	r3, r2
 8005f90:	3308      	adds	r3, #8
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d102      	bne.n	8005fa2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005f9c:	e007      	b.n	8005fae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d9d2      	bls.n	8005f54 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d109      	bne.n	8005fc8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d102      	bne.n	8005fc0 <chk_lock+0x80>
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d101      	bne.n	8005fc4 <chk_lock+0x84>
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	e010      	b.n	8005fe6 <chk_lock+0xa6>
 8005fc4:	2312      	movs	r3, #18
 8005fc6:	e00e      	b.n	8005fe6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d108      	bne.n	8005fe0 <chk_lock+0xa0>
 8005fce:	4a09      	ldr	r2, [pc, #36]	; (8005ff4 <chk_lock+0xb4>)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	011b      	lsls	r3, r3, #4
 8005fd4:	4413      	add	r3, r2
 8005fd6:	330c      	adds	r3, #12
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fde:	d101      	bne.n	8005fe4 <chk_lock+0xa4>
 8005fe0:	2310      	movs	r3, #16
 8005fe2:	e000      	b.n	8005fe6 <chk_lock+0xa6>
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	200001b8 	.word	0x200001b8

08005ff8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005ffe:	2300      	movs	r3, #0
 8006000:	607b      	str	r3, [r7, #4]
 8006002:	e002      	b.n	800600a <enq_lock+0x12>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	3301      	adds	r3, #1
 8006008:	607b      	str	r3, [r7, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d806      	bhi.n	800601e <enq_lock+0x26>
 8006010:	4a09      	ldr	r2, [pc, #36]	; (8006038 <enq_lock+0x40>)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	4413      	add	r3, r2
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1f2      	bne.n	8006004 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b02      	cmp	r3, #2
 8006022:	bf14      	ite	ne
 8006024:	2301      	movne	r3, #1
 8006026:	2300      	moveq	r3, #0
 8006028:	b2db      	uxtb	r3, r3
}
 800602a:	4618      	mov	r0, r3
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	200001b8 	.word	0x200001b8

0800603c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006046:	2300      	movs	r3, #0
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	e01f      	b.n	800608c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800604c:	4a41      	ldr	r2, [pc, #260]	; (8006154 <inc_lock+0x118>)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	011b      	lsls	r3, r3, #4
 8006052:	4413      	add	r3, r2
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	429a      	cmp	r2, r3
 800605c:	d113      	bne.n	8006086 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800605e:	4a3d      	ldr	r2, [pc, #244]	; (8006154 <inc_lock+0x118>)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	011b      	lsls	r3, r3, #4
 8006064:	4413      	add	r3, r2
 8006066:	3304      	adds	r3, #4
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800606e:	429a      	cmp	r2, r3
 8006070:	d109      	bne.n	8006086 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006072:	4a38      	ldr	r2, [pc, #224]	; (8006154 <inc_lock+0x118>)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	4413      	add	r3, r2
 800607a:	3308      	adds	r3, #8
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006082:	429a      	cmp	r2, r3
 8006084:	d006      	beq.n	8006094 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	3301      	adds	r3, #1
 800608a:	60fb      	str	r3, [r7, #12]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d9dc      	bls.n	800604c <inc_lock+0x10>
 8006092:	e000      	b.n	8006096 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006094:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b02      	cmp	r3, #2
 800609a:	d132      	bne.n	8006102 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800609c:	2300      	movs	r3, #0
 800609e:	60fb      	str	r3, [r7, #12]
 80060a0:	e002      	b.n	80060a8 <inc_lock+0x6c>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3301      	adds	r3, #1
 80060a6:	60fb      	str	r3, [r7, #12]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d806      	bhi.n	80060bc <inc_lock+0x80>
 80060ae:	4a29      	ldr	r2, [pc, #164]	; (8006154 <inc_lock+0x118>)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	011b      	lsls	r3, r3, #4
 80060b4:	4413      	add	r3, r2
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1f2      	bne.n	80060a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d101      	bne.n	80060c6 <inc_lock+0x8a>
 80060c2:	2300      	movs	r3, #0
 80060c4:	e040      	b.n	8006148 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	4922      	ldr	r1, [pc, #136]	; (8006154 <inc_lock+0x118>)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	440b      	add	r3, r1
 80060d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	491e      	ldr	r1, [pc, #120]	; (8006154 <inc_lock+0x118>)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	011b      	lsls	r3, r3, #4
 80060de:	440b      	add	r3, r1
 80060e0:	3304      	adds	r3, #4
 80060e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	695a      	ldr	r2, [r3, #20]
 80060e8:	491a      	ldr	r1, [pc, #104]	; (8006154 <inc_lock+0x118>)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	011b      	lsls	r3, r3, #4
 80060ee:	440b      	add	r3, r1
 80060f0:	3308      	adds	r3, #8
 80060f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80060f4:	4a17      	ldr	r2, [pc, #92]	; (8006154 <inc_lock+0x118>)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	011b      	lsls	r3, r3, #4
 80060fa:	4413      	add	r3, r2
 80060fc:	330c      	adds	r3, #12
 80060fe:	2200      	movs	r2, #0
 8006100:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d009      	beq.n	800611c <inc_lock+0xe0>
 8006108:	4a12      	ldr	r2, [pc, #72]	; (8006154 <inc_lock+0x118>)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	011b      	lsls	r3, r3, #4
 800610e:	4413      	add	r3, r2
 8006110:	330c      	adds	r3, #12
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <inc_lock+0xe0>
 8006118:	2300      	movs	r3, #0
 800611a:	e015      	b.n	8006148 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d108      	bne.n	8006134 <inc_lock+0xf8>
 8006122:	4a0c      	ldr	r2, [pc, #48]	; (8006154 <inc_lock+0x118>)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	4413      	add	r3, r2
 800612a:	330c      	adds	r3, #12
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	3301      	adds	r3, #1
 8006130:	b29a      	uxth	r2, r3
 8006132:	e001      	b.n	8006138 <inc_lock+0xfc>
 8006134:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006138:	4906      	ldr	r1, [pc, #24]	; (8006154 <inc_lock+0x118>)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	440b      	add	r3, r1
 8006140:	330c      	adds	r3, #12
 8006142:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	3301      	adds	r3, #1
}
 8006148:	4618      	mov	r0, r3
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	200001b8 	.word	0x200001b8

08006158 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3b01      	subs	r3, #1
 8006164:	607b      	str	r3, [r7, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d825      	bhi.n	80061b8 <dec_lock+0x60>
		n = Files[i].ctr;
 800616c:	4a17      	ldr	r2, [pc, #92]	; (80061cc <dec_lock+0x74>)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	011b      	lsls	r3, r3, #4
 8006172:	4413      	add	r3, r2
 8006174:	330c      	adds	r3, #12
 8006176:	881b      	ldrh	r3, [r3, #0]
 8006178:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800617a:	89fb      	ldrh	r3, [r7, #14]
 800617c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006180:	d101      	bne.n	8006186 <dec_lock+0x2e>
 8006182:	2300      	movs	r3, #0
 8006184:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006186:	89fb      	ldrh	r3, [r7, #14]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d002      	beq.n	8006192 <dec_lock+0x3a>
 800618c:	89fb      	ldrh	r3, [r7, #14]
 800618e:	3b01      	subs	r3, #1
 8006190:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006192:	4a0e      	ldr	r2, [pc, #56]	; (80061cc <dec_lock+0x74>)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	011b      	lsls	r3, r3, #4
 8006198:	4413      	add	r3, r2
 800619a:	330c      	adds	r3, #12
 800619c:	89fa      	ldrh	r2, [r7, #14]
 800619e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80061a0:	89fb      	ldrh	r3, [r7, #14]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d105      	bne.n	80061b2 <dec_lock+0x5a>
 80061a6:	4a09      	ldr	r2, [pc, #36]	; (80061cc <dec_lock+0x74>)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	011b      	lsls	r3, r3, #4
 80061ac:	4413      	add	r3, r2
 80061ae:	2200      	movs	r2, #0
 80061b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	737b      	strb	r3, [r7, #13]
 80061b6:	e001      	b.n	80061bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80061b8:	2302      	movs	r3, #2
 80061ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80061bc:	7b7b      	ldrb	r3, [r7, #13]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	200001b8 	.word	0x200001b8

080061d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80061d8:	2300      	movs	r3, #0
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	e010      	b.n	8006200 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80061de:	4a0d      	ldr	r2, [pc, #52]	; (8006214 <clear_lock+0x44>)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	4413      	add	r3, r2
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d105      	bne.n	80061fa <clear_lock+0x2a>
 80061ee:	4a09      	ldr	r2, [pc, #36]	; (8006214 <clear_lock+0x44>)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	011b      	lsls	r3, r3, #4
 80061f4:	4413      	add	r3, r2
 80061f6:	2200      	movs	r2, #0
 80061f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	3301      	adds	r3, #1
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d9eb      	bls.n	80061de <clear_lock+0xe>
	}
}
 8006206:	bf00      	nop
 8006208:	bf00      	nop
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	200001b8 	.word	0x200001b8

08006218 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	78db      	ldrb	r3, [r3, #3]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d034      	beq.n	8006296 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006230:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	7858      	ldrb	r0, [r3, #1]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800623c:	2301      	movs	r3, #1
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	f7ff fd0e 	bl	8005c60 <disk_write>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d002      	beq.n	8006250 <sync_window+0x38>
			res = FR_DISK_ERR;
 800624a:	2301      	movs	r3, #1
 800624c:	73fb      	strb	r3, [r7, #15]
 800624e:	e022      	b.n	8006296 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	1ad2      	subs	r2, r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	429a      	cmp	r2, r3
 8006264:	d217      	bcs.n	8006296 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	789b      	ldrb	r3, [r3, #2]
 800626a:	613b      	str	r3, [r7, #16]
 800626c:	e010      	b.n	8006290 <sync_window+0x78>
					wsect += fs->fsize;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	4413      	add	r3, r2
 8006276:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	7858      	ldrb	r0, [r3, #1]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006282:	2301      	movs	r3, #1
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	f7ff fceb 	bl	8005c60 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	3b01      	subs	r3, #1
 800628e:	613b      	str	r3, [r7, #16]
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d8eb      	bhi.n	800626e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006296:	7bfb      	ldrb	r3, [r7, #15]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3718      	adds	r7, #24
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d01b      	beq.n	80062f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7ff ffad 	bl	8006218 <sync_window>
 80062be:	4603      	mov	r3, r0
 80062c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80062c2:	7bfb      	ldrb	r3, [r7, #15]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d113      	bne.n	80062f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	7858      	ldrb	r0, [r3, #1]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80062d2:	2301      	movs	r3, #1
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	f7ff fca3 	bl	8005c20 <disk_read>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d004      	beq.n	80062ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80062e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
	...

080062fc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7ff ff87 	bl	8006218 <sync_window>
 800630a:	4603      	mov	r3, r0
 800630c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800630e:	7bfb      	ldrb	r3, [r7, #15]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d158      	bne.n	80063c6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	2b03      	cmp	r3, #3
 800631a:	d148      	bne.n	80063ae <sync_fs+0xb2>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	791b      	ldrb	r3, [r3, #4]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d144      	bne.n	80063ae <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	3334      	adds	r3, #52	; 0x34
 8006328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800632c:	2100      	movs	r1, #0
 800632e:	4618      	mov	r0, r3
 8006330:	f7ff fd77 	bl	8005e22 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	3334      	adds	r3, #52	; 0x34
 8006338:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800633c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006340:	4618      	mov	r0, r3
 8006342:	f7ff fd06 	bl	8005d52 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	3334      	adds	r3, #52	; 0x34
 800634a:	4921      	ldr	r1, [pc, #132]	; (80063d0 <sync_fs+0xd4>)
 800634c:	4618      	mov	r0, r3
 800634e:	f7ff fd1b 	bl	8005d88 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	3334      	adds	r3, #52	; 0x34
 8006356:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800635a:	491e      	ldr	r1, [pc, #120]	; (80063d4 <sync_fs+0xd8>)
 800635c:	4618      	mov	r0, r3
 800635e:	f7ff fd13 	bl	8005d88 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	3334      	adds	r3, #52	; 0x34
 8006366:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	4619      	mov	r1, r3
 8006370:	4610      	mov	r0, r2
 8006372:	f7ff fd09 	bl	8005d88 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	3334      	adds	r3, #52	; 0x34
 800637a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	4619      	mov	r1, r3
 8006384:	4610      	mov	r0, r2
 8006386:	f7ff fcff 	bl	8005d88 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	7858      	ldrb	r0, [r3, #1]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063a2:	2301      	movs	r3, #1
 80063a4:	f7ff fc5c 	bl	8005c60 <disk_write>
			fs->fsi_flag = 0;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	785b      	ldrb	r3, [r3, #1]
 80063b2:	2200      	movs	r2, #0
 80063b4:	2100      	movs	r1, #0
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7ff fc72 	bl	8005ca0 <disk_ioctl>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <sync_fs+0xca>
 80063c2:	2301      	movs	r3, #1
 80063c4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	41615252 	.word	0x41615252
 80063d4:	61417272 	.word	0x61417272

080063d8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	3b02      	subs	r3, #2
 80063e6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	3b02      	subs	r3, #2
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d301      	bcc.n	80063f8 <clust2sect+0x20>
 80063f4:	2300      	movs	r3, #0
 80063f6:	e008      	b.n	800640a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	895b      	ldrh	r3, [r3, #10]
 80063fc:	461a      	mov	r2, r3
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	fb03 f202 	mul.w	r2, r3, r2
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	4413      	add	r3, r2
}
 800640a:	4618      	mov	r0, r3
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b086      	sub	sp, #24
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d904      	bls.n	8006436 <get_fat+0x20>
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	429a      	cmp	r2, r3
 8006434:	d302      	bcc.n	800643c <get_fat+0x26>
		val = 1;	/* Internal error */
 8006436:	2301      	movs	r3, #1
 8006438:	617b      	str	r3, [r7, #20]
 800643a:	e08f      	b.n	800655c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800643c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006440:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2b03      	cmp	r3, #3
 8006448:	d062      	beq.n	8006510 <get_fat+0xfa>
 800644a:	2b03      	cmp	r3, #3
 800644c:	dc7c      	bgt.n	8006548 <get_fat+0x132>
 800644e:	2b01      	cmp	r3, #1
 8006450:	d002      	beq.n	8006458 <get_fat+0x42>
 8006452:	2b02      	cmp	r3, #2
 8006454:	d042      	beq.n	80064dc <get_fat+0xc6>
 8006456:	e077      	b.n	8006548 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	60fb      	str	r3, [r7, #12]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	085b      	lsrs	r3, r3, #1
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	4413      	add	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	0a5b      	lsrs	r3, r3, #9
 800646e:	4413      	add	r3, r2
 8006470:	4619      	mov	r1, r3
 8006472:	6938      	ldr	r0, [r7, #16]
 8006474:	f7ff ff14 	bl	80062a0 <move_window>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d167      	bne.n	800654e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	1c5a      	adds	r2, r3, #1
 8006482:	60fa      	str	r2, [r7, #12]
 8006484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	4413      	add	r3, r2
 800648c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006490:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	0a5b      	lsrs	r3, r3, #9
 800649a:	4413      	add	r3, r2
 800649c:	4619      	mov	r1, r3
 800649e:	6938      	ldr	r0, [r7, #16]
 80064a0:	f7ff fefe 	bl	80062a0 <move_window>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d153      	bne.n	8006552 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	4413      	add	r3, r2
 80064b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80064b8:	021b      	lsls	r3, r3, #8
 80064ba:	461a      	mov	r2, r3
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	4313      	orrs	r3, r2
 80064c0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	f003 0301 	and.w	r3, r3, #1
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <get_fat+0xbc>
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	091b      	lsrs	r3, r3, #4
 80064d0:	e002      	b.n	80064d8 <get_fat+0xc2>
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064d8:	617b      	str	r3, [r7, #20]
			break;
 80064da:	e03f      	b.n	800655c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	0a1b      	lsrs	r3, r3, #8
 80064e4:	4413      	add	r3, r2
 80064e6:	4619      	mov	r1, r3
 80064e8:	6938      	ldr	r0, [r7, #16]
 80064ea:	f7ff fed9 	bl	80062a0 <move_window>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d130      	bne.n	8006556 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006502:	4413      	add	r3, r2
 8006504:	4618      	mov	r0, r3
 8006506:	f7ff fbe9 	bl	8005cdc <ld_word>
 800650a:	4603      	mov	r3, r0
 800650c:	617b      	str	r3, [r7, #20]
			break;
 800650e:	e025      	b.n	800655c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	09db      	lsrs	r3, r3, #7
 8006518:	4413      	add	r3, r2
 800651a:	4619      	mov	r1, r3
 800651c:	6938      	ldr	r0, [r7, #16]
 800651e:	f7ff febf 	bl	80062a0 <move_window>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d118      	bne.n	800655a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006536:	4413      	add	r3, r2
 8006538:	4618      	mov	r0, r3
 800653a:	f7ff fbe7 	bl	8005d0c <ld_dword>
 800653e:	4603      	mov	r3, r0
 8006540:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006544:	617b      	str	r3, [r7, #20]
			break;
 8006546:	e009      	b.n	800655c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006548:	2301      	movs	r3, #1
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	e006      	b.n	800655c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800654e:	bf00      	nop
 8006550:	e004      	b.n	800655c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006552:	bf00      	nop
 8006554:	e002      	b.n	800655c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006556:	bf00      	nop
 8006558:	e000      	b.n	800655c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800655a:	bf00      	nop
		}
	}

	return val;
 800655c:	697b      	ldr	r3, [r7, #20]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3718      	adds	r7, #24
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006566:	b590      	push	{r4, r7, lr}
 8006568:	b089      	sub	sp, #36	; 0x24
 800656a:	af00      	add	r7, sp, #0
 800656c:	60f8      	str	r0, [r7, #12]
 800656e:	60b9      	str	r1, [r7, #8]
 8006570:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006572:	2302      	movs	r3, #2
 8006574:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	2b01      	cmp	r3, #1
 800657a:	f240 80d2 	bls.w	8006722 <put_fat+0x1bc>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	429a      	cmp	r2, r3
 8006586:	f080 80cc 	bcs.w	8006722 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	2b03      	cmp	r3, #3
 8006590:	f000 8096 	beq.w	80066c0 <put_fat+0x15a>
 8006594:	2b03      	cmp	r3, #3
 8006596:	f300 80cd 	bgt.w	8006734 <put_fat+0x1ce>
 800659a:	2b01      	cmp	r3, #1
 800659c:	d002      	beq.n	80065a4 <put_fat+0x3e>
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d06e      	beq.n	8006680 <put_fat+0x11a>
 80065a2:	e0c7      	b.n	8006734 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	61bb      	str	r3, [r7, #24]
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	085b      	lsrs	r3, r3, #1
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	4413      	add	r3, r2
 80065b0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	0a5b      	lsrs	r3, r3, #9
 80065ba:	4413      	add	r3, r2
 80065bc:	4619      	mov	r1, r3
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f7ff fe6e 	bl	80062a0 <move_window>
 80065c4:	4603      	mov	r3, r0
 80065c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80065c8:	7ffb      	ldrb	r3, [r7, #31]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f040 80ab 	bne.w	8006726 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	1c59      	adds	r1, r3, #1
 80065da:	61b9      	str	r1, [r7, #24]
 80065dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065e0:	4413      	add	r3, r2
 80065e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00d      	beq.n	800660a <put_fat+0xa4>
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	b25b      	sxtb	r3, r3
 80065f4:	f003 030f 	and.w	r3, r3, #15
 80065f8:	b25a      	sxtb	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	011b      	lsls	r3, r3, #4
 8006600:	b25b      	sxtb	r3, r3
 8006602:	4313      	orrs	r3, r2
 8006604:	b25b      	sxtb	r3, r3
 8006606:	b2db      	uxtb	r3, r3
 8006608:	e001      	b.n	800660e <put_fat+0xa8>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	b2db      	uxtb	r3, r3
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2201      	movs	r2, #1
 8006616:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	0a5b      	lsrs	r3, r3, #9
 8006620:	4413      	add	r3, r2
 8006622:	4619      	mov	r1, r3
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f7ff fe3b 	bl	80062a0 <move_window>
 800662a:	4603      	mov	r3, r0
 800662c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800662e:	7ffb      	ldrb	r3, [r7, #31]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d17a      	bne.n	800672a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006640:	4413      	add	r3, r2
 8006642:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <put_fat+0xf0>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	091b      	lsrs	r3, r3, #4
 8006652:	b2db      	uxtb	r3, r3
 8006654:	e00e      	b.n	8006674 <put_fat+0x10e>
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	b25b      	sxtb	r3, r3
 800665c:	f023 030f 	bic.w	r3, r3, #15
 8006660:	b25a      	sxtb	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	0a1b      	lsrs	r3, r3, #8
 8006666:	b25b      	sxtb	r3, r3
 8006668:	f003 030f 	and.w	r3, r3, #15
 800666c:	b25b      	sxtb	r3, r3
 800666e:	4313      	orrs	r3, r2
 8006670:	b25b      	sxtb	r3, r3
 8006672:	b2db      	uxtb	r3, r3
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2201      	movs	r2, #1
 800667c:	70da      	strb	r2, [r3, #3]
			break;
 800667e:	e059      	b.n	8006734 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	0a1b      	lsrs	r3, r3, #8
 8006688:	4413      	add	r3, r2
 800668a:	4619      	mov	r1, r3
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f7ff fe07 	bl	80062a0 <move_window>
 8006692:	4603      	mov	r3, r0
 8006694:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006696:	7ffb      	ldrb	r3, [r7, #31]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d148      	bne.n	800672e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	005b      	lsls	r3, r3, #1
 80066a6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80066aa:	4413      	add	r3, r2
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	b292      	uxth	r2, r2
 80066b0:	4611      	mov	r1, r2
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7ff fb4d 	bl	8005d52 <st_word>
			fs->wflag = 1;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2201      	movs	r2, #1
 80066bc:	70da      	strb	r2, [r3, #3]
			break;
 80066be:	e039      	b.n	8006734 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	09db      	lsrs	r3, r3, #7
 80066c8:	4413      	add	r3, r2
 80066ca:	4619      	mov	r1, r3
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f7ff fde7 	bl	80062a0 <move_window>
 80066d2:	4603      	mov	r3, r0
 80066d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80066d6:	7ffb      	ldrb	r3, [r7, #31]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d12a      	bne.n	8006732 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80066f0:	4413      	add	r3, r2
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7ff fb0a 	bl	8005d0c <ld_dword>
 80066f8:	4603      	mov	r3, r0
 80066fa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80066fe:	4323      	orrs	r3, r4
 8006700:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006710:	4413      	add	r3, r2
 8006712:	6879      	ldr	r1, [r7, #4]
 8006714:	4618      	mov	r0, r3
 8006716:	f7ff fb37 	bl	8005d88 <st_dword>
			fs->wflag = 1;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2201      	movs	r2, #1
 800671e:	70da      	strb	r2, [r3, #3]
			break;
 8006720:	e008      	b.n	8006734 <put_fat+0x1ce>
		}
	}
 8006722:	bf00      	nop
 8006724:	e006      	b.n	8006734 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006726:	bf00      	nop
 8006728:	e004      	b.n	8006734 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800672a:	bf00      	nop
 800672c:	e002      	b.n	8006734 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800672e:	bf00      	nop
 8006730:	e000      	b.n	8006734 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006732:	bf00      	nop
	return res;
 8006734:	7ffb      	ldrb	r3, [r7, #31]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3724      	adds	r7, #36	; 0x24
 800673a:	46bd      	mov	sp, r7
 800673c:	bd90      	pop	{r4, r7, pc}

0800673e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b088      	sub	sp, #32
 8006742:	af00      	add	r7, sp, #0
 8006744:	60f8      	str	r0, [r7, #12]
 8006746:	60b9      	str	r1, [r7, #8]
 8006748:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800674a:	2300      	movs	r3, #0
 800674c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d904      	bls.n	8006764 <remove_chain+0x26>
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	429a      	cmp	r2, r3
 8006762:	d301      	bcc.n	8006768 <remove_chain+0x2a>
 8006764:	2302      	movs	r3, #2
 8006766:	e04b      	b.n	8006800 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00c      	beq.n	8006788 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800676e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006772:	6879      	ldr	r1, [r7, #4]
 8006774:	69b8      	ldr	r0, [r7, #24]
 8006776:	f7ff fef6 	bl	8006566 <put_fat>
 800677a:	4603      	mov	r3, r0
 800677c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800677e:	7ffb      	ldrb	r3, [r7, #31]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <remove_chain+0x4a>
 8006784:	7ffb      	ldrb	r3, [r7, #31]
 8006786:	e03b      	b.n	8006800 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006788:	68b9      	ldr	r1, [r7, #8]
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f7ff fe43 	bl	8006416 <get_fat>
 8006790:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d031      	beq.n	80067fc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d101      	bne.n	80067a2 <remove_chain+0x64>
 800679e:	2302      	movs	r3, #2
 80067a0:	e02e      	b.n	8006800 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067a8:	d101      	bne.n	80067ae <remove_chain+0x70>
 80067aa:	2301      	movs	r3, #1
 80067ac:	e028      	b.n	8006800 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80067ae:	2200      	movs	r2, #0
 80067b0:	68b9      	ldr	r1, [r7, #8]
 80067b2:	69b8      	ldr	r0, [r7, #24]
 80067b4:	f7ff fed7 	bl	8006566 <put_fat>
 80067b8:	4603      	mov	r3, r0
 80067ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80067bc:	7ffb      	ldrb	r3, [r7, #31]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <remove_chain+0x88>
 80067c2:	7ffb      	ldrb	r3, [r7, #31]
 80067c4:	e01c      	b.n	8006800 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	695a      	ldr	r2, [r3, #20]
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	3b02      	subs	r3, #2
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d20b      	bcs.n	80067ec <remove_chain+0xae>
			fs->free_clst++;
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	1c5a      	adds	r2, r3, #1
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	791b      	ldrb	r3, [r3, #4]
 80067e2:	f043 0301 	orr.w	r3, r3, #1
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d3c6      	bcc.n	8006788 <remove_chain+0x4a>
 80067fa:	e000      	b.n	80067fe <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80067fc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3720      	adds	r7, #32
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b088      	sub	sp, #32
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10d      	bne.n	800683a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d004      	beq.n	8006834 <create_chain+0x2c>
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	69ba      	ldr	r2, [r7, #24]
 8006830:	429a      	cmp	r2, r3
 8006832:	d31b      	bcc.n	800686c <create_chain+0x64>
 8006834:	2301      	movs	r3, #1
 8006836:	61bb      	str	r3, [r7, #24]
 8006838:	e018      	b.n	800686c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7ff fdea 	bl	8006416 <get_fat>
 8006842:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d801      	bhi.n	800684e <create_chain+0x46>
 800684a:	2301      	movs	r3, #1
 800684c:	e070      	b.n	8006930 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006854:	d101      	bne.n	800685a <create_chain+0x52>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	e06a      	b.n	8006930 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	429a      	cmp	r2, r3
 8006862:	d201      	bcs.n	8006868 <create_chain+0x60>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	e063      	b.n	8006930 <create_chain+0x128>
		scl = clst;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	3301      	adds	r3, #1
 8006874:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	69fa      	ldr	r2, [r7, #28]
 800687c:	429a      	cmp	r2, r3
 800687e:	d307      	bcc.n	8006890 <create_chain+0x88>
				ncl = 2;
 8006880:	2302      	movs	r3, #2
 8006882:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006884:	69fa      	ldr	r2, [r7, #28]
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	429a      	cmp	r2, r3
 800688a:	d901      	bls.n	8006890 <create_chain+0x88>
 800688c:	2300      	movs	r3, #0
 800688e:	e04f      	b.n	8006930 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006890:	69f9      	ldr	r1, [r7, #28]
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7ff fdbf 	bl	8006416 <get_fat>
 8006898:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00e      	beq.n	80068be <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d003      	beq.n	80068ae <create_chain+0xa6>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068ac:	d101      	bne.n	80068b2 <create_chain+0xaa>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	e03e      	b.n	8006930 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80068b2:	69fa      	ldr	r2, [r7, #28]
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d1da      	bne.n	8006870 <create_chain+0x68>
 80068ba:	2300      	movs	r3, #0
 80068bc:	e038      	b.n	8006930 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80068be:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80068c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068c4:	69f9      	ldr	r1, [r7, #28]
 80068c6:	6938      	ldr	r0, [r7, #16]
 80068c8:	f7ff fe4d 	bl	8006566 <put_fat>
 80068cc:	4603      	mov	r3, r0
 80068ce:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80068d0:	7dfb      	ldrb	r3, [r7, #23]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d109      	bne.n	80068ea <create_chain+0xe2>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d006      	beq.n	80068ea <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80068dc:	69fa      	ldr	r2, [r7, #28]
 80068de:	6839      	ldr	r1, [r7, #0]
 80068e0:	6938      	ldr	r0, [r7, #16]
 80068e2:	f7ff fe40 	bl	8006566 <put_fat>
 80068e6:	4603      	mov	r3, r0
 80068e8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80068ea:	7dfb      	ldrb	r3, [r7, #23]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d116      	bne.n	800691e <create_chain+0x116>
		fs->last_clst = ncl;
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	69fa      	ldr	r2, [r7, #28]
 80068f4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	695a      	ldr	r2, [r3, #20]
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	3b02      	subs	r3, #2
 8006900:	429a      	cmp	r2, r3
 8006902:	d804      	bhi.n	800690e <create_chain+0x106>
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	695b      	ldr	r3, [r3, #20]
 8006908:	1e5a      	subs	r2, r3, #1
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	791b      	ldrb	r3, [r3, #4]
 8006912:	f043 0301 	orr.w	r3, r3, #1
 8006916:	b2da      	uxtb	r2, r3
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	711a      	strb	r2, [r3, #4]
 800691c:	e007      	b.n	800692e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800691e:	7dfb      	ldrb	r3, [r7, #23]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d102      	bne.n	800692a <create_chain+0x122>
 8006924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006928:	e000      	b.n	800692c <create_chain+0x124>
 800692a:	2301      	movs	r3, #1
 800692c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800692e:	69fb      	ldr	r3, [r7, #28]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3720      	adds	r7, #32
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006938:	b480      	push	{r7}
 800693a:	b087      	sub	sp, #28
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694c:	3304      	adds	r3, #4
 800694e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	0a5b      	lsrs	r3, r3, #9
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	8952      	ldrh	r2, [r2, #10]
 8006958:	fbb3 f3f2 	udiv	r3, r3, r2
 800695c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	1d1a      	adds	r2, r3, #4
 8006962:	613a      	str	r2, [r7, #16]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <clmt_clust+0x3a>
 800696e:	2300      	movs	r3, #0
 8006970:	e010      	b.n	8006994 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	429a      	cmp	r2, r3
 8006978:	d307      	bcc.n	800698a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	617b      	str	r3, [r7, #20]
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	3304      	adds	r3, #4
 8006986:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006988:	e7e9      	b.n	800695e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800698a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	4413      	add	r3, r2
}
 8006994:	4618      	mov	r0, r3
 8006996:	371c      	adds	r7, #28
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069b6:	d204      	bcs.n	80069c2 <dir_sdi+0x22>
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	f003 031f 	and.w	r3, r3, #31
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80069c2:	2302      	movs	r3, #2
 80069c4:	e063      	b.n	8006a8e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d106      	bne.n	80069e6 <dir_sdi+0x46>
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d902      	bls.n	80069e6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10c      	bne.n	8006a06 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	095b      	lsrs	r3, r3, #5
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	8912      	ldrh	r2, [r2, #8]
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d301      	bcc.n	80069fc <dir_sdi+0x5c>
 80069f8:	2302      	movs	r3, #2
 80069fa:	e048      	b.n	8006a8e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	61da      	str	r2, [r3, #28]
 8006a04:	e029      	b.n	8006a5a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	895b      	ldrh	r3, [r3, #10]
 8006a0a:	025b      	lsls	r3, r3, #9
 8006a0c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006a0e:	e019      	b.n	8006a44 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6979      	ldr	r1, [r7, #20]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7ff fcfe 	bl	8006416 <get_fat>
 8006a1a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a22:	d101      	bne.n	8006a28 <dir_sdi+0x88>
 8006a24:	2301      	movs	r3, #1
 8006a26:	e032      	b.n	8006a8e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d904      	bls.n	8006a38 <dir_sdi+0x98>
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d301      	bcc.n	8006a3c <dir_sdi+0x9c>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	e028      	b.n	8006a8e <dir_sdi+0xee>
			ofs -= csz;
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d2e1      	bcs.n	8006a10 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006a4c:	6979      	ldr	r1, [r7, #20]
 8006a4e:	6938      	ldr	r0, [r7, #16]
 8006a50:	f7ff fcc2 	bl	80063d8 <clust2sect>
 8006a54:	4602      	mov	r2, r0
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <dir_sdi+0xcc>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e010      	b.n	8006a8e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	69da      	ldr	r2, [r3, #28]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	0a5b      	lsrs	r3, r3, #9
 8006a74:	441a      	add	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a86:	441a      	add	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b086      	sub	sp, #24
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	3320      	adds	r3, #32
 8006aac:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <dir_next+0x28>
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006abc:	d301      	bcc.n	8006ac2 <dir_next+0x2c>
 8006abe:	2304      	movs	r3, #4
 8006ac0:	e0aa      	b.n	8006c18 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f040 8098 	bne.w	8006bfe <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	1c5a      	adds	r2, r3, #1
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10b      	bne.n	8006af8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	095b      	lsrs	r3, r3, #5
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	8912      	ldrh	r2, [r2, #8]
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	f0c0 8088 	bcc.w	8006bfe <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	61da      	str	r2, [r3, #28]
 8006af4:	2304      	movs	r3, #4
 8006af6:	e08f      	b.n	8006c18 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	0a5b      	lsrs	r3, r3, #9
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	8952      	ldrh	r2, [r2, #10]
 8006b00:	3a01      	subs	r2, #1
 8006b02:	4013      	ands	r3, r2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d17a      	bne.n	8006bfe <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	4619      	mov	r1, r3
 8006b10:	4610      	mov	r0, r2
 8006b12:	f7ff fc80 	bl	8006416 <get_fat>
 8006b16:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d801      	bhi.n	8006b22 <dir_next+0x8c>
 8006b1e:	2302      	movs	r3, #2
 8006b20:	e07a      	b.n	8006c18 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b28:	d101      	bne.n	8006b2e <dir_next+0x98>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e074      	b.n	8006c18 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d358      	bcc.n	8006bea <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d104      	bne.n	8006b48 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	61da      	str	r2, [r3, #28]
 8006b44:	2304      	movs	r3, #4
 8006b46:	e067      	b.n	8006c18 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	4610      	mov	r0, r2
 8006b52:	f7ff fe59 	bl	8006808 <create_chain>
 8006b56:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <dir_next+0xcc>
 8006b5e:	2307      	movs	r3, #7
 8006b60:	e05a      	b.n	8006c18 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d101      	bne.n	8006b6c <dir_next+0xd6>
 8006b68:	2302      	movs	r3, #2
 8006b6a:	e055      	b.n	8006c18 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b72:	d101      	bne.n	8006b78 <dir_next+0xe2>
 8006b74:	2301      	movs	r3, #1
 8006b76:	e04f      	b.n	8006c18 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f7ff fb4d 	bl	8006218 <sync_window>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <dir_next+0xf2>
 8006b84:	2301      	movs	r3, #1
 8006b86:	e047      	b.n	8006c18 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	3334      	adds	r3, #52	; 0x34
 8006b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b90:	2100      	movs	r1, #0
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7ff f945 	bl	8005e22 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006b98:	2300      	movs	r3, #0
 8006b9a:	613b      	str	r3, [r7, #16]
 8006b9c:	6979      	ldr	r1, [r7, #20]
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f7ff fc1a 	bl	80063d8 <clust2sect>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	631a      	str	r2, [r3, #48]	; 0x30
 8006baa:	e012      	b.n	8006bd2 <dir_next+0x13c>
						fs->wflag = 1;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f7ff fb30 	bl	8006218 <sync_window>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <dir_next+0x12c>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e02a      	b.n	8006c18 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	613b      	str	r3, [r7, #16]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bcc:	1c5a      	adds	r2, r3, #1
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	631a      	str	r2, [r3, #48]	; 0x30
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	895b      	ldrh	r3, [r3, #10]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d3e6      	bcc.n	8006bac <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	1ad2      	subs	r2, r2, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006bf0:	6979      	ldr	r1, [r7, #20]
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f7ff fbf0 	bl	80063d8 <clust2sect>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c10:	441a      	add	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3718      	adds	r7, #24
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006c30:	2100      	movs	r1, #0
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7ff feb4 	bl	80069a0 <dir_sdi>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006c3c:	7dfb      	ldrb	r3, [r7, #23]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d12b      	bne.n	8006c9a <dir_alloc+0x7a>
		n = 0;
 8006c42:	2300      	movs	r3, #0
 8006c44:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f7ff fb27 	bl	80062a0 <move_window>
 8006c52:	4603      	mov	r3, r0
 8006c54:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006c56:	7dfb      	ldrb	r3, [r7, #23]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d11d      	bne.n	8006c98 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	2be5      	cmp	r3, #229	; 0xe5
 8006c64:	d004      	beq.n	8006c70 <dir_alloc+0x50>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d107      	bne.n	8006c80 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	3301      	adds	r3, #1
 8006c74:	613b      	str	r3, [r7, #16]
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d102      	bne.n	8006c84 <dir_alloc+0x64>
 8006c7e:	e00c      	b.n	8006c9a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006c80:	2300      	movs	r3, #0
 8006c82:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006c84:	2101      	movs	r1, #1
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7ff ff05 	bl	8006a96 <dir_next>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006c90:	7dfb      	ldrb	r3, [r7, #23]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d0d7      	beq.n	8006c46 <dir_alloc+0x26>
 8006c96:	e000      	b.n	8006c9a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006c98:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006c9a:	7dfb      	ldrb	r3, [r7, #23]
 8006c9c:	2b04      	cmp	r3, #4
 8006c9e:	d101      	bne.n	8006ca4 <dir_alloc+0x84>
 8006ca0:	2307      	movs	r3, #7
 8006ca2:	75fb      	strb	r3, [r7, #23]
	return res;
 8006ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3718      	adds	r7, #24
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b084      	sub	sp, #16
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	331a      	adds	r3, #26
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7ff f80d 	bl	8005cdc <ld_word>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d109      	bne.n	8006ce2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	3314      	adds	r3, #20
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7ff f802 	bl	8005cdc <ld_word>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	041b      	lsls	r3, r3, #16
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	331a      	adds	r3, #26
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	b292      	uxth	r2, r2
 8006d00:	4611      	mov	r1, r2
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7ff f825 	bl	8005d52 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	2b03      	cmp	r3, #3
 8006d0e:	d109      	bne.n	8006d24 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f103 0214 	add.w	r2, r3, #20
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	0c1b      	lsrs	r3, r3, #16
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	4610      	mov	r0, r2
 8006d20:	f7ff f817 	bl	8005d52 <st_word>
	}
}
 8006d24:	bf00      	nop
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006d36:	2304      	movs	r3, #4
 8006d38:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8006d40:	e03c      	b.n	8006dbc <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	4619      	mov	r1, r3
 8006d48:	6938      	ldr	r0, [r7, #16]
 8006d4a:	f7ff faa9 	bl	80062a0 <move_window>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006d52:	7dfb      	ldrb	r3, [r7, #23]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d136      	bne.n	8006dc6 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a1b      	ldr	r3, [r3, #32]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d102      	bne.n	8006d6c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006d66:	2304      	movs	r3, #4
 8006d68:	75fb      	strb	r3, [r7, #23]
 8006d6a:	e031      	b.n	8006dd0 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	330b      	adds	r3, #11
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d78:	73bb      	strb	r3, [r7, #14]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	7bba      	ldrb	r2, [r7, #14]
 8006d7e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
 8006d82:	2be5      	cmp	r3, #229	; 0xe5
 8006d84:	d011      	beq.n	8006daa <dir_read+0x7e>
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
 8006d88:	2b2e      	cmp	r3, #46	; 0x2e
 8006d8a:	d00e      	beq.n	8006daa <dir_read+0x7e>
 8006d8c:	7bbb      	ldrb	r3, [r7, #14]
 8006d8e:	2b0f      	cmp	r3, #15
 8006d90:	d00b      	beq.n	8006daa <dir_read+0x7e>
 8006d92:	7bbb      	ldrb	r3, [r7, #14]
 8006d94:	f023 0320 	bic.w	r3, r3, #32
 8006d98:	2b08      	cmp	r3, #8
 8006d9a:	bf0c      	ite	eq
 8006d9c:	2301      	moveq	r3, #1
 8006d9e:	2300      	movne	r3, #0
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	461a      	mov	r2, r3
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d00f      	beq.n	8006dca <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006daa:	2100      	movs	r1, #0
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7ff fe72 	bl	8006a96 <dir_next>
 8006db2:	4603      	mov	r3, r0
 8006db4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d108      	bne.n	8006dce <dir_read+0xa2>
	while (dp->sect) {
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	69db      	ldr	r3, [r3, #28]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1be      	bne.n	8006d42 <dir_read+0x16>
 8006dc4:	e004      	b.n	8006dd0 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006dc6:	bf00      	nop
 8006dc8:	e002      	b.n	8006dd0 <dir_read+0xa4>
				break;
 8006dca:	bf00      	nop
 8006dcc:	e000      	b.n	8006dd0 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006dce:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006dd0:	7dfb      	ldrb	r3, [r7, #23]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d002      	beq.n	8006ddc <dir_read+0xb0>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	61da      	str	r2, [r3, #28]
	return res;
 8006ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3718      	adds	r7, #24
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b086      	sub	sp, #24
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006df4:	2100      	movs	r1, #0
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7ff fdd2 	bl	80069a0 <dir_sdi>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006e00:	7dfb      	ldrb	r3, [r7, #23]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <dir_find+0x24>
 8006e06:	7dfb      	ldrb	r3, [r7, #23]
 8006e08:	e03e      	b.n	8006e88 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	69db      	ldr	r3, [r3, #28]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6938      	ldr	r0, [r7, #16]
 8006e12:	f7ff fa45 	bl	80062a0 <move_window>
 8006e16:	4603      	mov	r3, r0
 8006e18:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006e1a:	7dfb      	ldrb	r3, [r7, #23]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d12f      	bne.n	8006e80 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d102      	bne.n	8006e34 <dir_find+0x4e>
 8006e2e:	2304      	movs	r3, #4
 8006e30:	75fb      	strb	r3, [r7, #23]
 8006e32:	e028      	b.n	8006e86 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a1b      	ldr	r3, [r3, #32]
 8006e38:	330b      	adds	r3, #11
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	330b      	adds	r3, #11
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	f003 0308 	and.w	r3, r3, #8
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10a      	bne.n	8006e6c <dir_find+0x86>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a18      	ldr	r0, [r3, #32]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	3324      	adds	r3, #36	; 0x24
 8006e5e:	220b      	movs	r2, #11
 8006e60:	4619      	mov	r1, r3
 8006e62:	f7fe fff9 	bl	8005e58 <mem_cmp>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00b      	beq.n	8006e84 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7ff fe11 	bl	8006a96 <dir_next>
 8006e74:	4603      	mov	r3, r0
 8006e76:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006e78:	7dfb      	ldrb	r3, [r7, #23]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d0c5      	beq.n	8006e0a <dir_find+0x24>
 8006e7e:	e002      	b.n	8006e86 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006e80:	bf00      	nop
 8006e82:	e000      	b.n	8006e86 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006e84:	bf00      	nop

	return res;
 8006e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3718      	adds	r7, #24
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006e9e:	2101      	movs	r1, #1
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7ff febd 	bl	8006c20 <dir_alloc>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d11c      	bne.n	8006eea <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	68b8      	ldr	r0, [r7, #8]
 8006eb8:	f7ff f9f2 	bl	80062a0 <move_window>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d111      	bne.n	8006eea <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	2100      	movs	r1, #0
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fe ffa7 	bl	8005e22 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a18      	ldr	r0, [r3, #32]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	3324      	adds	r3, #36	; 0x24
 8006edc:	220b      	movs	r2, #11
 8006ede:	4619      	mov	r1, r3
 8006ee0:	f7fe ff7e 	bl	8005de0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	4619      	mov	r1, r3
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f7ff f9c9 	bl	80062a0 <move_window>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8006f12:	7afb      	ldrb	r3, [r7, #11]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d106      	bne.n	8006f26 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a1b      	ldr	r3, [r3, #32]
 8006f1c:	22e5      	movs	r2, #229	; 0xe5
 8006f1e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2201      	movs	r2, #1
 8006f24:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8006f26:	7afb      	ldrb	r3, [r7, #11]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b088      	sub	sp, #32
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	3324      	adds	r3, #36	; 0x24
 8006f44:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006f46:	220b      	movs	r2, #11
 8006f48:	2120      	movs	r1, #32
 8006f4a:	68b8      	ldr	r0, [r7, #8]
 8006f4c:	f7fe ff69 	bl	8005e22 <mem_set>
	si = i = 0; ni = 8;
 8006f50:	2300      	movs	r3, #0
 8006f52:	613b      	str	r3, [r7, #16]
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	61fb      	str	r3, [r7, #28]
 8006f58:	2308      	movs	r3, #8
 8006f5a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	1c5a      	adds	r2, r3, #1
 8006f60:	61fa      	str	r2, [r7, #28]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	4413      	add	r3, r2
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006f6a:	7efb      	ldrb	r3, [r7, #27]
 8006f6c:	2b20      	cmp	r3, #32
 8006f6e:	d94e      	bls.n	800700e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006f70:	7efb      	ldrb	r3, [r7, #27]
 8006f72:	2b2f      	cmp	r3, #47	; 0x2f
 8006f74:	d006      	beq.n	8006f84 <create_name+0x54>
 8006f76:	7efb      	ldrb	r3, [r7, #27]
 8006f78:	2b5c      	cmp	r3, #92	; 0x5c
 8006f7a:	d110      	bne.n	8006f9e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006f7c:	e002      	b.n	8006f84 <create_name+0x54>
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	3301      	adds	r3, #1
 8006f82:	61fb      	str	r3, [r7, #28]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	4413      	add	r3, r2
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	2b2f      	cmp	r3, #47	; 0x2f
 8006f8e:	d0f6      	beq.n	8006f7e <create_name+0x4e>
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	4413      	add	r3, r2
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	2b5c      	cmp	r3, #92	; 0x5c
 8006f9a:	d0f0      	beq.n	8006f7e <create_name+0x4e>
			break;
 8006f9c:	e038      	b.n	8007010 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006f9e:	7efb      	ldrb	r3, [r7, #27]
 8006fa0:	2b2e      	cmp	r3, #46	; 0x2e
 8006fa2:	d003      	beq.n	8006fac <create_name+0x7c>
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d30c      	bcc.n	8006fc6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	2b0b      	cmp	r3, #11
 8006fb0:	d002      	beq.n	8006fb8 <create_name+0x88>
 8006fb2:	7efb      	ldrb	r3, [r7, #27]
 8006fb4:	2b2e      	cmp	r3, #46	; 0x2e
 8006fb6:	d001      	beq.n	8006fbc <create_name+0x8c>
 8006fb8:	2306      	movs	r3, #6
 8006fba:	e044      	b.n	8007046 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006fbc:	2308      	movs	r3, #8
 8006fbe:	613b      	str	r3, [r7, #16]
 8006fc0:	230b      	movs	r3, #11
 8006fc2:	617b      	str	r3, [r7, #20]
			continue;
 8006fc4:	e022      	b.n	800700c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006fc6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	da04      	bge.n	8006fd8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006fce:	7efb      	ldrb	r3, [r7, #27]
 8006fd0:	3b80      	subs	r3, #128	; 0x80
 8006fd2:	4a1f      	ldr	r2, [pc, #124]	; (8007050 <create_name+0x120>)
 8006fd4:	5cd3      	ldrb	r3, [r2, r3]
 8006fd6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006fd8:	7efb      	ldrb	r3, [r7, #27]
 8006fda:	4619      	mov	r1, r3
 8006fdc:	481d      	ldr	r0, [pc, #116]	; (8007054 <create_name+0x124>)
 8006fde:	f7fe ff62 	bl	8005ea6 <chk_chr>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <create_name+0xbc>
 8006fe8:	2306      	movs	r3, #6
 8006fea:	e02c      	b.n	8007046 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006fec:	7efb      	ldrb	r3, [r7, #27]
 8006fee:	2b60      	cmp	r3, #96	; 0x60
 8006ff0:	d905      	bls.n	8006ffe <create_name+0xce>
 8006ff2:	7efb      	ldrb	r3, [r7, #27]
 8006ff4:	2b7a      	cmp	r3, #122	; 0x7a
 8006ff6:	d802      	bhi.n	8006ffe <create_name+0xce>
 8006ff8:	7efb      	ldrb	r3, [r7, #27]
 8006ffa:	3b20      	subs	r3, #32
 8006ffc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	1c5a      	adds	r2, r3, #1
 8007002:	613a      	str	r2, [r7, #16]
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	4413      	add	r3, r2
 8007008:	7efa      	ldrb	r2, [r7, #27]
 800700a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800700c:	e7a6      	b.n	8006f5c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800700e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	441a      	add	r2, r3
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <create_name+0xf4>
 8007020:	2306      	movs	r3, #6
 8007022:	e010      	b.n	8007046 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	2be5      	cmp	r3, #229	; 0xe5
 800702a:	d102      	bne.n	8007032 <create_name+0x102>
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2205      	movs	r2, #5
 8007030:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007032:	7efb      	ldrb	r3, [r7, #27]
 8007034:	2b20      	cmp	r3, #32
 8007036:	d801      	bhi.n	800703c <create_name+0x10c>
 8007038:	2204      	movs	r2, #4
 800703a:	e000      	b.n	800703e <create_name+0x10e>
 800703c:	2200      	movs	r2, #0
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	330b      	adds	r3, #11
 8007042:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007044:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007046:	4618      	mov	r0, r3
 8007048:	3720      	adds	r7, #32
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	0800d9f4 	.word	0x0800d9f4
 8007054:	0800d888 	.word	0x0800d888

08007058 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800706c:	e002      	b.n	8007074 <follow_path+0x1c>
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	3301      	adds	r3, #1
 8007072:	603b      	str	r3, [r7, #0]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	2b2f      	cmp	r3, #47	; 0x2f
 800707a:	d0f8      	beq.n	800706e <follow_path+0x16>
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	2b5c      	cmp	r3, #92	; 0x5c
 8007082:	d0f4      	beq.n	800706e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	2200      	movs	r2, #0
 8007088:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	2b1f      	cmp	r3, #31
 8007090:	d80a      	bhi.n	80070a8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2280      	movs	r2, #128	; 0x80
 8007096:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800709a:	2100      	movs	r1, #0
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f7ff fc7f 	bl	80069a0 <dir_sdi>
 80070a2:	4603      	mov	r3, r0
 80070a4:	75fb      	strb	r3, [r7, #23]
 80070a6:	e043      	b.n	8007130 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80070a8:	463b      	mov	r3, r7
 80070aa:	4619      	mov	r1, r3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7ff ff3f 	bl	8006f30 <create_name>
 80070b2:	4603      	mov	r3, r0
 80070b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80070b6:	7dfb      	ldrb	r3, [r7, #23]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d134      	bne.n	8007126 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f7ff fe92 	bl	8006de6 <dir_find>
 80070c2:	4603      	mov	r3, r0
 80070c4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80070cc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80070ce:	7dfb      	ldrb	r3, [r7, #23]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00a      	beq.n	80070ea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80070d4:	7dfb      	ldrb	r3, [r7, #23]
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	d127      	bne.n	800712a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80070da:	7afb      	ldrb	r3, [r7, #11]
 80070dc:	f003 0304 	and.w	r3, r3, #4
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d122      	bne.n	800712a <follow_path+0xd2>
 80070e4:	2305      	movs	r3, #5
 80070e6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80070e8:	e01f      	b.n	800712a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80070ea:	7afb      	ldrb	r3, [r7, #11]
 80070ec:	f003 0304 	and.w	r3, r3, #4
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d11c      	bne.n	800712e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	799b      	ldrb	r3, [r3, #6]
 80070f8:	f003 0310 	and.w	r3, r3, #16
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d102      	bne.n	8007106 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007100:	2305      	movs	r3, #5
 8007102:	75fb      	strb	r3, [r7, #23]
 8007104:	e014      	b.n	8007130 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	695b      	ldr	r3, [r3, #20]
 8007110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007114:	4413      	add	r3, r2
 8007116:	4619      	mov	r1, r3
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f7ff fdc8 	bl	8006cae <ld_clust>
 800711e:	4602      	mov	r2, r0
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007124:	e7c0      	b.n	80070a8 <follow_path+0x50>
			if (res != FR_OK) break;
 8007126:	bf00      	nop
 8007128:	e002      	b.n	8007130 <follow_path+0xd8>
				break;
 800712a:	bf00      	nop
 800712c:	e000      	b.n	8007130 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800712e:	bf00      	nop
			}
		}
	}

	return res;
 8007130:	7dfb      	ldrb	r3, [r7, #23]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3718      	adds	r7, #24
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800713a:	b480      	push	{r7}
 800713c:	b087      	sub	sp, #28
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007146:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d031      	beq.n	80071b4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	617b      	str	r3, [r7, #20]
 8007156:	e002      	b.n	800715e <get_ldnumber+0x24>
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	3301      	adds	r3, #1
 800715c:	617b      	str	r3, [r7, #20]
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	2b20      	cmp	r3, #32
 8007164:	d903      	bls.n	800716e <get_ldnumber+0x34>
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	2b3a      	cmp	r3, #58	; 0x3a
 800716c:	d1f4      	bne.n	8007158 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	2b3a      	cmp	r3, #58	; 0x3a
 8007174:	d11c      	bne.n	80071b0 <get_ldnumber+0x76>
			tp = *path;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	1c5a      	adds	r2, r3, #1
 8007180:	60fa      	str	r2, [r7, #12]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	3b30      	subs	r3, #48	; 0x30
 8007186:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2b09      	cmp	r3, #9
 800718c:	d80e      	bhi.n	80071ac <get_ldnumber+0x72>
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	429a      	cmp	r2, r3
 8007194:	d10a      	bne.n	80071ac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d107      	bne.n	80071ac <get_ldnumber+0x72>
					vol = (int)i;
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	3301      	adds	r3, #1
 80071a4:	617b      	str	r3, [r7, #20]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	e002      	b.n	80071b6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80071b0:	2300      	movs	r3, #0
 80071b2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80071b4:	693b      	ldr	r3, [r7, #16]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	371c      	adds	r7, #28
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
	...

080071c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	70da      	strb	r2, [r3, #3]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071da:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7ff f85e 	bl	80062a0 <move_window>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d001      	beq.n	80071ee <check_fs+0x2a>
 80071ea:	2304      	movs	r3, #4
 80071ec:	e038      	b.n	8007260 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	3334      	adds	r3, #52	; 0x34
 80071f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fe fd70 	bl	8005cdc <ld_word>
 80071fc:	4603      	mov	r3, r0
 80071fe:	461a      	mov	r2, r3
 8007200:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007204:	429a      	cmp	r2, r3
 8007206:	d001      	beq.n	800720c <check_fs+0x48>
 8007208:	2303      	movs	r3, #3
 800720a:	e029      	b.n	8007260 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007212:	2be9      	cmp	r3, #233	; 0xe9
 8007214:	d009      	beq.n	800722a <check_fs+0x66>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800721c:	2beb      	cmp	r3, #235	; 0xeb
 800721e:	d11e      	bne.n	800725e <check_fs+0x9a>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007226:	2b90      	cmp	r3, #144	; 0x90
 8007228:	d119      	bne.n	800725e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	3334      	adds	r3, #52	; 0x34
 800722e:	3336      	adds	r3, #54	; 0x36
 8007230:	4618      	mov	r0, r3
 8007232:	f7fe fd6b 	bl	8005d0c <ld_dword>
 8007236:	4603      	mov	r3, r0
 8007238:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800723c:	4a0a      	ldr	r2, [pc, #40]	; (8007268 <check_fs+0xa4>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d101      	bne.n	8007246 <check_fs+0x82>
 8007242:	2300      	movs	r3, #0
 8007244:	e00c      	b.n	8007260 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	3334      	adds	r3, #52	; 0x34
 800724a:	3352      	adds	r3, #82	; 0x52
 800724c:	4618      	mov	r0, r3
 800724e:	f7fe fd5d 	bl	8005d0c <ld_dword>
 8007252:	4603      	mov	r3, r0
 8007254:	4a05      	ldr	r2, [pc, #20]	; (800726c <check_fs+0xa8>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d101      	bne.n	800725e <check_fs+0x9a>
 800725a:	2300      	movs	r3, #0
 800725c:	e000      	b.n	8007260 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800725e:	2302      	movs	r3, #2
}
 8007260:	4618      	mov	r0, r3
 8007262:	3708      	adds	r7, #8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	00544146 	.word	0x00544146
 800726c:	33544146 	.word	0x33544146

08007270 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b096      	sub	sp, #88	; 0x58
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	4613      	mov	r3, r2
 800727c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2200      	movs	r2, #0
 8007282:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f7ff ff58 	bl	800713a <get_ldnumber>
 800728a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800728c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800728e:	2b00      	cmp	r3, #0
 8007290:	da01      	bge.n	8007296 <find_volume+0x26>
 8007292:	230b      	movs	r3, #11
 8007294:	e236      	b.n	8007704 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007296:	4aac      	ldr	r2, [pc, #688]	; (8007548 <find_volume+0x2d8>)
 8007298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800729a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800729e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80072a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d101      	bne.n	80072aa <find_volume+0x3a>
 80072a6:	230c      	movs	r3, #12
 80072a8:	e22c      	b.n	8007704 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 80072aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80072ac:	f7fe fe16 	bl	8005edc <lock_fs>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <find_volume+0x4a>
 80072b6:	230f      	movs	r3, #15
 80072b8:	e224      	b.n	8007704 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072be:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80072c0:	79fb      	ldrb	r3, [r7, #7]
 80072c2:	f023 0301 	bic.w	r3, r3, #1
 80072c6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80072c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d01a      	beq.n	8007306 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80072d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d2:	785b      	ldrb	r3, [r3, #1]
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7fe fc63 	bl	8005ba0 <disk_status>
 80072da:	4603      	mov	r3, r0
 80072dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80072e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10c      	bne.n	8007306 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80072ec:	79fb      	ldrb	r3, [r7, #7]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d007      	beq.n	8007302 <find_volume+0x92>
 80072f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072f6:	f003 0304 	and.w	r3, r3, #4
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80072fe:	230a      	movs	r3, #10
 8007300:	e200      	b.n	8007704 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8007302:	2300      	movs	r3, #0
 8007304:	e1fe      	b.n	8007704 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007308:	2200      	movs	r2, #0
 800730a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800730c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800730e:	b2da      	uxtb	r2, r3
 8007310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007312:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007316:	785b      	ldrb	r3, [r3, #1]
 8007318:	4618      	mov	r0, r3
 800731a:	f7fe fc5b 	bl	8005bd4 <disk_initialize>
 800731e:	4603      	mov	r3, r0
 8007320:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007324:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007328:	f003 0301 	and.w	r3, r3, #1
 800732c:	2b00      	cmp	r3, #0
 800732e:	d001      	beq.n	8007334 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007330:	2303      	movs	r3, #3
 8007332:	e1e7      	b.n	8007704 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007334:	79fb      	ldrb	r3, [r7, #7]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d007      	beq.n	800734a <find_volume+0xda>
 800733a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800733e:	f003 0304 	and.w	r3, r3, #4
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8007346:	230a      	movs	r3, #10
 8007348:	e1dc      	b.n	8007704 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800734a:	2300      	movs	r3, #0
 800734c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800734e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007350:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007352:	f7ff ff37 	bl	80071c4 <check_fs>
 8007356:	4603      	mov	r3, r0
 8007358:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800735c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007360:	2b02      	cmp	r3, #2
 8007362:	d14b      	bne.n	80073fc <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007364:	2300      	movs	r3, #0
 8007366:	643b      	str	r3, [r7, #64]	; 0x40
 8007368:	e01f      	b.n	80073aa <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800736a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007372:	011b      	lsls	r3, r3, #4
 8007374:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007378:	4413      	add	r3, r2
 800737a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800737c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737e:	3304      	adds	r3, #4
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d006      	beq.n	8007394 <find_volume+0x124>
 8007386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007388:	3308      	adds	r3, #8
 800738a:	4618      	mov	r0, r3
 800738c:	f7fe fcbe 	bl	8005d0c <ld_dword>
 8007390:	4602      	mov	r2, r0
 8007392:	e000      	b.n	8007396 <find_volume+0x126>
 8007394:	2200      	movs	r2, #0
 8007396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800739e:	440b      	add	r3, r1
 80073a0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80073a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073a6:	3301      	adds	r3, #1
 80073a8:	643b      	str	r3, [r7, #64]	; 0x40
 80073aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073ac:	2b03      	cmp	r3, #3
 80073ae:	d9dc      	bls.n	800736a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80073b0:	2300      	movs	r3, #0
 80073b2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80073b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d002      	beq.n	80073c0 <find_volume+0x150>
 80073ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073bc:	3b01      	subs	r3, #1
 80073be:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80073c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80073c8:	4413      	add	r3, r2
 80073ca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80073ce:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80073d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d005      	beq.n	80073e2 <find_volume+0x172>
 80073d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80073d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073da:	f7ff fef3 	bl	80071c4 <check_fs>
 80073de:	4603      	mov	r3, r0
 80073e0:	e000      	b.n	80073e4 <find_volume+0x174>
 80073e2:	2303      	movs	r3, #3
 80073e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80073e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d905      	bls.n	80073fc <find_volume+0x18c>
 80073f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073f2:	3301      	adds	r3, #1
 80073f4:	643b      	str	r3, [r7, #64]	; 0x40
 80073f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073f8:	2b03      	cmp	r3, #3
 80073fa:	d9e1      	bls.n	80073c0 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80073fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007400:	2b04      	cmp	r3, #4
 8007402:	d101      	bne.n	8007408 <find_volume+0x198>
 8007404:	2301      	movs	r3, #1
 8007406:	e17d      	b.n	8007704 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007408:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800740c:	2b01      	cmp	r3, #1
 800740e:	d901      	bls.n	8007414 <find_volume+0x1a4>
 8007410:	230d      	movs	r3, #13
 8007412:	e177      	b.n	8007704 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007416:	3334      	adds	r3, #52	; 0x34
 8007418:	330b      	adds	r3, #11
 800741a:	4618      	mov	r0, r3
 800741c:	f7fe fc5e 	bl	8005cdc <ld_word>
 8007420:	4603      	mov	r3, r0
 8007422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007426:	d001      	beq.n	800742c <find_volume+0x1bc>
 8007428:	230d      	movs	r3, #13
 800742a:	e16b      	b.n	8007704 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800742c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742e:	3334      	adds	r3, #52	; 0x34
 8007430:	3316      	adds	r3, #22
 8007432:	4618      	mov	r0, r3
 8007434:	f7fe fc52 	bl	8005cdc <ld_word>
 8007438:	4603      	mov	r3, r0
 800743a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800743c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800743e:	2b00      	cmp	r3, #0
 8007440:	d106      	bne.n	8007450 <find_volume+0x1e0>
 8007442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007444:	3334      	adds	r3, #52	; 0x34
 8007446:	3324      	adds	r3, #36	; 0x24
 8007448:	4618      	mov	r0, r3
 800744a:	f7fe fc5f 	bl	8005d0c <ld_dword>
 800744e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007452:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007454:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007458:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800745c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007462:	789b      	ldrb	r3, [r3, #2]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d005      	beq.n	8007474 <find_volume+0x204>
 8007468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746a:	789b      	ldrb	r3, [r3, #2]
 800746c:	2b02      	cmp	r3, #2
 800746e:	d001      	beq.n	8007474 <find_volume+0x204>
 8007470:	230d      	movs	r3, #13
 8007472:	e147      	b.n	8007704 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007476:	789b      	ldrb	r3, [r3, #2]
 8007478:	461a      	mov	r2, r3
 800747a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800747c:	fb02 f303 	mul.w	r3, r2, r3
 8007480:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007488:	b29a      	uxth	r2, r3
 800748a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800748e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007490:	895b      	ldrh	r3, [r3, #10]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d008      	beq.n	80074a8 <find_volume+0x238>
 8007496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007498:	895b      	ldrh	r3, [r3, #10]
 800749a:	461a      	mov	r2, r3
 800749c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749e:	895b      	ldrh	r3, [r3, #10]
 80074a0:	3b01      	subs	r3, #1
 80074a2:	4013      	ands	r3, r2
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <find_volume+0x23c>
 80074a8:	230d      	movs	r3, #13
 80074aa:	e12b      	b.n	8007704 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80074ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ae:	3334      	adds	r3, #52	; 0x34
 80074b0:	3311      	adds	r3, #17
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fe fc12 	bl	8005cdc <ld_word>
 80074b8:	4603      	mov	r3, r0
 80074ba:	461a      	mov	r2, r3
 80074bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074be:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80074c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c2:	891b      	ldrh	r3, [r3, #8]
 80074c4:	f003 030f 	and.w	r3, r3, #15
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <find_volume+0x262>
 80074ce:	230d      	movs	r3, #13
 80074d0:	e118      	b.n	8007704 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80074d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d4:	3334      	adds	r3, #52	; 0x34
 80074d6:	3313      	adds	r3, #19
 80074d8:	4618      	mov	r0, r3
 80074da:	f7fe fbff 	bl	8005cdc <ld_word>
 80074de:	4603      	mov	r3, r0
 80074e0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80074e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d106      	bne.n	80074f6 <find_volume+0x286>
 80074e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ea:	3334      	adds	r3, #52	; 0x34
 80074ec:	3320      	adds	r3, #32
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fe fc0c 	bl	8005d0c <ld_dword>
 80074f4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80074f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f8:	3334      	adds	r3, #52	; 0x34
 80074fa:	330e      	adds	r3, #14
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7fe fbed 	bl	8005cdc <ld_word>
 8007502:	4603      	mov	r3, r0
 8007504:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007506:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007508:	2b00      	cmp	r3, #0
 800750a:	d101      	bne.n	8007510 <find_volume+0x2a0>
 800750c:	230d      	movs	r3, #13
 800750e:	e0f9      	b.n	8007704 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007510:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007514:	4413      	add	r3, r2
 8007516:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007518:	8912      	ldrh	r2, [r2, #8]
 800751a:	0912      	lsrs	r2, r2, #4
 800751c:	b292      	uxth	r2, r2
 800751e:	4413      	add	r3, r2
 8007520:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007522:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007526:	429a      	cmp	r2, r3
 8007528:	d201      	bcs.n	800752e <find_volume+0x2be>
 800752a:	230d      	movs	r3, #13
 800752c:	e0ea      	b.n	8007704 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800752e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007536:	8952      	ldrh	r2, [r2, #10]
 8007538:	fbb3 f3f2 	udiv	r3, r3, r2
 800753c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	2b00      	cmp	r3, #0
 8007542:	d103      	bne.n	800754c <find_volume+0x2dc>
 8007544:	230d      	movs	r3, #13
 8007546:	e0dd      	b.n	8007704 <find_volume+0x494>
 8007548:	200001b0 	.word	0x200001b0
		fmt = FS_FAT32;
 800754c:	2303      	movs	r3, #3
 800754e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007554:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007558:	4293      	cmp	r3, r2
 800755a:	d802      	bhi.n	8007562 <find_volume+0x2f2>
 800755c:	2302      	movs	r3, #2
 800755e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007564:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007568:	4293      	cmp	r3, r2
 800756a:	d802      	bhi.n	8007572 <find_volume+0x302>
 800756c:	2301      	movs	r3, #1
 800756e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007574:	1c9a      	adds	r2, r3, #2
 8007576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007578:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800757a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800757e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007580:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007584:	441a      	add	r2, r3
 8007586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007588:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800758a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800758c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758e:	441a      	add	r2, r3
 8007590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007592:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8007594:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007598:	2b03      	cmp	r3, #3
 800759a:	d11e      	bne.n	80075da <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800759c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759e:	3334      	adds	r3, #52	; 0x34
 80075a0:	332a      	adds	r3, #42	; 0x2a
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fe fb9a 	bl	8005cdc <ld_word>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <find_volume+0x342>
 80075ae:	230d      	movs	r3, #13
 80075b0:	e0a8      	b.n	8007704 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80075b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b4:	891b      	ldrh	r3, [r3, #8]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <find_volume+0x34e>
 80075ba:	230d      	movs	r3, #13
 80075bc:	e0a2      	b.n	8007704 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80075be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c0:	3334      	adds	r3, #52	; 0x34
 80075c2:	332c      	adds	r3, #44	; 0x2c
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7fe fba1 	bl	8005d0c <ld_dword>
 80075ca:	4602      	mov	r2, r0
 80075cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ce:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80075d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d2:	699b      	ldr	r3, [r3, #24]
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	647b      	str	r3, [r7, #68]	; 0x44
 80075d8:	e01f      	b.n	800761a <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80075da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075dc:	891b      	ldrh	r3, [r3, #8]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <find_volume+0x376>
 80075e2:	230d      	movs	r3, #13
 80075e4:	e08e      	b.n	8007704 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80075e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ec:	441a      	add	r2, r3
 80075ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80075f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d103      	bne.n	8007602 <find_volume+0x392>
 80075fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	e00a      	b.n	8007618 <find_volume+0x3a8>
 8007602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007604:	699a      	ldr	r2, [r3, #24]
 8007606:	4613      	mov	r3, r2
 8007608:	005b      	lsls	r3, r3, #1
 800760a:	4413      	add	r3, r2
 800760c:	085a      	lsrs	r2, r3, #1
 800760e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007618:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761c:	69da      	ldr	r2, [r3, #28]
 800761e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007620:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007624:	0a5b      	lsrs	r3, r3, #9
 8007626:	429a      	cmp	r2, r3
 8007628:	d201      	bcs.n	800762e <find_volume+0x3be>
 800762a:	230d      	movs	r3, #13
 800762c:	e06a      	b.n	8007704 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800762e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007630:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007634:	615a      	str	r2, [r3, #20]
 8007636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007638:	695a      	ldr	r2, [r3, #20]
 800763a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800763e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007640:	2280      	movs	r2, #128	; 0x80
 8007642:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007644:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007648:	2b03      	cmp	r3, #3
 800764a:	d149      	bne.n	80076e0 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800764c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764e:	3334      	adds	r3, #52	; 0x34
 8007650:	3330      	adds	r3, #48	; 0x30
 8007652:	4618      	mov	r0, r3
 8007654:	f7fe fb42 	bl	8005cdc <ld_word>
 8007658:	4603      	mov	r3, r0
 800765a:	2b01      	cmp	r3, #1
 800765c:	d140      	bne.n	80076e0 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800765e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007660:	3301      	adds	r3, #1
 8007662:	4619      	mov	r1, r3
 8007664:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007666:	f7fe fe1b 	bl	80062a0 <move_window>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d137      	bne.n	80076e0 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8007670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007672:	2200      	movs	r2, #0
 8007674:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007678:	3334      	adds	r3, #52	; 0x34
 800767a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800767e:	4618      	mov	r0, r3
 8007680:	f7fe fb2c 	bl	8005cdc <ld_word>
 8007684:	4603      	mov	r3, r0
 8007686:	461a      	mov	r2, r3
 8007688:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800768c:	429a      	cmp	r2, r3
 800768e:	d127      	bne.n	80076e0 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007692:	3334      	adds	r3, #52	; 0x34
 8007694:	4618      	mov	r0, r3
 8007696:	f7fe fb39 	bl	8005d0c <ld_dword>
 800769a:	4603      	mov	r3, r0
 800769c:	4a1b      	ldr	r2, [pc, #108]	; (800770c <find_volume+0x49c>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d11e      	bne.n	80076e0 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80076a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a4:	3334      	adds	r3, #52	; 0x34
 80076a6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fe fb2e 	bl	8005d0c <ld_dword>
 80076b0:	4603      	mov	r3, r0
 80076b2:	4a17      	ldr	r2, [pc, #92]	; (8007710 <find_volume+0x4a0>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d113      	bne.n	80076e0 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80076b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ba:	3334      	adds	r3, #52	; 0x34
 80076bc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7fe fb23 	bl	8005d0c <ld_dword>
 80076c6:	4602      	mov	r2, r0
 80076c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ca:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80076cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ce:	3334      	adds	r3, #52	; 0x34
 80076d0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fe fb19 	bl	8005d0c <ld_dword>
 80076da:	4602      	mov	r2, r0
 80076dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076de:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80076e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80076e6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80076e8:	4b0a      	ldr	r3, [pc, #40]	; (8007714 <find_volume+0x4a4>)
 80076ea:	881b      	ldrh	r3, [r3, #0]
 80076ec:	3301      	adds	r3, #1
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	4b08      	ldr	r3, [pc, #32]	; (8007714 <find_volume+0x4a4>)
 80076f2:	801a      	strh	r2, [r3, #0]
 80076f4:	4b07      	ldr	r3, [pc, #28]	; (8007714 <find_volume+0x4a4>)
 80076f6:	881a      	ldrh	r2, [r3, #0]
 80076f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fa:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80076fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076fe:	f7fe fd67 	bl	80061d0 <clear_lock>
#endif
	return FR_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3758      	adds	r7, #88	; 0x58
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	41615252 	.word	0x41615252
 8007710:	61417272 	.word	0x61417272
 8007714:	200001b4 	.word	0x200001b4

08007718 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007722:	2309      	movs	r3, #9
 8007724:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d02e      	beq.n	800778a <validate+0x72>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d02a      	beq.n	800778a <validate+0x72>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d025      	beq.n	800778a <validate+0x72>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	889a      	ldrh	r2, [r3, #4]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	88db      	ldrh	r3, [r3, #6]
 8007748:	429a      	cmp	r2, r3
 800774a:	d11e      	bne.n	800778a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4618      	mov	r0, r3
 8007752:	f7fe fbc3 	bl	8005edc <lock_fs>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d014      	beq.n	8007786 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	785b      	ldrb	r3, [r3, #1]
 8007762:	4618      	mov	r0, r3
 8007764:	f7fe fa1c 	bl	8005ba0 <disk_status>
 8007768:	4603      	mov	r3, r0
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	2b00      	cmp	r3, #0
 8007770:	d102      	bne.n	8007778 <validate+0x60>
				res = FR_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	73fb      	strb	r3, [r7, #15]
 8007776:	e008      	b.n	800778a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2100      	movs	r1, #0
 800777e:	4618      	mov	r0, r3
 8007780:	f7fe fbc2 	bl	8005f08 <unlock_fs>
 8007784:	e001      	b.n	800778a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8007786:	230f      	movs	r3, #15
 8007788:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800778a:	7bfb      	ldrb	r3, [r7, #15]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d102      	bne.n	8007796 <validate+0x7e>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	e000      	b.n	8007798 <validate+0x80>
 8007796:	2300      	movs	r3, #0
 8007798:	683a      	ldr	r2, [r7, #0]
 800779a:	6013      	str	r3, [r2, #0]
	return res;
 800779c:	7bfb      	ldrb	r3, [r7, #15]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
	...

080077a8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b088      	sub	sp, #32
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	4613      	mov	r3, r2
 80077b4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80077ba:	f107 0310 	add.w	r3, r7, #16
 80077be:	4618      	mov	r0, r3
 80077c0:	f7ff fcbb 	bl	800713a <get_ldnumber>
 80077c4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	da01      	bge.n	80077d0 <f_mount+0x28>
 80077cc:	230b      	movs	r3, #11
 80077ce:	e048      	b.n	8007862 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80077d0:	4a26      	ldr	r2, [pc, #152]	; (800786c <f_mount+0xc4>)
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077d8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00f      	beq.n	8007800 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80077e0:	69b8      	ldr	r0, [r7, #24]
 80077e2:	f7fe fcf5 	bl	80061d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	4618      	mov	r0, r3
 80077ec:	f001 f94a 	bl	8008a84 <ff_del_syncobj>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d101      	bne.n	80077fa <f_mount+0x52>
 80077f6:	2302      	movs	r3, #2
 80077f8:	e033      	b.n	8007862 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	2200      	movs	r2, #0
 80077fe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00f      	beq.n	8007826 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	b2da      	uxtb	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	330c      	adds	r3, #12
 8007814:	4619      	mov	r1, r3
 8007816:	4610      	mov	r0, r2
 8007818:	f001 f919 	bl	8008a4e <ff_cre_syncobj>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d101      	bne.n	8007826 <f_mount+0x7e>
 8007822:	2302      	movs	r3, #2
 8007824:	e01d      	b.n	8007862 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	4910      	ldr	r1, [pc, #64]	; (800786c <f_mount+0xc4>)
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d002      	beq.n	800783c <f_mount+0x94>
 8007836:	79fb      	ldrb	r3, [r7, #7]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d001      	beq.n	8007840 <f_mount+0x98>
 800783c:	2300      	movs	r3, #0
 800783e:	e010      	b.n	8007862 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007840:	f107 010c 	add.w	r1, r7, #12
 8007844:	f107 0308 	add.w	r3, r7, #8
 8007848:	2200      	movs	r2, #0
 800784a:	4618      	mov	r0, r3
 800784c:	f7ff fd10 	bl	8007270 <find_volume>
 8007850:	4603      	mov	r3, r0
 8007852:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	7dfa      	ldrb	r2, [r7, #23]
 8007858:	4611      	mov	r1, r2
 800785a:	4618      	mov	r0, r3
 800785c:	f7fe fb54 	bl	8005f08 <unlock_fs>
 8007860:	7dfb      	ldrb	r3, [r7, #23]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3720      	adds	r7, #32
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	200001b0 	.word	0x200001b0

08007870 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b098      	sub	sp, #96	; 0x60
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	4613      	mov	r3, r2
 800787c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d101      	bne.n	8007888 <f_open+0x18>
 8007884:	2309      	movs	r3, #9
 8007886:	e1b4      	b.n	8007bf2 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007888:	79fb      	ldrb	r3, [r7, #7]
 800788a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800788e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007890:	79fa      	ldrb	r2, [r7, #7]
 8007892:	f107 0110 	add.w	r1, r7, #16
 8007896:	f107 0308 	add.w	r3, r7, #8
 800789a:	4618      	mov	r0, r3
 800789c:	f7ff fce8 	bl	8007270 <find_volume>
 80078a0:	4603      	mov	r3, r0
 80078a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80078a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f040 8191 	bne.w	8007bd2 <f_open+0x362>
		dj.obj.fs = fs;
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	f107 0314 	add.w	r3, r7, #20
 80078ba:	4611      	mov	r1, r2
 80078bc:	4618      	mov	r0, r3
 80078be:	f7ff fbcb 	bl	8007058 <follow_path>
 80078c2:	4603      	mov	r3, r0
 80078c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80078c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d11a      	bne.n	8007906 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80078d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80078d4:	b25b      	sxtb	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	da03      	bge.n	80078e2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80078da:	2306      	movs	r3, #6
 80078dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80078e0:	e011      	b.n	8007906 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80078e2:	79fb      	ldrb	r3, [r7, #7]
 80078e4:	f023 0301 	bic.w	r3, r3, #1
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	bf14      	ite	ne
 80078ec:	2301      	movne	r3, #1
 80078ee:	2300      	moveq	r3, #0
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	461a      	mov	r2, r3
 80078f4:	f107 0314 	add.w	r3, r7, #20
 80078f8:	4611      	mov	r1, r2
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fe fb20 	bl	8005f40 <chk_lock>
 8007900:	4603      	mov	r3, r0
 8007902:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007906:	79fb      	ldrb	r3, [r7, #7]
 8007908:	f003 031c 	and.w	r3, r3, #28
 800790c:	2b00      	cmp	r3, #0
 800790e:	d07f      	beq.n	8007a10 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007910:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007914:	2b00      	cmp	r3, #0
 8007916:	d017      	beq.n	8007948 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007918:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800791c:	2b04      	cmp	r3, #4
 800791e:	d10e      	bne.n	800793e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007920:	f7fe fb6a 	bl	8005ff8 <enq_lock>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d006      	beq.n	8007938 <f_open+0xc8>
 800792a:	f107 0314 	add.w	r3, r7, #20
 800792e:	4618      	mov	r0, r3
 8007930:	f7ff faae 	bl	8006e90 <dir_register>
 8007934:	4603      	mov	r3, r0
 8007936:	e000      	b.n	800793a <f_open+0xca>
 8007938:	2312      	movs	r3, #18
 800793a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800793e:	79fb      	ldrb	r3, [r7, #7]
 8007940:	f043 0308 	orr.w	r3, r3, #8
 8007944:	71fb      	strb	r3, [r7, #7]
 8007946:	e010      	b.n	800796a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007948:	7ebb      	ldrb	r3, [r7, #26]
 800794a:	f003 0311 	and.w	r3, r3, #17
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <f_open+0xea>
					res = FR_DENIED;
 8007952:	2307      	movs	r3, #7
 8007954:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007958:	e007      	b.n	800796a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800795a:	79fb      	ldrb	r3, [r7, #7]
 800795c:	f003 0304 	and.w	r3, r3, #4
 8007960:	2b00      	cmp	r3, #0
 8007962:	d002      	beq.n	800796a <f_open+0xfa>
 8007964:	2308      	movs	r3, #8
 8007966:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800796a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800796e:	2b00      	cmp	r3, #0
 8007970:	d168      	bne.n	8007a44 <f_open+0x1d4>
 8007972:	79fb      	ldrb	r3, [r7, #7]
 8007974:	f003 0308 	and.w	r3, r3, #8
 8007978:	2b00      	cmp	r3, #0
 800797a:	d063      	beq.n	8007a44 <f_open+0x1d4>
				dw = GET_FATTIME();
 800797c:	f7fd fbd2 	bl	8005124 <get_fattime>
 8007980:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007984:	330e      	adds	r3, #14
 8007986:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007988:	4618      	mov	r0, r3
 800798a:	f7fe f9fd 	bl	8005d88 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800798e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007990:	3316      	adds	r3, #22
 8007992:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007994:	4618      	mov	r0, r3
 8007996:	f7fe f9f7 	bl	8005d88 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800799a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800799c:	330b      	adds	r3, #11
 800799e:	2220      	movs	r2, #32
 80079a0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079a6:	4611      	mov	r1, r2
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7ff f980 	bl	8006cae <ld_clust>
 80079ae:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80079b4:	2200      	movs	r2, #0
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7ff f998 	bl	8006cec <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80079bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079be:	331c      	adds	r3, #28
 80079c0:	2100      	movs	r1, #0
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fe f9e0 	bl	8005d88 <st_dword>
					fs->wflag = 1;
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	2201      	movs	r2, #1
 80079cc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80079ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d037      	beq.n	8007a44 <f_open+0x1d4>
						dw = fs->winsect;
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80079da:	f107 0314 	add.w	r3, r7, #20
 80079de:	2200      	movs	r2, #0
 80079e0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7fe feab 	bl	800673e <remove_chain>
 80079e8:	4603      	mov	r3, r0
 80079ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80079ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d126      	bne.n	8007a44 <f_open+0x1d4>
							res = move_window(fs, dw);
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7fe fc50 	bl	80062a0 <move_window>
 8007a00:	4603      	mov	r3, r0
 8007a02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a0a:	3a01      	subs	r2, #1
 8007a0c:	611a      	str	r2, [r3, #16]
 8007a0e:	e019      	b.n	8007a44 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007a10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d115      	bne.n	8007a44 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007a18:	7ebb      	ldrb	r3, [r7, #26]
 8007a1a:	f003 0310 	and.w	r3, r3, #16
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <f_open+0x1ba>
					res = FR_NO_FILE;
 8007a22:	2304      	movs	r3, #4
 8007a24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007a28:	e00c      	b.n	8007a44 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007a2a:	79fb      	ldrb	r3, [r7, #7]
 8007a2c:	f003 0302 	and.w	r3, r3, #2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d007      	beq.n	8007a44 <f_open+0x1d4>
 8007a34:	7ebb      	ldrb	r3, [r7, #26]
 8007a36:	f003 0301 	and.w	r3, r3, #1
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d002      	beq.n	8007a44 <f_open+0x1d4>
						res = FR_DENIED;
 8007a3e:	2307      	movs	r3, #7
 8007a40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007a44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d128      	bne.n	8007a9e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007a4c:	79fb      	ldrb	r3, [r7, #7]
 8007a4e:	f003 0308 	and.w	r3, r3, #8
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007a56:	79fb      	ldrb	r3, [r7, #7]
 8007a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a5c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007a66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007a6c:	79fb      	ldrb	r3, [r7, #7]
 8007a6e:	f023 0301 	bic.w	r3, r3, #1
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	bf14      	ite	ne
 8007a76:	2301      	movne	r3, #1
 8007a78:	2300      	moveq	r3, #0
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	f107 0314 	add.w	r3, r7, #20
 8007a82:	4611      	mov	r1, r2
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7fe fad9 	bl	800603c <inc_lock>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d102      	bne.n	8007a9e <f_open+0x22e>
 8007a98:	2302      	movs	r3, #2
 8007a9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007a9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f040 8095 	bne.w	8007bd2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007aac:	4611      	mov	r1, r2
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7ff f8fd 	bl	8006cae <ld_clust>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007abc:	331c      	adds	r3, #28
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fe f924 	bl	8005d0c <ld_dword>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	88da      	ldrh	r2, [r3, #6]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	79fa      	ldrb	r2, [r7, #7]
 8007ae2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	3330      	adds	r3, #48	; 0x30
 8007afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007afe:	2100      	movs	r1, #0
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7fe f98e 	bl	8005e22 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007b06:	79fb      	ldrb	r3, [r7, #7]
 8007b08:	f003 0320 	and.w	r3, r3, #32
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d060      	beq.n	8007bd2 <f_open+0x362>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d05c      	beq.n	8007bd2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	68da      	ldr	r2, [r3, #12]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	895b      	ldrh	r3, [r3, #10]
 8007b24:	025b      	lsls	r3, r3, #9
 8007b26:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	657b      	str	r3, [r7, #84]	; 0x54
 8007b34:	e016      	b.n	8007b64 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7fe fc6b 	bl	8006416 <get_fat>
 8007b40:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d802      	bhi.n	8007b4e <f_open+0x2de>
 8007b48:	2302      	movs	r3, #2
 8007b4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007b4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b54:	d102      	bne.n	8007b5c <f_open+0x2ec>
 8007b56:	2301      	movs	r3, #1
 8007b58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007b5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	657b      	str	r3, [r7, #84]	; 0x54
 8007b64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d103      	bne.n	8007b74 <f_open+0x304>
 8007b6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d8e0      	bhi.n	8007b36 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b78:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007b7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d127      	bne.n	8007bd2 <f_open+0x362>
 8007b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d022      	beq.n	8007bd2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7fe fc21 	bl	80063d8 <clust2sect>
 8007b96:	6478      	str	r0, [r7, #68]	; 0x44
 8007b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d103      	bne.n	8007ba6 <f_open+0x336>
						res = FR_INT_ERR;
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007ba4:	e015      	b.n	8007bd2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ba8:	0a5a      	lsrs	r2, r3, #9
 8007baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bac:	441a      	add	r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	7858      	ldrb	r0, [r3, #1]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6a1a      	ldr	r2, [r3, #32]
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	f7fe f82d 	bl	8005c20 <disk_read>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d002      	beq.n	8007bd2 <f_open+0x362>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007bd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d002      	beq.n	8007be0 <f_open+0x370>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8007be6:	4611      	mov	r1, r2
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7fe f98d 	bl	8005f08 <unlock_fs>
 8007bee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3760      	adds	r7, #96	; 0x60
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b08e      	sub	sp, #56	; 0x38
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	60f8      	str	r0, [r7, #12]
 8007c02:	60b9      	str	r1, [r7, #8]
 8007c04:	607a      	str	r2, [r7, #4]
 8007c06:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f107 0214 	add.w	r2, r7, #20
 8007c18:	4611      	mov	r1, r2
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7ff fd7c 	bl	8007718 <validate>
 8007c20:	4603      	mov	r3, r0
 8007c22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007c26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d107      	bne.n	8007c3e <f_read+0x44>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	7d5b      	ldrb	r3, [r3, #21]
 8007c32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007c36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d009      	beq.n	8007c52 <f_read+0x58>
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007c44:	4611      	mov	r1, r2
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fe f95e 	bl	8005f08 <unlock_fs>
 8007c4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c50:	e13d      	b.n	8007ece <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	7d1b      	ldrb	r3, [r3, #20]
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d106      	bne.n	8007c6c <f_read+0x72>
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	2107      	movs	r1, #7
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fe f950 	bl	8005f08 <unlock_fs>
 8007c68:	2307      	movs	r3, #7
 8007c6a:	e130      	b.n	8007ece <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	68da      	ldr	r2, [r3, #12]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	6a3b      	ldr	r3, [r7, #32]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	f240 811c 	bls.w	8007eba <f_read+0x2c0>
 8007c82:	6a3b      	ldr	r3, [r7, #32]
 8007c84:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007c86:	e118      	b.n	8007eba <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f040 80e4 	bne.w	8007e5e <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	0a5b      	lsrs	r3, r3, #9
 8007c9c:	697a      	ldr	r2, [r7, #20]
 8007c9e:	8952      	ldrh	r2, [r2, #10]
 8007ca0:	3a01      	subs	r2, #1
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d139      	bne.n	8007d20 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d103      	bne.n	8007cbc <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	633b      	str	r3, [r7, #48]	; 0x30
 8007cba:	e013      	b.n	8007ce4 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d007      	beq.n	8007cd4 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f7fe fe34 	bl	8006938 <clmt_clust>
 8007cd0:	6338      	str	r0, [r7, #48]	; 0x30
 8007cd2:	e007      	b.n	8007ce4 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	4619      	mov	r1, r3
 8007cdc:	4610      	mov	r0, r2
 8007cde:	f7fe fb9a 	bl	8006416 <get_fat>
 8007ce2:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d809      	bhi.n	8007cfe <f_read+0x104>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2202      	movs	r2, #2
 8007cee:	755a      	strb	r2, [r3, #21]
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	2102      	movs	r1, #2
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fe f907 	bl	8005f08 <unlock_fs>
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	e0e7      	b.n	8007ece <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d04:	d109      	bne.n	8007d1a <f_read+0x120>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	755a      	strb	r2, [r3, #21]
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	2101      	movs	r1, #1
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7fe f8f9 	bl	8005f08 <unlock_fs>
 8007d16:	2301      	movs	r3, #1
 8007d18:	e0d9      	b.n	8007ece <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d1e:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007d20:	697a      	ldr	r2, [r7, #20]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	69db      	ldr	r3, [r3, #28]
 8007d26:	4619      	mov	r1, r3
 8007d28:	4610      	mov	r0, r2
 8007d2a:	f7fe fb55 	bl	80063d8 <clust2sect>
 8007d2e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d109      	bne.n	8007d4a <f_read+0x150>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2202      	movs	r2, #2
 8007d3a:	755a      	strb	r2, [r3, #21]
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	2102      	movs	r1, #2
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fe f8e1 	bl	8005f08 <unlock_fs>
 8007d46:	2302      	movs	r3, #2
 8007d48:	e0c1      	b.n	8007ece <f_read+0x2d4>
			sect += csect;
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	4413      	add	r3, r2
 8007d50:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	0a5b      	lsrs	r3, r3, #9
 8007d56:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d03e      	beq.n	8007ddc <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007d5e:	69fa      	ldr	r2, [r7, #28]
 8007d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d62:	4413      	add	r3, r2
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	8952      	ldrh	r2, [r2, #10]
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d905      	bls.n	8007d78 <f_read+0x17e>
					cc = fs->csize - csect;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	895b      	ldrh	r3, [r3, #10]
 8007d70:	461a      	mov	r2, r3
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	7858      	ldrb	r0, [r3, #1]
 8007d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7e:	69ba      	ldr	r2, [r7, #24]
 8007d80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d82:	f7fd ff4d 	bl	8005c20 <disk_read>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d009      	beq.n	8007da0 <f_read+0x1a6>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	755a      	strb	r2, [r3, #21]
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	2101      	movs	r1, #1
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fe f8b6 	bl	8005f08 <unlock_fs>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e096      	b.n	8007ece <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	7d1b      	ldrb	r3, [r3, #20]
 8007da4:	b25b      	sxtb	r3, r3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	da14      	bge.n	8007dd4 <f_read+0x1da>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6a1a      	ldr	r2, [r3, #32]
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d90d      	bls.n	8007dd4 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6a1a      	ldr	r2, [r3, #32]
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	025b      	lsls	r3, r3, #9
 8007dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dc4:	18d0      	adds	r0, r2, r3
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	3330      	adds	r3, #48	; 0x30
 8007dca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dce:	4619      	mov	r1, r3
 8007dd0:	f7fe f806 	bl	8005de0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd6:	025b      	lsls	r3, r3, #9
 8007dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007dda:	e05a      	b.n	8007e92 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6a1b      	ldr	r3, [r3, #32]
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d038      	beq.n	8007e58 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	7d1b      	ldrb	r3, [r3, #20]
 8007dea:	b25b      	sxtb	r3, r3
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	da1d      	bge.n	8007e2c <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	7858      	ldrb	r0, [r3, #1]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6a1a      	ldr	r2, [r3, #32]
 8007dfe:	2301      	movs	r3, #1
 8007e00:	f7fd ff2e 	bl	8005c60 <disk_write>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d009      	beq.n	8007e1e <f_read+0x224>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	755a      	strb	r2, [r3, #21]
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	2101      	movs	r1, #1
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7fe f877 	bl	8005f08 <unlock_fs>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e057      	b.n	8007ece <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	7d1b      	ldrb	r3, [r3, #20]
 8007e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e26:	b2da      	uxtb	r2, r3
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	7858      	ldrb	r0, [r3, #1]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e36:	2301      	movs	r3, #1
 8007e38:	69ba      	ldr	r2, [r7, #24]
 8007e3a:	f7fd fef1 	bl	8005c20 <disk_read>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d009      	beq.n	8007e58 <f_read+0x25e>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2201      	movs	r2, #1
 8007e48:	755a      	strb	r2, [r3, #21]
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	2101      	movs	r1, #1
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7fe f85a 	bl	8005f08 <unlock_fs>
 8007e54:	2301      	movs	r3, #1
 8007e56:	e03a      	b.n	8007ece <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	69ba      	ldr	r2, [r7, #24]
 8007e5c:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e66:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d901      	bls.n	8007e78 <f_read+0x27e>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e86:	4413      	add	r3, r2
 8007e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e8e:	f7fd ffa7 	bl	8005de0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e96:	4413      	add	r3, r2
 8007e98:	627b      	str	r3, [r7, #36]	; 0x24
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	699a      	ldr	r2, [r3, #24]
 8007e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea0:	441a      	add	r2, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	619a      	str	r2, [r3, #24]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eac:	441a      	add	r2, r3
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	601a      	str	r2, [r3, #0]
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f47f aee3 	bne.w	8007c88 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fe f81e 	bl	8005f08 <unlock_fs>
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3738      	adds	r7, #56	; 0x38
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b08c      	sub	sp, #48	; 0x30
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	60f8      	str	r0, [r7, #12]
 8007ede:	60b9      	str	r1, [r7, #8]
 8007ee0:	607a      	str	r2, [r7, #4]
 8007ee2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	2200      	movs	r2, #0
 8007eec:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f107 0210 	add.w	r2, r7, #16
 8007ef4:	4611      	mov	r1, r2
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7ff fc0e 	bl	8007718 <validate>
 8007efc:	4603      	mov	r3, r0
 8007efe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007f02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d107      	bne.n	8007f1a <f_write+0x44>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	7d5b      	ldrb	r3, [r3, #21]
 8007f0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007f12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d009      	beq.n	8007f2e <f_write+0x58>
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007f20:	4611      	mov	r1, r2
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7fd fff0 	bl	8005f08 <unlock_fs>
 8007f28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f2c:	e173      	b.n	8008216 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	7d1b      	ldrb	r3, [r3, #20]
 8007f32:	f003 0302 	and.w	r3, r3, #2
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d106      	bne.n	8007f48 <f_write+0x72>
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	2107      	movs	r1, #7
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fd ffe2 	bl	8005f08 <unlock_fs>
 8007f44:	2307      	movs	r3, #7
 8007f46:	e166      	b.n	8008216 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	699a      	ldr	r2, [r3, #24]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	441a      	add	r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	f080 814b 	bcs.w	80081f0 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	43db      	mvns	r3, r3
 8007f60:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007f62:	e145      	b.n	80081f0 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f040 8101 	bne.w	8008174 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	0a5b      	lsrs	r3, r3, #9
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	8952      	ldrh	r2, [r2, #10]
 8007f7c:	3a01      	subs	r2, #1
 8007f7e:	4013      	ands	r3, r2
 8007f80:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d14d      	bne.n	8008024 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	699b      	ldr	r3, [r3, #24]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10c      	bne.n	8007faa <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d11a      	bne.n	8007fd2 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fe fc31 	bl	8006808 <create_chain>
 8007fa6:	62b8      	str	r0, [r7, #40]	; 0x28
 8007fa8:	e013      	b.n	8007fd2 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d007      	beq.n	8007fc2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	699b      	ldr	r3, [r3, #24]
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f7fe fcbd 	bl	8006938 <clmt_clust>
 8007fbe:	62b8      	str	r0, [r7, #40]	; 0x28
 8007fc0:	e007      	b.n	8007fd2 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	69db      	ldr	r3, [r3, #28]
 8007fc8:	4619      	mov	r1, r3
 8007fca:	4610      	mov	r0, r2
 8007fcc:	f7fe fc1c 	bl	8006808 <create_chain>
 8007fd0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f000 8110 	beq.w	80081fa <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d109      	bne.n	8007ff4 <f_write+0x11e>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	755a      	strb	r2, [r3, #21]
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	2102      	movs	r1, #2
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fd ff8c 	bl	8005f08 <unlock_fs>
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	e110      	b.n	8008216 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ffa:	d109      	bne.n	8008010 <f_write+0x13a>
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2201      	movs	r2, #1
 8008000:	755a      	strb	r2, [r3, #21]
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	2101      	movs	r1, #1
 8008006:	4618      	mov	r0, r3
 8008008:	f7fd ff7e 	bl	8005f08 <unlock_fs>
 800800c:	2301      	movs	r3, #1
 800800e:	e102      	b.n	8008216 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008014:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d102      	bne.n	8008024 <f_write+0x14e>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008022:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	7d1b      	ldrb	r3, [r3, #20]
 8008028:	b25b      	sxtb	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	da1d      	bge.n	800806a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	7858      	ldrb	r0, [r3, #1]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6a1a      	ldr	r2, [r3, #32]
 800803c:	2301      	movs	r3, #1
 800803e:	f7fd fe0f 	bl	8005c60 <disk_write>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d009      	beq.n	800805c <f_write+0x186>
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2201      	movs	r2, #1
 800804c:	755a      	strb	r2, [r3, #21]
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	2101      	movs	r1, #1
 8008052:	4618      	mov	r0, r3
 8008054:	f7fd ff58 	bl	8005f08 <unlock_fs>
 8008058:	2301      	movs	r3, #1
 800805a:	e0dc      	b.n	8008216 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	7d1b      	ldrb	r3, [r3, #20]
 8008060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008064:	b2da      	uxtb	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	69db      	ldr	r3, [r3, #28]
 8008070:	4619      	mov	r1, r3
 8008072:	4610      	mov	r0, r2
 8008074:	f7fe f9b0 	bl	80063d8 <clust2sect>
 8008078:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d109      	bne.n	8008094 <f_write+0x1be>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2202      	movs	r2, #2
 8008084:	755a      	strb	r2, [r3, #21]
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	2102      	movs	r1, #2
 800808a:	4618      	mov	r0, r3
 800808c:	f7fd ff3c 	bl	8005f08 <unlock_fs>
 8008090:	2302      	movs	r3, #2
 8008092:	e0c0      	b.n	8008216 <f_write+0x340>
			sect += csect;
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	4413      	add	r3, r2
 800809a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	0a5b      	lsrs	r3, r3, #9
 80080a0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80080a2:	6a3b      	ldr	r3, [r7, #32]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d041      	beq.n	800812c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	6a3b      	ldr	r3, [r7, #32]
 80080ac:	4413      	add	r3, r2
 80080ae:	693a      	ldr	r2, [r7, #16]
 80080b0:	8952      	ldrh	r2, [r2, #10]
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d905      	bls.n	80080c2 <f_write+0x1ec>
					cc = fs->csize - csect;
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	895b      	ldrh	r3, [r3, #10]
 80080ba:	461a      	mov	r2, r3
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	7858      	ldrb	r0, [r3, #1]
 80080c6:	6a3b      	ldr	r3, [r7, #32]
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	69f9      	ldr	r1, [r7, #28]
 80080cc:	f7fd fdc8 	bl	8005c60 <disk_write>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d009      	beq.n	80080ea <f_write+0x214>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2201      	movs	r2, #1
 80080da:	755a      	strb	r2, [r3, #21]
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	2101      	movs	r1, #1
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7fd ff11 	bl	8005f08 <unlock_fs>
 80080e6:	2301      	movs	r3, #1
 80080e8:	e095      	b.n	8008216 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6a1a      	ldr	r2, [r3, #32]
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	6a3a      	ldr	r2, [r7, #32]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d915      	bls.n	8008124 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6a1a      	ldr	r2, [r3, #32]
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	025b      	lsls	r3, r3, #9
 8008108:	69fa      	ldr	r2, [r7, #28]
 800810a:	4413      	add	r3, r2
 800810c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008110:	4619      	mov	r1, r3
 8008112:	f7fd fe65 	bl	8005de0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	7d1b      	ldrb	r3, [r3, #20]
 800811a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800811e:	b2da      	uxtb	r2, r3
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008124:	6a3b      	ldr	r3, [r7, #32]
 8008126:	025b      	lsls	r3, r3, #9
 8008128:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800812a:	e044      	b.n	80081b6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6a1b      	ldr	r3, [r3, #32]
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	429a      	cmp	r2, r3
 8008134:	d01b      	beq.n	800816e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	699a      	ldr	r2, [r3, #24]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800813e:	429a      	cmp	r2, r3
 8008140:	d215      	bcs.n	800816e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	7858      	ldrb	r0, [r3, #1]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800814c:	2301      	movs	r3, #1
 800814e:	697a      	ldr	r2, [r7, #20]
 8008150:	f7fd fd66 	bl	8005c20 <disk_read>
 8008154:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008156:	2b00      	cmp	r3, #0
 8008158:	d009      	beq.n	800816e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2201      	movs	r2, #1
 800815e:	755a      	strb	r2, [r3, #21]
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	2101      	movs	r1, #1
 8008164:	4618      	mov	r0, r3
 8008166:	f7fd fecf 	bl	8005f08 <unlock_fs>
 800816a:	2301      	movs	r3, #1
 800816c:	e053      	b.n	8008216 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	697a      	ldr	r2, [r7, #20]
 8008172:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800817c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008180:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	429a      	cmp	r2, r3
 8008188:	d901      	bls.n	800818e <f_write+0x2b8>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800819c:	4413      	add	r3, r2
 800819e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081a0:	69f9      	ldr	r1, [r7, #28]
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7fd fe1c 	bl	8005de0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	7d1b      	ldrb	r3, [r3, #20]
 80081ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80081b6:	69fa      	ldr	r2, [r7, #28]
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	4413      	add	r3, r2
 80081bc:	61fb      	str	r3, [r7, #28]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	699a      	ldr	r2, [r3, #24]
 80081c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c4:	441a      	add	r2, r3
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	619a      	str	r2, [r3, #24]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	68da      	ldr	r2, [r3, #12]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	bf38      	it	cc
 80081d6:	461a      	movcc	r2, r3
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	60da      	str	r2, [r3, #12]
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e2:	441a      	add	r2, r3
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f47f aeb6 	bne.w	8007f64 <f_write+0x8e>
 80081f8:	e000      	b.n	80081fc <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80081fa:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	7d1b      	ldrb	r3, [r3, #20]
 8008200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008204:	b2da      	uxtb	r2, r3
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	2100      	movs	r1, #0
 800820e:	4618      	mov	r0, r3
 8008210:	f7fd fe7a 	bl	8005f08 <unlock_fs>
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3730      	adds	r7, #48	; 0x30
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b086      	sub	sp, #24
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f107 0208 	add.w	r2, r7, #8
 800822c:	4611      	mov	r1, r2
 800822e:	4618      	mov	r0, r3
 8008230:	f7ff fa72 	bl	8007718 <validate>
 8008234:	4603      	mov	r3, r0
 8008236:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008238:	7dfb      	ldrb	r3, [r7, #23]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d16d      	bne.n	800831a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	7d1b      	ldrb	r3, [r3, #20]
 8008242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008246:	2b00      	cmp	r3, #0
 8008248:	d067      	beq.n	800831a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	7d1b      	ldrb	r3, [r3, #20]
 800824e:	b25b      	sxtb	r3, r3
 8008250:	2b00      	cmp	r3, #0
 8008252:	da1a      	bge.n	800828a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	7858      	ldrb	r0, [r3, #1]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a1a      	ldr	r2, [r3, #32]
 8008262:	2301      	movs	r3, #1
 8008264:	f7fd fcfc 	bl	8005c60 <disk_write>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d006      	beq.n	800827c <f_sync+0x5e>
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	2101      	movs	r1, #1
 8008272:	4618      	mov	r0, r3
 8008274:	f7fd fe48 	bl	8005f08 <unlock_fs>
 8008278:	2301      	movs	r3, #1
 800827a:	e055      	b.n	8008328 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	7d1b      	ldrb	r3, [r3, #20]
 8008280:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008284:	b2da      	uxtb	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800828a:	f7fc ff4b 	bl	8005124 <get_fattime>
 800828e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008290:	68ba      	ldr	r2, [r7, #8]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008296:	4619      	mov	r1, r3
 8008298:	4610      	mov	r0, r2
 800829a:	f7fe f801 	bl	80062a0 <move_window>
 800829e:	4603      	mov	r3, r0
 80082a0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80082a2:	7dfb      	ldrb	r3, [r7, #23]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d138      	bne.n	800831a <f_sync+0xfc>
					dir = fp->dir_ptr;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ac:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	330b      	adds	r3, #11
 80082b2:	781a      	ldrb	r2, [r3, #0]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	330b      	adds	r3, #11
 80082b8:	f042 0220 	orr.w	r2, r2, #32
 80082bc:	b2d2      	uxtb	r2, r2
 80082be:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6818      	ldr	r0, [r3, #0]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	461a      	mov	r2, r3
 80082ca:	68f9      	ldr	r1, [r7, #12]
 80082cc:	f7fe fd0e 	bl	8006cec <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f103 021c 	add.w	r2, r3, #28
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	4619      	mov	r1, r3
 80082dc:	4610      	mov	r0, r2
 80082de:	f7fd fd53 	bl	8005d88 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	3316      	adds	r3, #22
 80082e6:	6939      	ldr	r1, [r7, #16]
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fd fd4d 	bl	8005d88 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	3312      	adds	r3, #18
 80082f2:	2100      	movs	r1, #0
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7fd fd2c 	bl	8005d52 <st_word>
					fs->wflag = 1;
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	2201      	movs	r2, #1
 80082fe:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	4618      	mov	r0, r3
 8008304:	f7fd fffa 	bl	80062fc <sync_fs>
 8008308:	4603      	mov	r3, r0
 800830a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	7d1b      	ldrb	r3, [r3, #20]
 8008310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008314:	b2da      	uxtb	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	7dfa      	ldrb	r2, [r7, #23]
 800831e:	4611      	mov	r1, r2
 8008320:	4618      	mov	r0, r3
 8008322:	f7fd fdf1 	bl	8005f08 <unlock_fs>
 8008326:	7dfb      	ldrb	r3, [r7, #23]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3718      	adds	r7, #24
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f7ff ff70 	bl	800821e <f_sync>
 800833e:	4603      	mov	r3, r0
 8008340:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008342:	7bfb      	ldrb	r3, [r7, #15]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d11d      	bne.n	8008384 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f107 0208 	add.w	r2, r7, #8
 800834e:	4611      	mov	r1, r2
 8008350:	4618      	mov	r0, r3
 8008352:	f7ff f9e1 	bl	8007718 <validate>
 8008356:	4603      	mov	r3, r0
 8008358:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800835a:	7bfb      	ldrb	r3, [r7, #15]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d111      	bne.n	8008384 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	4618      	mov	r0, r3
 8008366:	f7fd fef7 	bl	8006158 <dec_lock>
 800836a:	4603      	mov	r3, r0
 800836c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800836e:	7bfb      	ldrb	r3, [r7, #15]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d102      	bne.n	800837a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2100      	movs	r1, #0
 800837e:	4618      	mov	r0, r3
 8008380:	f7fd fdc2 	bl	8005f08 <unlock_fs>
#endif
		}
	}
	return res;
 8008384:	7bfb      	ldrb	r3, [r7, #15]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b090      	sub	sp, #64	; 0x40
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f107 0208 	add.w	r2, r7, #8
 800839e:	4611      	mov	r1, r2
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7ff f9b9 	bl	8007718 <validate>
 80083a6:	4603      	mov	r3, r0
 80083a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80083ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d103      	bne.n	80083bc <f_lseek+0x2e>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	7d5b      	ldrb	r3, [r3, #21]
 80083b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80083bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d009      	beq.n	80083d8 <f_lseek+0x4a>
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80083ca:	4611      	mov	r1, r2
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fd fd9b 	bl	8005f08 <unlock_fs>
 80083d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80083d6:	e229      	b.n	800882c <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 80ea 	beq.w	80085b6 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083e8:	d164      	bne.n	80084b4 <f_lseek+0x126>
			tbl = fp->cltbl;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ee:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80083f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f2:	1d1a      	adds	r2, r3, #4
 80083f4:	627a      	str	r2, [r7, #36]	; 0x24
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	617b      	str	r3, [r7, #20]
 80083fa:	2302      	movs	r3, #2
 80083fc:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8008404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008406:	2b00      	cmp	r3, #0
 8008408:	d044      	beq.n	8008494 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800840a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840c:	613b      	str	r3, [r7, #16]
 800840e:	2300      	movs	r3, #0
 8008410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008414:	3302      	adds	r3, #2
 8008416:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8008418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841a:	60fb      	str	r3, [r7, #12]
 800841c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841e:	3301      	adds	r3, #1
 8008420:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008426:	4618      	mov	r0, r3
 8008428:	f7fd fff5 	bl	8006416 <get_fat>
 800842c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800842e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008430:	2b01      	cmp	r3, #1
 8008432:	d809      	bhi.n	8008448 <f_lseek+0xba>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2202      	movs	r2, #2
 8008438:	755a      	strb	r2, [r3, #21]
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	2102      	movs	r1, #2
 800843e:	4618      	mov	r0, r3
 8008440:	f7fd fd62 	bl	8005f08 <unlock_fs>
 8008444:	2302      	movs	r3, #2
 8008446:	e1f1      	b.n	800882c <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800844e:	d109      	bne.n	8008464 <f_lseek+0xd6>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	755a      	strb	r2, [r3, #21]
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2101      	movs	r1, #1
 800845a:	4618      	mov	r0, r3
 800845c:	f7fd fd54 	bl	8005f08 <unlock_fs>
 8008460:	2301      	movs	r3, #1
 8008462:	e1e3      	b.n	800882c <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	3301      	adds	r3, #1
 8008468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800846a:	429a      	cmp	r2, r3
 800846c:	d0d4      	beq.n	8008418 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800846e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	429a      	cmp	r2, r3
 8008474:	d809      	bhi.n	800848a <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8008476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008478:	1d1a      	adds	r2, r3, #4
 800847a:	627a      	str	r2, [r7, #36]	; 0x24
 800847c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008482:	1d1a      	adds	r2, r3, #4
 8008484:	627a      	str	r2, [r7, #36]	; 0x24
 8008486:	693a      	ldr	r2, [r7, #16]
 8008488:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008490:	429a      	cmp	r2, r3
 8008492:	d3ba      	bcc.n	800840a <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800849a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800849c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d803      	bhi.n	80084ac <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 80084a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a6:	2200      	movs	r2, #0
 80084a8:	601a      	str	r2, [r3, #0]
 80084aa:	e1b6      	b.n	800881a <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80084ac:	2311      	movs	r3, #17
 80084ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80084b2:	e1b2      	b.n	800881a <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	683a      	ldr	r2, [r7, #0]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d902      	bls.n	80084c4 <f_lseek+0x136>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 81a4 	beq.w	800881a <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	3b01      	subs	r3, #1
 80084d6:	4619      	mov	r1, r3
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f7fe fa2d 	bl	8006938 <clmt_clust>
 80084de:	4602      	mov	r2, r0
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	69db      	ldr	r3, [r3, #28]
 80084ea:	4619      	mov	r1, r3
 80084ec:	4610      	mov	r0, r2
 80084ee:	f7fd ff73 	bl	80063d8 <clust2sect>
 80084f2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d109      	bne.n	800850e <f_lseek+0x180>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2202      	movs	r2, #2
 80084fe:	755a      	strb	r2, [r3, #21]
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2102      	movs	r1, #2
 8008504:	4618      	mov	r0, r3
 8008506:	f7fd fcff 	bl	8005f08 <unlock_fs>
 800850a:	2302      	movs	r3, #2
 800850c:	e18e      	b.n	800882c <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	3b01      	subs	r3, #1
 8008512:	0a5b      	lsrs	r3, r3, #9
 8008514:	68ba      	ldr	r2, [r7, #8]
 8008516:	8952      	ldrh	r2, [r2, #10]
 8008518:	3a01      	subs	r2, #1
 800851a:	4013      	ands	r3, r2
 800851c:	69ba      	ldr	r2, [r7, #24]
 800851e:	4413      	add	r3, r2
 8008520:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800852a:	2b00      	cmp	r3, #0
 800852c:	f000 8175 	beq.w	800881a <f_lseek+0x48c>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a1b      	ldr	r3, [r3, #32]
 8008534:	69ba      	ldr	r2, [r7, #24]
 8008536:	429a      	cmp	r2, r3
 8008538:	f000 816f 	beq.w	800881a <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	7d1b      	ldrb	r3, [r3, #20]
 8008540:	b25b      	sxtb	r3, r3
 8008542:	2b00      	cmp	r3, #0
 8008544:	da1d      	bge.n	8008582 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	7858      	ldrb	r0, [r3, #1]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a1a      	ldr	r2, [r3, #32]
 8008554:	2301      	movs	r3, #1
 8008556:	f7fd fb83 	bl	8005c60 <disk_write>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d009      	beq.n	8008574 <f_lseek+0x1e6>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	755a      	strb	r2, [r3, #21]
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	2101      	movs	r1, #1
 800856a:	4618      	mov	r0, r3
 800856c:	f7fd fccc 	bl	8005f08 <unlock_fs>
 8008570:	2301      	movs	r3, #1
 8008572:	e15b      	b.n	800882c <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	7d1b      	ldrb	r3, [r3, #20]
 8008578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800857c:	b2da      	uxtb	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	7858      	ldrb	r0, [r3, #1]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800858c:	2301      	movs	r3, #1
 800858e:	69ba      	ldr	r2, [r7, #24]
 8008590:	f7fd fb46 	bl	8005c20 <disk_read>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d009      	beq.n	80085ae <f_lseek+0x220>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	755a      	strb	r2, [r3, #21]
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	2101      	movs	r1, #1
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fd fcaf 	bl	8005f08 <unlock_fs>
 80085aa:	2301      	movs	r3, #1
 80085ac:	e13e      	b.n	800882c <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	69ba      	ldr	r2, [r7, #24]
 80085b2:	621a      	str	r2, [r3, #32]
 80085b4:	e131      	b.n	800881a <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d908      	bls.n	80085d2 <f_lseek+0x244>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	7d1b      	ldrb	r3, [r3, #20]
 80085c4:	f003 0302 	and.w	r3, r3, #2
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d102      	bne.n	80085d2 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80085d8:	2300      	movs	r3, #0
 80085da:	637b      	str	r3, [r7, #52]	; 0x34
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085e0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f000 80c0 	beq.w	800876a <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	895b      	ldrh	r3, [r3, #10]
 80085ee:	025b      	lsls	r3, r3, #9
 80085f0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d01b      	beq.n	8008630 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	1e5a      	subs	r2, r3, #1
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8008602:	6a3b      	ldr	r3, [r7, #32]
 8008604:	1e59      	subs	r1, r3, #1
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800860c:	429a      	cmp	r2, r3
 800860e:	d30f      	bcc.n	8008630 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	1e5a      	subs	r2, r3, #1
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	425b      	negs	r3, r3
 8008618:	401a      	ands	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	683a      	ldr	r2, [r7, #0]
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	69db      	ldr	r3, [r3, #28]
 800862c:	63bb      	str	r3, [r7, #56]	; 0x38
 800862e:	e02c      	b.n	800868a <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008638:	2b00      	cmp	r3, #0
 800863a:	d123      	bne.n	8008684 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2100      	movs	r1, #0
 8008640:	4618      	mov	r0, r3
 8008642:	f7fe f8e1 	bl	8006808 <create_chain>
 8008646:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864a:	2b01      	cmp	r3, #1
 800864c:	d109      	bne.n	8008662 <f_lseek+0x2d4>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2202      	movs	r2, #2
 8008652:	755a      	strb	r2, [r3, #21]
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	2102      	movs	r1, #2
 8008658:	4618      	mov	r0, r3
 800865a:	f7fd fc55 	bl	8005f08 <unlock_fs>
 800865e:	2302      	movs	r3, #2
 8008660:	e0e4      	b.n	800882c <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008668:	d109      	bne.n	800867e <f_lseek+0x2f0>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2201      	movs	r2, #1
 800866e:	755a      	strb	r2, [r3, #21]
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	2101      	movs	r1, #1
 8008674:	4618      	mov	r0, r3
 8008676:	f7fd fc47 	bl	8005f08 <unlock_fs>
 800867a:	2301      	movs	r3, #1
 800867c:	e0d6      	b.n	800882c <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008682:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008688:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800868a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868c:	2b00      	cmp	r3, #0
 800868e:	d06c      	beq.n	800876a <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8008690:	e044      	b.n	800871c <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	603b      	str	r3, [r7, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	699a      	ldr	r2, [r3, #24]
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	441a      	add	r2, r3
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	7d1b      	ldrb	r3, [r3, #20]
 80086aa:	f003 0302 	and.w	r3, r3, #2
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00b      	beq.n	80086ca <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7fe f8a6 	bl	8006808 <create_chain>
 80086bc:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80086be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d108      	bne.n	80086d6 <f_lseek+0x348>
							ofs = 0; break;
 80086c4:	2300      	movs	r3, #0
 80086c6:	603b      	str	r3, [r7, #0]
 80086c8:	e02c      	b.n	8008724 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fd fea1 	bl	8006416 <get_fat>
 80086d4:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80086d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086dc:	d109      	bne.n	80086f2 <f_lseek+0x364>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2201      	movs	r2, #1
 80086e2:	755a      	strb	r2, [r3, #21]
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	2101      	movs	r1, #1
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fd fc0d 	bl	8005f08 <unlock_fs>
 80086ee:	2301      	movs	r3, #1
 80086f0:	e09c      	b.n	800882c <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80086f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d904      	bls.n	8008702 <f_lseek+0x374>
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086fe:	429a      	cmp	r2, r3
 8008700:	d309      	bcc.n	8008716 <f_lseek+0x388>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2202      	movs	r2, #2
 8008706:	755a      	strb	r2, [r3, #21]
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2102      	movs	r1, #2
 800870c:	4618      	mov	r0, r3
 800870e:	f7fd fbfb 	bl	8005f08 <unlock_fs>
 8008712:	2302      	movs	r3, #2
 8008714:	e08a      	b.n	800882c <f_lseek+0x49e>
					fp->clust = clst;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800871a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800871c:	683a      	ldr	r2, [r7, #0]
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	429a      	cmp	r2, r3
 8008722:	d8b6      	bhi.n	8008692 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	699a      	ldr	r2, [r3, #24]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	441a      	add	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008736:	2b00      	cmp	r3, #0
 8008738:	d017      	beq.n	800876a <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800873e:	4618      	mov	r0, r3
 8008740:	f7fd fe4a 	bl	80063d8 <clust2sect>
 8008744:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008748:	2b00      	cmp	r3, #0
 800874a:	d109      	bne.n	8008760 <f_lseek+0x3d2>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2202      	movs	r2, #2
 8008750:	755a      	strb	r2, [r3, #21]
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2102      	movs	r1, #2
 8008756:	4618      	mov	r0, r3
 8008758:	f7fd fbd6 	bl	8005f08 <unlock_fs>
 800875c:	2302      	movs	r3, #2
 800875e:	e065      	b.n	800882c <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	0a5b      	lsrs	r3, r3, #9
 8008764:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008766:	4413      	add	r3, r2
 8008768:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	699a      	ldr	r2, [r3, #24]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	429a      	cmp	r2, r3
 8008774:	d90a      	bls.n	800878c <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	699a      	ldr	r2, [r3, #24]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	7d1b      	ldrb	r3, [r3, #20]
 8008782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008786:	b2da      	uxtb	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008794:	2b00      	cmp	r3, #0
 8008796:	d040      	beq.n	800881a <f_lseek+0x48c>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a1b      	ldr	r3, [r3, #32]
 800879c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800879e:	429a      	cmp	r2, r3
 80087a0:	d03b      	beq.n	800881a <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	7d1b      	ldrb	r3, [r3, #20]
 80087a6:	b25b      	sxtb	r3, r3
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	da1d      	bge.n	80087e8 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	7858      	ldrb	r0, [r3, #1]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a1a      	ldr	r2, [r3, #32]
 80087ba:	2301      	movs	r3, #1
 80087bc:	f7fd fa50 	bl	8005c60 <disk_write>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d009      	beq.n	80087da <f_lseek+0x44c>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	755a      	strb	r2, [r3, #21]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	2101      	movs	r1, #1
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7fd fb99 	bl	8005f08 <unlock_fs>
 80087d6:	2301      	movs	r3, #1
 80087d8:	e028      	b.n	800882c <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	7d1b      	ldrb	r3, [r3, #20]
 80087de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087e2:	b2da      	uxtb	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	7858      	ldrb	r0, [r3, #1]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087f2:	2301      	movs	r3, #1
 80087f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087f6:	f7fd fa13 	bl	8005c20 <disk_read>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d009      	beq.n	8008814 <f_lseek+0x486>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	755a      	strb	r2, [r3, #21]
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	2101      	movs	r1, #1
 800880a:	4618      	mov	r0, r3
 800880c:	f7fd fb7c 	bl	8005f08 <unlock_fs>
 8008810:	2301      	movs	r3, #1
 8008812:	e00b      	b.n	800882c <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008818:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008820:	4611      	mov	r1, r2
 8008822:	4618      	mov	r0, r3
 8008824:	f7fd fb70 	bl	8005f08 <unlock_fs>
 8008828:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800882c:	4618      	mov	r0, r3
 800882e:	3740      	adds	r7, #64	; 0x40
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b09e      	sub	sp, #120	; 0x78
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800883c:	2300      	movs	r3, #0
 800883e:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8008840:	f107 010c 	add.w	r1, r7, #12
 8008844:	1d3b      	adds	r3, r7, #4
 8008846:	2202      	movs	r2, #2
 8008848:	4618      	mov	r0, r3
 800884a:	f7fe fd11 	bl	8007270 <find_volume>
 800884e:	4603      	mov	r3, r0
 8008850:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8008858:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800885c:	2b00      	cmp	r3, #0
 800885e:	f040 808e 	bne.w	800897e <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008868:	4611      	mov	r1, r2
 800886a:	4618      	mov	r0, r3
 800886c:	f7fe fbf4 	bl	8007058 <follow_path>
 8008870:	4603      	mov	r3, r0
 8008872:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8008876:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800887a:	2b00      	cmp	r3, #0
 800887c:	d108      	bne.n	8008890 <f_unlink+0x5c>
 800887e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008882:	2102      	movs	r1, #2
 8008884:	4618      	mov	r0, r3
 8008886:	f7fd fb5b 	bl	8005f40 <chk_lock>
 800888a:	4603      	mov	r3, r0
 800888c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8008890:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008894:	2b00      	cmp	r3, #0
 8008896:	d172      	bne.n	800897e <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8008898:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800889c:	b25b      	sxtb	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	da03      	bge.n	80088aa <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80088a2:	2306      	movs	r3, #6
 80088a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80088a8:	e008      	b.n	80088bc <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80088aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80088ae:	f003 0301 	and.w	r3, r3, #1
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d002      	beq.n	80088bc <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80088b6:	2307      	movs	r3, #7
 80088b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 80088bc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d134      	bne.n	800892e <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80088c8:	4611      	mov	r1, r2
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7fe f9ef 	bl	8006cae <ld_clust>
 80088d0:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80088d2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80088d6:	f003 0310 	and.w	r3, r3, #16
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d027      	beq.n	800892e <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80088e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088e4:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80088e6:	f107 0310 	add.w	r3, r7, #16
 80088ea:	2100      	movs	r1, #0
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7fe f857 	bl	80069a0 <dir_sdi>
 80088f2:	4603      	mov	r3, r0
 80088f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80088f8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d116      	bne.n	800892e <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8008900:	f107 0310 	add.w	r3, r7, #16
 8008904:	2100      	movs	r1, #0
 8008906:	4618      	mov	r0, r3
 8008908:	f7fe fa10 	bl	8006d2c <dir_read>
 800890c:	4603      	mov	r3, r0
 800890e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8008912:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008916:	2b00      	cmp	r3, #0
 8008918:	d102      	bne.n	8008920 <f_unlink+0xec>
 800891a:	2307      	movs	r3, #7
 800891c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8008920:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008924:	2b04      	cmp	r3, #4
 8008926:	d102      	bne.n	800892e <f_unlink+0xfa>
 8008928:	2300      	movs	r3, #0
 800892a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800892e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008932:	2b00      	cmp	r3, #0
 8008934:	d123      	bne.n	800897e <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8008936:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe fada 	bl	8006ef4 <dir_remove>
 8008940:	4603      	mov	r3, r0
 8008942:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8008946:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800894a:	2b00      	cmp	r3, #0
 800894c:	d10c      	bne.n	8008968 <f_unlink+0x134>
 800894e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008950:	2b00      	cmp	r3, #0
 8008952:	d009      	beq.n	8008968 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8008954:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008958:	2200      	movs	r2, #0
 800895a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800895c:	4618      	mov	r0, r3
 800895e:	f7fd feee 	bl	800673e <remove_chain>
 8008962:	4603      	mov	r3, r0
 8008964:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8008968:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800896c:	2b00      	cmp	r3, #0
 800896e:	d106      	bne.n	800897e <f_unlink+0x14a>
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	4618      	mov	r0, r3
 8008974:	f7fd fcc2 	bl	80062fc <sync_fs>
 8008978:	4603      	mov	r3, r0
 800897a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8008984:	4611      	mov	r1, r2
 8008986:	4618      	mov	r0, r3
 8008988:	f7fd fabe 	bl	8005f08 <unlock_fs>
 800898c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8008990:	4618      	mov	r0, r3
 8008992:	3778      	adds	r7, #120	; 0x78
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008998:	b480      	push	{r7}
 800899a:	b087      	sub	sp, #28
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	4613      	mov	r3, r2
 80089a4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80089a6:	2301      	movs	r3, #1
 80089a8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80089aa:	2300      	movs	r3, #0
 80089ac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80089ae:	4b1f      	ldr	r3, [pc, #124]	; (8008a2c <FATFS_LinkDriverEx+0x94>)
 80089b0:	7a5b      	ldrb	r3, [r3, #9]
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d131      	bne.n	8008a1c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80089b8:	4b1c      	ldr	r3, [pc, #112]	; (8008a2c <FATFS_LinkDriverEx+0x94>)
 80089ba:	7a5b      	ldrb	r3, [r3, #9]
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	461a      	mov	r2, r3
 80089c0:	4b1a      	ldr	r3, [pc, #104]	; (8008a2c <FATFS_LinkDriverEx+0x94>)
 80089c2:	2100      	movs	r1, #0
 80089c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80089c6:	4b19      	ldr	r3, [pc, #100]	; (8008a2c <FATFS_LinkDriverEx+0x94>)
 80089c8:	7a5b      	ldrb	r3, [r3, #9]
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	4a17      	ldr	r2, [pc, #92]	; (8008a2c <FATFS_LinkDriverEx+0x94>)
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4413      	add	r3, r2
 80089d2:	68fa      	ldr	r2, [r7, #12]
 80089d4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80089d6:	4b15      	ldr	r3, [pc, #84]	; (8008a2c <FATFS_LinkDriverEx+0x94>)
 80089d8:	7a5b      	ldrb	r3, [r3, #9]
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	461a      	mov	r2, r3
 80089de:	4b13      	ldr	r3, [pc, #76]	; (8008a2c <FATFS_LinkDriverEx+0x94>)
 80089e0:	4413      	add	r3, r2
 80089e2:	79fa      	ldrb	r2, [r7, #7]
 80089e4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80089e6:	4b11      	ldr	r3, [pc, #68]	; (8008a2c <FATFS_LinkDriverEx+0x94>)
 80089e8:	7a5b      	ldrb	r3, [r3, #9]
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	1c5a      	adds	r2, r3, #1
 80089ee:	b2d1      	uxtb	r1, r2
 80089f0:	4a0e      	ldr	r2, [pc, #56]	; (8008a2c <FATFS_LinkDriverEx+0x94>)
 80089f2:	7251      	strb	r1, [r2, #9]
 80089f4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80089f6:	7dbb      	ldrb	r3, [r7, #22]
 80089f8:	3330      	adds	r3, #48	; 0x30
 80089fa:	b2da      	uxtb	r2, r3
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	3301      	adds	r3, #1
 8008a04:	223a      	movs	r2, #58	; 0x3a
 8008a06:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	3302      	adds	r3, #2
 8008a0c:	222f      	movs	r2, #47	; 0x2f
 8008a0e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	3303      	adds	r3, #3
 8008a14:	2200      	movs	r2, #0
 8008a16:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	371c      	adds	r7, #28
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	200001d8 	.word	0x200001d8

08008a30 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	6839      	ldr	r1, [r7, #0]
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f7ff ffaa 	bl	8008998 <FATFS_LinkDriverEx>
 8008a44:	4603      	mov	r3, r0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b084      	sub	sp, #16
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	4603      	mov	r3, r0
 8008a56:	6039      	str	r1, [r7, #0]
 8008a58:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	2101      	movs	r1, #1
 8008a5e:	2001      	movs	r0, #1
 8008a60:	f000 fb44 	bl	80090ec <osSemaphoreNew>
 8008a64:	4602      	mov	r2, r0
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	bf14      	ite	ne
 8008a72:	2301      	movne	r3, #1
 8008a74:	2300      	moveq	r3, #0
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	60fb      	str	r3, [r7, #12]

    return ret;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 fc4d 	bl	800932c <osSemaphoreDelete>
#endif
    return 1;
 8008a92:	2301      	movs	r3, #1
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8008aa8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fba7 	bl	8009200 <osSemaphoreAcquire>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d101      	bne.n	8008abc <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008abc:	68fb      	ldr	r3, [r7, #12]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b082      	sub	sp, #8
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 fbe8 	bl	80092a4 <osSemaphoreRelease>
#endif
}
 8008ad4:	bf00      	nop
 8008ad6:	3708      	adds	r7, #8
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <__NVIC_SetPriority>:
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	6039      	str	r1, [r7, #0]
 8008ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	db0a      	blt.n	8008b06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	490c      	ldr	r1, [pc, #48]	; (8008b28 <__NVIC_SetPriority+0x4c>)
 8008af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008afa:	0112      	lsls	r2, r2, #4
 8008afc:	b2d2      	uxtb	r2, r2
 8008afe:	440b      	add	r3, r1
 8008b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008b04:	e00a      	b.n	8008b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	4908      	ldr	r1, [pc, #32]	; (8008b2c <__NVIC_SetPriority+0x50>)
 8008b0c:	79fb      	ldrb	r3, [r7, #7]
 8008b0e:	f003 030f 	and.w	r3, r3, #15
 8008b12:	3b04      	subs	r3, #4
 8008b14:	0112      	lsls	r2, r2, #4
 8008b16:	b2d2      	uxtb	r2, r2
 8008b18:	440b      	add	r3, r1
 8008b1a:	761a      	strb	r2, [r3, #24]
}
 8008b1c:	bf00      	nop
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr
 8008b28:	e000e100 	.word	0xe000e100
 8008b2c:	e000ed00 	.word	0xe000ed00

08008b30 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008b30:	b580      	push	{r7, lr}
 8008b32:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008b34:	4b05      	ldr	r3, [pc, #20]	; (8008b4c <SysTick_Handler+0x1c>)
 8008b36:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008b38:	f002 fd52 	bl	800b5e0 <xTaskGetSchedulerState>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d001      	beq.n	8008b46 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008b42:	f003 fcf1 	bl	800c528 <xPortSysTickHandler>
  }
}
 8008b46:	bf00      	nop
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	e000e010 	.word	0xe000e010

08008b50 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008b50:	b580      	push	{r7, lr}
 8008b52:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008b54:	2100      	movs	r1, #0
 8008b56:	f06f 0004 	mvn.w	r0, #4
 8008b5a:	f7ff ffbf 	bl	8008adc <__NVIC_SetPriority>
#endif
}
 8008b5e:	bf00      	nop
 8008b60:	bd80      	pop	{r7, pc}
	...

08008b64 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b6a:	f3ef 8305 	mrs	r3, IPSR
 8008b6e:	603b      	str	r3, [r7, #0]
  return(result);
 8008b70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008b76:	f06f 0305 	mvn.w	r3, #5
 8008b7a:	607b      	str	r3, [r7, #4]
 8008b7c:	e00c      	b.n	8008b98 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008b7e:	4b0a      	ldr	r3, [pc, #40]	; (8008ba8 <osKernelInitialize+0x44>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d105      	bne.n	8008b92 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008b86:	4b08      	ldr	r3, [pc, #32]	; (8008ba8 <osKernelInitialize+0x44>)
 8008b88:	2201      	movs	r2, #1
 8008b8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	607b      	str	r3, [r7, #4]
 8008b90:	e002      	b.n	8008b98 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008b98:	687b      	ldr	r3, [r7, #4]
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	370c      	adds	r7, #12
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	200001e4 	.word	0x200001e4

08008bac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bb2:	f3ef 8305 	mrs	r3, IPSR
 8008bb6:	603b      	str	r3, [r7, #0]
  return(result);
 8008bb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d003      	beq.n	8008bc6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008bbe:	f06f 0305 	mvn.w	r3, #5
 8008bc2:	607b      	str	r3, [r7, #4]
 8008bc4:	e010      	b.n	8008be8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008bc6:	4b0b      	ldr	r3, [pc, #44]	; (8008bf4 <osKernelStart+0x48>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d109      	bne.n	8008be2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008bce:	f7ff ffbf 	bl	8008b50 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008bd2:	4b08      	ldr	r3, [pc, #32]	; (8008bf4 <osKernelStart+0x48>)
 8008bd4:	2202      	movs	r2, #2
 8008bd6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008bd8:	f002 f896 	bl	800ad08 <vTaskStartScheduler>
      stat = osOK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	607b      	str	r3, [r7, #4]
 8008be0:	e002      	b.n	8008be8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008be6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008be8:	687b      	ldr	r3, [r7, #4]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	200001e4 	.word	0x200001e4

08008bf8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b08e      	sub	sp, #56	; 0x38
 8008bfc:	af04      	add	r7, sp, #16
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008c04:	2300      	movs	r3, #0
 8008c06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c08:	f3ef 8305 	mrs	r3, IPSR
 8008c0c:	617b      	str	r3, [r7, #20]
  return(result);
 8008c0e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d17e      	bne.n	8008d12 <osThreadNew+0x11a>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d07b      	beq.n	8008d12 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008c1a:	2380      	movs	r3, #128	; 0x80
 8008c1c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008c1e:	2318      	movs	r3, #24
 8008c20:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008c22:	2300      	movs	r3, #0
 8008c24:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c2a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d045      	beq.n	8008cbe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d002      	beq.n	8008c40 <osThreadNew+0x48>
        name = attr->name;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	699b      	ldr	r3, [r3, #24]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d002      	beq.n	8008c4e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d008      	beq.n	8008c66 <osThreadNew+0x6e>
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	2b38      	cmp	r3, #56	; 0x38
 8008c58:	d805      	bhi.n	8008c66 <osThreadNew+0x6e>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <osThreadNew+0x72>
        return (NULL);
 8008c66:	2300      	movs	r3, #0
 8008c68:	e054      	b.n	8008d14 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	695b      	ldr	r3, [r3, #20]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d003      	beq.n	8008c7a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	695b      	ldr	r3, [r3, #20]
 8008c76:	089b      	lsrs	r3, r3, #2
 8008c78:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00e      	beq.n	8008ca0 <osThreadNew+0xa8>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	2bbb      	cmp	r3, #187	; 0xbb
 8008c88:	d90a      	bls.n	8008ca0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d006      	beq.n	8008ca0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d002      	beq.n	8008ca0 <osThreadNew+0xa8>
        mem = 1;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	61bb      	str	r3, [r7, #24]
 8008c9e:	e010      	b.n	8008cc2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d10c      	bne.n	8008cc2 <osThreadNew+0xca>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d108      	bne.n	8008cc2 <osThreadNew+0xca>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d104      	bne.n	8008cc2 <osThreadNew+0xca>
          mem = 0;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	61bb      	str	r3, [r7, #24]
 8008cbc:	e001      	b.n	8008cc2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d110      	bne.n	8008cea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008cd0:	9202      	str	r2, [sp, #8]
 8008cd2:	9301      	str	r3, [sp, #4]
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	9300      	str	r3, [sp, #0]
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	6a3a      	ldr	r2, [r7, #32]
 8008cdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f001 fe26 	bl	800a930 <xTaskCreateStatic>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	613b      	str	r3, [r7, #16]
 8008ce8:	e013      	b.n	8008d12 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d110      	bne.n	8008d12 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008cf0:	6a3b      	ldr	r3, [r7, #32]
 8008cf2:	b29a      	uxth	r2, r3
 8008cf4:	f107 0310 	add.w	r3, r7, #16
 8008cf8:	9301      	str	r3, [sp, #4]
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	9300      	str	r3, [sp, #0]
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f001 fe71 	bl	800a9ea <xTaskCreate>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d001      	beq.n	8008d12 <osThreadNew+0x11a>
            hTask = NULL;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008d12:	693b      	ldr	r3, [r7, #16]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3728      	adds	r7, #40	; 0x28
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d24:	f3ef 8305 	mrs	r3, IPSR
 8008d28:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d2a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d003      	beq.n	8008d38 <osDelay+0x1c>
    stat = osErrorISR;
 8008d30:	f06f 0305 	mvn.w	r3, #5
 8008d34:	60fb      	str	r3, [r7, #12]
 8008d36:	e007      	b.n	8008d48 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d002      	beq.n	8008d48 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f001 ffac 	bl	800aca0 <vTaskDelay>
    }
  }

  return (stat);
 8008d48:	68fb      	ldr	r3, [r7, #12]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b084      	sub	sp, #16
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f003 fa06 	bl	800c16c <pvTimerGetTimerID>
 8008d60:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d005      	beq.n	8008d74 <TimerCallback+0x22>
    callb->func (callb->arg);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	6852      	ldr	r2, [r2, #4]
 8008d70:	4610      	mov	r0, r2
 8008d72:	4798      	blx	r3
  }
}
 8008d74:	bf00      	nop
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b08c      	sub	sp, #48	; 0x30
 8008d80:	af02      	add	r7, sp, #8
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	607a      	str	r2, [r7, #4]
 8008d86:	603b      	str	r3, [r7, #0]
 8008d88:	460b      	mov	r3, r1
 8008d8a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d90:	f3ef 8305 	mrs	r3, IPSR
 8008d94:	613b      	str	r3, [r7, #16]
  return(result);
 8008d96:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d163      	bne.n	8008e64 <osTimerNew+0xe8>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d060      	beq.n	8008e64 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8008da2:	2008      	movs	r0, #8
 8008da4:	f003 fc50 	bl	800c648 <pvPortMalloc>
 8008da8:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d059      	beq.n	8008e64 <osTimerNew+0xe8>
      callb->func = func;
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8008dbc:	7afb      	ldrb	r3, [r7, #11]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d102      	bne.n	8008dc8 <osTimerNew+0x4c>
        reload = pdFALSE;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	61fb      	str	r3, [r7, #28]
 8008dc6:	e001      	b.n	8008dcc <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8008dcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008dd0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d01c      	beq.n	8008e16 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d002      	beq.n	8008dea <osTimerNew+0x6e>
          name = attr->name;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d006      	beq.n	8008e00 <osTimerNew+0x84>
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	2b2b      	cmp	r3, #43	; 0x2b
 8008df8:	d902      	bls.n	8008e00 <osTimerNew+0x84>
          mem = 1;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	61bb      	str	r3, [r7, #24]
 8008dfe:	e00c      	b.n	8008e1a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d108      	bne.n	8008e1a <osTimerNew+0x9e>
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d104      	bne.n	8008e1a <osTimerNew+0x9e>
            mem = 0;
 8008e10:	2300      	movs	r3, #0
 8008e12:	61bb      	str	r3, [r7, #24]
 8008e14:	e001      	b.n	8008e1a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8008e16:	2300      	movs	r3, #0
 8008e18:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d10c      	bne.n	8008e3a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	9301      	str	r3, [sp, #4]
 8008e26:	4b12      	ldr	r3, [pc, #72]	; (8008e70 <osTimerNew+0xf4>)
 8008e28:	9300      	str	r3, [sp, #0]
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	69fa      	ldr	r2, [r7, #28]
 8008e2e:	2101      	movs	r1, #1
 8008e30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e32:	f002 fe1c 	bl	800ba6e <xTimerCreateStatic>
 8008e36:	6238      	str	r0, [r7, #32]
 8008e38:	e00b      	b.n	8008e52 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d108      	bne.n	8008e52 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8008e40:	4b0b      	ldr	r3, [pc, #44]	; (8008e70 <osTimerNew+0xf4>)
 8008e42:	9300      	str	r3, [sp, #0]
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	69fa      	ldr	r2, [r7, #28]
 8008e48:	2101      	movs	r1, #1
 8008e4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e4c:	f002 fdee 	bl	800ba2c <xTimerCreate>
 8008e50:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8008e52:	6a3b      	ldr	r3, [r7, #32]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d105      	bne.n	8008e64 <osTimerNew+0xe8>
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d002      	beq.n	8008e64 <osTimerNew+0xe8>
        vPortFree (callb);
 8008e5e:	6978      	ldr	r0, [r7, #20]
 8008e60:	f003 fcbe 	bl	800c7e0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8008e64:	6a3b      	ldr	r3, [r7, #32]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3728      	adds	r7, #40	; 0x28
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	08008d53 	.word	0x08008d53

08008e74 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b088      	sub	sp, #32
 8008e78:	af02      	add	r7, sp, #8
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e82:	f3ef 8305 	mrs	r3, IPSR
 8008e86:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e88:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d003      	beq.n	8008e96 <osTimerStart+0x22>
    stat = osErrorISR;
 8008e8e:	f06f 0305 	mvn.w	r3, #5
 8008e92:	617b      	str	r3, [r7, #20]
 8008e94:	e017      	b.n	8008ec6 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d103      	bne.n	8008ea4 <osTimerStart+0x30>
    stat = osErrorParameter;
 8008e9c:	f06f 0303 	mvn.w	r3, #3
 8008ea0:	617b      	str	r3, [r7, #20]
 8008ea2:	e010      	b.n	8008ec6 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	9300      	str	r3, [sp, #0]
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	683a      	ldr	r2, [r7, #0]
 8008eac:	2104      	movs	r1, #4
 8008eae:	6938      	ldr	r0, [r7, #16]
 8008eb0:	f002 fe56 	bl	800bb60 <xTimerGenericCommand>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d102      	bne.n	8008ec0 <osTimerStart+0x4c>
      stat = osOK;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	617b      	str	r3, [r7, #20]
 8008ebe:	e002      	b.n	8008ec6 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8008ec0:	f06f 0302 	mvn.w	r3, #2
 8008ec4:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008ec6:	697b      	ldr	r3, [r7, #20]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3718      	adds	r7, #24
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b088      	sub	sp, #32
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008edc:	f3ef 8305 	mrs	r3, IPSR
 8008ee0:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ee2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d174      	bne.n	8008fd2 <osMutexNew+0x102>
    if (attr != NULL) {
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d003      	beq.n	8008ef6 <osMutexNew+0x26>
      type = attr->attr_bits;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	61bb      	str	r3, [r7, #24]
 8008ef4:	e001      	b.n	8008efa <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	f003 0301 	and.w	r3, r3, #1
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d002      	beq.n	8008f0a <osMutexNew+0x3a>
      rmtx = 1U;
 8008f04:	2301      	movs	r3, #1
 8008f06:	617b      	str	r3, [r7, #20]
 8008f08:	e001      	b.n	8008f0e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	f003 0308 	and.w	r3, r3, #8
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d15c      	bne.n	8008fd2 <osMutexNew+0x102>
      mem = -1;
 8008f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f1c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d015      	beq.n	8008f50 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d006      	beq.n	8008f3a <osMutexNew+0x6a>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	2b4f      	cmp	r3, #79	; 0x4f
 8008f32:	d902      	bls.n	8008f3a <osMutexNew+0x6a>
          mem = 1;
 8008f34:	2301      	movs	r3, #1
 8008f36:	613b      	str	r3, [r7, #16]
 8008f38:	e00c      	b.n	8008f54 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d108      	bne.n	8008f54 <osMutexNew+0x84>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d104      	bne.n	8008f54 <osMutexNew+0x84>
            mem = 0;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	613b      	str	r3, [r7, #16]
 8008f4e:	e001      	b.n	8008f54 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008f50:	2300      	movs	r3, #0
 8008f52:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d112      	bne.n	8008f80 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d007      	beq.n	8008f70 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	4619      	mov	r1, r3
 8008f66:	2004      	movs	r0, #4
 8008f68:	f000 fd8d 	bl	8009a86 <xQueueCreateMutexStatic>
 8008f6c:	61f8      	str	r0, [r7, #28]
 8008f6e:	e016      	b.n	8008f9e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	4619      	mov	r1, r3
 8008f76:	2001      	movs	r0, #1
 8008f78:	f000 fd85 	bl	8009a86 <xQueueCreateMutexStatic>
 8008f7c:	61f8      	str	r0, [r7, #28]
 8008f7e:	e00e      	b.n	8008f9e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10b      	bne.n	8008f9e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d004      	beq.n	8008f96 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008f8c:	2004      	movs	r0, #4
 8008f8e:	f000 fd62 	bl	8009a56 <xQueueCreateMutex>
 8008f92:	61f8      	str	r0, [r7, #28]
 8008f94:	e003      	b.n	8008f9e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008f96:	2001      	movs	r0, #1
 8008f98:	f000 fd5d 	bl	8009a56 <xQueueCreateMutex>
 8008f9c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00c      	beq.n	8008fbe <osMutexNew+0xee>
        if (attr != NULL) {
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d003      	beq.n	8008fb2 <osMutexNew+0xe2>
          name = attr->name;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	60fb      	str	r3, [r7, #12]
 8008fb0:	e001      	b.n	8008fb6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008fb6:	68f9      	ldr	r1, [r7, #12]
 8008fb8:	69f8      	ldr	r0, [r7, #28]
 8008fba:	f001 fc31 	bl	800a820 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d006      	beq.n	8008fd2 <osMutexNew+0x102>
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d003      	beq.n	8008fd2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	f043 0301 	orr.w	r3, r3, #1
 8008fd0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008fd2:	69fb      	ldr	r3, [r7, #28]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3720      	adds	r7, #32
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f023 0301 	bic.w	r3, r3, #1
 8008fec:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f003 0301 	and.w	r3, r3, #1
 8008ff4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ffa:	f3ef 8305 	mrs	r3, IPSR
 8008ffe:	60bb      	str	r3, [r7, #8]
  return(result);
 8009000:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009002:	2b00      	cmp	r3, #0
 8009004:	d003      	beq.n	800900e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8009006:	f06f 0305 	mvn.w	r3, #5
 800900a:	617b      	str	r3, [r7, #20]
 800900c:	e02c      	b.n	8009068 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d103      	bne.n	800901c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8009014:	f06f 0303 	mvn.w	r3, #3
 8009018:	617b      	str	r3, [r7, #20]
 800901a:	e025      	b.n	8009068 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d011      	beq.n	8009046 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009022:	6839      	ldr	r1, [r7, #0]
 8009024:	6938      	ldr	r0, [r7, #16]
 8009026:	f000 fd7d 	bl	8009b24 <xQueueTakeMutexRecursive>
 800902a:	4603      	mov	r3, r0
 800902c:	2b01      	cmp	r3, #1
 800902e:	d01b      	beq.n	8009068 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d003      	beq.n	800903e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8009036:	f06f 0301 	mvn.w	r3, #1
 800903a:	617b      	str	r3, [r7, #20]
 800903c:	e014      	b.n	8009068 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800903e:	f06f 0302 	mvn.w	r3, #2
 8009042:	617b      	str	r3, [r7, #20]
 8009044:	e010      	b.n	8009068 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009046:	6839      	ldr	r1, [r7, #0]
 8009048:	6938      	ldr	r0, [r7, #16]
 800904a:	f001 f911 	bl	800a270 <xQueueSemaphoreTake>
 800904e:	4603      	mov	r3, r0
 8009050:	2b01      	cmp	r3, #1
 8009052:	d009      	beq.n	8009068 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d003      	beq.n	8009062 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800905a:	f06f 0301 	mvn.w	r3, #1
 800905e:	617b      	str	r3, [r7, #20]
 8009060:	e002      	b.n	8009068 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009062:	f06f 0302 	mvn.w	r3, #2
 8009066:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8009068:	697b      	ldr	r3, [r7, #20]
}
 800906a:	4618      	mov	r0, r3
 800906c:	3718      	adds	r7, #24
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009072:	b580      	push	{r7, lr}
 8009074:	b086      	sub	sp, #24
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f023 0301 	bic.w	r3, r3, #1
 8009080:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f003 0301 	and.w	r3, r3, #1
 8009088:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800908a:	2300      	movs	r3, #0
 800908c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800908e:	f3ef 8305 	mrs	r3, IPSR
 8009092:	60bb      	str	r3, [r7, #8]
  return(result);
 8009094:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009096:	2b00      	cmp	r3, #0
 8009098:	d003      	beq.n	80090a2 <osMutexRelease+0x30>
    stat = osErrorISR;
 800909a:	f06f 0305 	mvn.w	r3, #5
 800909e:	617b      	str	r3, [r7, #20]
 80090a0:	e01f      	b.n	80090e2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d103      	bne.n	80090b0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80090a8:	f06f 0303 	mvn.w	r3, #3
 80090ac:	617b      	str	r3, [r7, #20]
 80090ae:	e018      	b.n	80090e2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d009      	beq.n	80090ca <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80090b6:	6938      	ldr	r0, [r7, #16]
 80090b8:	f000 fd00 	bl	8009abc <xQueueGiveMutexRecursive>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d00f      	beq.n	80090e2 <osMutexRelease+0x70>
        stat = osErrorResource;
 80090c2:	f06f 0302 	mvn.w	r3, #2
 80090c6:	617b      	str	r3, [r7, #20]
 80090c8:	e00b      	b.n	80090e2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80090ca:	2300      	movs	r3, #0
 80090cc:	2200      	movs	r2, #0
 80090ce:	2100      	movs	r1, #0
 80090d0:	6938      	ldr	r0, [r7, #16]
 80090d2:	f000 fdc7 	bl	8009c64 <xQueueGenericSend>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d002      	beq.n	80090e2 <osMutexRelease+0x70>
        stat = osErrorResource;
 80090dc:	f06f 0302 	mvn.w	r3, #2
 80090e0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80090e2:	697b      	ldr	r3, [r7, #20]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3718      	adds	r7, #24
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b08a      	sub	sp, #40	; 0x28
 80090f0:	af02      	add	r7, sp, #8
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80090f8:	2300      	movs	r3, #0
 80090fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090fc:	f3ef 8305 	mrs	r3, IPSR
 8009100:	613b      	str	r3, [r7, #16]
  return(result);
 8009102:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009104:	2b00      	cmp	r3, #0
 8009106:	d175      	bne.n	80091f4 <osSemaphoreNew+0x108>
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d072      	beq.n	80091f4 <osSemaphoreNew+0x108>
 800910e:	68ba      	ldr	r2, [r7, #8]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	429a      	cmp	r2, r3
 8009114:	d86e      	bhi.n	80091f4 <osSemaphoreNew+0x108>
    mem = -1;
 8009116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800911a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d015      	beq.n	800914e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d006      	beq.n	8009138 <osSemaphoreNew+0x4c>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	2b4f      	cmp	r3, #79	; 0x4f
 8009130:	d902      	bls.n	8009138 <osSemaphoreNew+0x4c>
        mem = 1;
 8009132:	2301      	movs	r3, #1
 8009134:	61bb      	str	r3, [r7, #24]
 8009136:	e00c      	b.n	8009152 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d108      	bne.n	8009152 <osSemaphoreNew+0x66>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d104      	bne.n	8009152 <osSemaphoreNew+0x66>
          mem = 0;
 8009148:	2300      	movs	r3, #0
 800914a:	61bb      	str	r3, [r7, #24]
 800914c:	e001      	b.n	8009152 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800914e:	2300      	movs	r3, #0
 8009150:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009158:	d04c      	beq.n	80091f4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d128      	bne.n	80091b2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	2b01      	cmp	r3, #1
 8009164:	d10a      	bne.n	800917c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	2203      	movs	r2, #3
 800916c:	9200      	str	r2, [sp, #0]
 800916e:	2200      	movs	r2, #0
 8009170:	2100      	movs	r1, #0
 8009172:	2001      	movs	r0, #1
 8009174:	f000 fb80 	bl	8009878 <xQueueGenericCreateStatic>
 8009178:	61f8      	str	r0, [r7, #28]
 800917a:	e005      	b.n	8009188 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800917c:	2203      	movs	r2, #3
 800917e:	2100      	movs	r1, #0
 8009180:	2001      	movs	r0, #1
 8009182:	f000 fbf1 	bl	8009968 <xQueueGenericCreate>
 8009186:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d022      	beq.n	80091d4 <osSemaphoreNew+0xe8>
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d01f      	beq.n	80091d4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009194:	2300      	movs	r3, #0
 8009196:	2200      	movs	r2, #0
 8009198:	2100      	movs	r1, #0
 800919a:	69f8      	ldr	r0, [r7, #28]
 800919c:	f000 fd62 	bl	8009c64 <xQueueGenericSend>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d016      	beq.n	80091d4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80091a6:	69f8      	ldr	r0, [r7, #28]
 80091a8:	f001 f9ee 	bl	800a588 <vQueueDelete>
            hSemaphore = NULL;
 80091ac:	2300      	movs	r3, #0
 80091ae:	61fb      	str	r3, [r7, #28]
 80091b0:	e010      	b.n	80091d4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d108      	bne.n	80091ca <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	461a      	mov	r2, r3
 80091be:	68b9      	ldr	r1, [r7, #8]
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f000 fce5 	bl	8009b90 <xQueueCreateCountingSemaphoreStatic>
 80091c6:	61f8      	str	r0, [r7, #28]
 80091c8:	e004      	b.n	80091d4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80091ca:	68b9      	ldr	r1, [r7, #8]
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f000 fd16 	bl	8009bfe <xQueueCreateCountingSemaphore>
 80091d2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00c      	beq.n	80091f4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d003      	beq.n	80091e8 <osSemaphoreNew+0xfc>
          name = attr->name;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	617b      	str	r3, [r7, #20]
 80091e6:	e001      	b.n	80091ec <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80091e8:	2300      	movs	r3, #0
 80091ea:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80091ec:	6979      	ldr	r1, [r7, #20]
 80091ee:	69f8      	ldr	r0, [r7, #28]
 80091f0:	f001 fb16 	bl	800a820 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80091f4:	69fb      	ldr	r3, [r7, #28]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3720      	adds	r7, #32
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
	...

08009200 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800920e:	2300      	movs	r3, #0
 8009210:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d103      	bne.n	8009220 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009218:	f06f 0303 	mvn.w	r3, #3
 800921c:	617b      	str	r3, [r7, #20]
 800921e:	e039      	b.n	8009294 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009220:	f3ef 8305 	mrs	r3, IPSR
 8009224:	60fb      	str	r3, [r7, #12]
  return(result);
 8009226:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009228:	2b00      	cmp	r3, #0
 800922a:	d022      	beq.n	8009272 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d003      	beq.n	800923a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009232:	f06f 0303 	mvn.w	r3, #3
 8009236:	617b      	str	r3, [r7, #20]
 8009238:	e02c      	b.n	8009294 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800923a:	2300      	movs	r3, #0
 800923c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800923e:	f107 0308 	add.w	r3, r7, #8
 8009242:	461a      	mov	r2, r3
 8009244:	2100      	movs	r1, #0
 8009246:	6938      	ldr	r0, [r7, #16]
 8009248:	f001 f91e 	bl	800a488 <xQueueReceiveFromISR>
 800924c:	4603      	mov	r3, r0
 800924e:	2b01      	cmp	r3, #1
 8009250:	d003      	beq.n	800925a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009252:	f06f 0302 	mvn.w	r3, #2
 8009256:	617b      	str	r3, [r7, #20]
 8009258:	e01c      	b.n	8009294 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d019      	beq.n	8009294 <osSemaphoreAcquire+0x94>
 8009260:	4b0f      	ldr	r3, [pc, #60]	; (80092a0 <osSemaphoreAcquire+0xa0>)
 8009262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009266:	601a      	str	r2, [r3, #0]
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	e010      	b.n	8009294 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009272:	6839      	ldr	r1, [r7, #0]
 8009274:	6938      	ldr	r0, [r7, #16]
 8009276:	f000 fffb 	bl	800a270 <xQueueSemaphoreTake>
 800927a:	4603      	mov	r3, r0
 800927c:	2b01      	cmp	r3, #1
 800927e:	d009      	beq.n	8009294 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d003      	beq.n	800928e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009286:	f06f 0301 	mvn.w	r3, #1
 800928a:	617b      	str	r3, [r7, #20]
 800928c:	e002      	b.n	8009294 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800928e:	f06f 0302 	mvn.w	r3, #2
 8009292:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009294:	697b      	ldr	r3, [r7, #20]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3718      	adds	r7, #24
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	e000ed04 	.word	0xe000ed04

080092a4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b086      	sub	sp, #24
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d103      	bne.n	80092c2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80092ba:	f06f 0303 	mvn.w	r3, #3
 80092be:	617b      	str	r3, [r7, #20]
 80092c0:	e02c      	b.n	800931c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092c2:	f3ef 8305 	mrs	r3, IPSR
 80092c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80092c8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d01a      	beq.n	8009304 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80092ce:	2300      	movs	r3, #0
 80092d0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80092d2:	f107 0308 	add.w	r3, r7, #8
 80092d6:	4619      	mov	r1, r3
 80092d8:	6938      	ldr	r0, [r7, #16]
 80092da:	f000 fe5c 	bl	8009f96 <xQueueGiveFromISR>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d003      	beq.n	80092ec <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80092e4:	f06f 0302 	mvn.w	r3, #2
 80092e8:	617b      	str	r3, [r7, #20]
 80092ea:	e017      	b.n	800931c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d014      	beq.n	800931c <osSemaphoreRelease+0x78>
 80092f2:	4b0d      	ldr	r3, [pc, #52]	; (8009328 <osSemaphoreRelease+0x84>)
 80092f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092f8:	601a      	str	r2, [r3, #0]
 80092fa:	f3bf 8f4f 	dsb	sy
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	e00b      	b.n	800931c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009304:	2300      	movs	r3, #0
 8009306:	2200      	movs	r2, #0
 8009308:	2100      	movs	r1, #0
 800930a:	6938      	ldr	r0, [r7, #16]
 800930c:	f000 fcaa 	bl	8009c64 <xQueueGenericSend>
 8009310:	4603      	mov	r3, r0
 8009312:	2b01      	cmp	r3, #1
 8009314:	d002      	beq.n	800931c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009316:	f06f 0302 	mvn.w	r3, #2
 800931a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800931c:	697b      	ldr	r3, [r7, #20]
}
 800931e:	4618      	mov	r0, r3
 8009320:	3718      	adds	r7, #24
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	e000ed04 	.word	0xe000ed04

0800932c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800932c:	b580      	push	{r7, lr}
 800932e:	b086      	sub	sp, #24
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009338:	f3ef 8305 	mrs	r3, IPSR
 800933c:	60fb      	str	r3, [r7, #12]
  return(result);
 800933e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8009340:	2b00      	cmp	r3, #0
 8009342:	d003      	beq.n	800934c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8009344:	f06f 0305 	mvn.w	r3, #5
 8009348:	617b      	str	r3, [r7, #20]
 800934a:	e00e      	b.n	800936a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d103      	bne.n	800935a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8009352:	f06f 0303 	mvn.w	r3, #3
 8009356:	617b      	str	r3, [r7, #20]
 8009358:	e007      	b.n	800936a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800935a:	6938      	ldr	r0, [r7, #16]
 800935c:	f001 fa8a 	bl	800a874 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8009360:	2300      	movs	r3, #0
 8009362:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8009364:	6938      	ldr	r0, [r7, #16]
 8009366:	f001 f90f 	bl	800a588 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800936a:	697b      	ldr	r3, [r7, #20]
}
 800936c:	4618      	mov	r0, r3
 800936e:	3718      	adds	r7, #24
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009374:	b580      	push	{r7, lr}
 8009376:	b08a      	sub	sp, #40	; 0x28
 8009378:	af02      	add	r7, sp, #8
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009380:	2300      	movs	r3, #0
 8009382:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009384:	f3ef 8305 	mrs	r3, IPSR
 8009388:	613b      	str	r3, [r7, #16]
  return(result);
 800938a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800938c:	2b00      	cmp	r3, #0
 800938e:	d15f      	bne.n	8009450 <osMessageQueueNew+0xdc>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d05c      	beq.n	8009450 <osMessageQueueNew+0xdc>
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d059      	beq.n	8009450 <osMessageQueueNew+0xdc>
    mem = -1;
 800939c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093a0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d029      	beq.n	80093fc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d012      	beq.n	80093d6 <osMessageQueueNew+0x62>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	2b4f      	cmp	r3, #79	; 0x4f
 80093b6:	d90e      	bls.n	80093d6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00a      	beq.n	80093d6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	695a      	ldr	r2, [r3, #20]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	68b9      	ldr	r1, [r7, #8]
 80093c8:	fb01 f303 	mul.w	r3, r1, r3
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d302      	bcc.n	80093d6 <osMessageQueueNew+0x62>
        mem = 1;
 80093d0:	2301      	movs	r3, #1
 80093d2:	61bb      	str	r3, [r7, #24]
 80093d4:	e014      	b.n	8009400 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d110      	bne.n	8009400 <osMessageQueueNew+0x8c>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d10c      	bne.n	8009400 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d108      	bne.n	8009400 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	695b      	ldr	r3, [r3, #20]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d104      	bne.n	8009400 <osMessageQueueNew+0x8c>
          mem = 0;
 80093f6:	2300      	movs	r3, #0
 80093f8:	61bb      	str	r3, [r7, #24]
 80093fa:	e001      	b.n	8009400 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80093fc:	2300      	movs	r3, #0
 80093fe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	2b01      	cmp	r3, #1
 8009404:	d10b      	bne.n	800941e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	691a      	ldr	r2, [r3, #16]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	2100      	movs	r1, #0
 8009410:	9100      	str	r1, [sp, #0]
 8009412:	68b9      	ldr	r1, [r7, #8]
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f000 fa2f 	bl	8009878 <xQueueGenericCreateStatic>
 800941a:	61f8      	str	r0, [r7, #28]
 800941c:	e008      	b.n	8009430 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d105      	bne.n	8009430 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009424:	2200      	movs	r2, #0
 8009426:	68b9      	ldr	r1, [r7, #8]
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f000 fa9d 	bl	8009968 <xQueueGenericCreate>
 800942e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00c      	beq.n	8009450 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d003      	beq.n	8009444 <osMessageQueueNew+0xd0>
        name = attr->name;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	617b      	str	r3, [r7, #20]
 8009442:	e001      	b.n	8009448 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009444:	2300      	movs	r3, #0
 8009446:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009448:	6979      	ldr	r1, [r7, #20]
 800944a:	69f8      	ldr	r0, [r7, #28]
 800944c:	f001 f9e8 	bl	800a820 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009450:	69fb      	ldr	r3, [r7, #28]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3720      	adds	r7, #32
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
	...

0800945c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800945c:	b580      	push	{r7, lr}
 800945e:	b088      	sub	sp, #32
 8009460:	af00      	add	r7, sp, #0
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	603b      	str	r3, [r7, #0]
 8009468:	4613      	mov	r3, r2
 800946a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009470:	2300      	movs	r3, #0
 8009472:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009474:	f3ef 8305 	mrs	r3, IPSR
 8009478:	617b      	str	r3, [r7, #20]
  return(result);
 800947a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800947c:	2b00      	cmp	r3, #0
 800947e:	d028      	beq.n	80094d2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d005      	beq.n	8009492 <osMessageQueuePut+0x36>
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d002      	beq.n	8009492 <osMessageQueuePut+0x36>
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d003      	beq.n	800949a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009492:	f06f 0303 	mvn.w	r3, #3
 8009496:	61fb      	str	r3, [r7, #28]
 8009498:	e038      	b.n	800950c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800949a:	2300      	movs	r3, #0
 800949c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800949e:	f107 0210 	add.w	r2, r7, #16
 80094a2:	2300      	movs	r3, #0
 80094a4:	68b9      	ldr	r1, [r7, #8]
 80094a6:	69b8      	ldr	r0, [r7, #24]
 80094a8:	f000 fcda 	bl	8009e60 <xQueueGenericSendFromISR>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d003      	beq.n	80094ba <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80094b2:	f06f 0302 	mvn.w	r3, #2
 80094b6:	61fb      	str	r3, [r7, #28]
 80094b8:	e028      	b.n	800950c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d025      	beq.n	800950c <osMessageQueuePut+0xb0>
 80094c0:	4b15      	ldr	r3, [pc, #84]	; (8009518 <osMessageQueuePut+0xbc>)
 80094c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094c6:	601a      	str	r2, [r3, #0]
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	e01c      	b.n	800950c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d002      	beq.n	80094de <osMessageQueuePut+0x82>
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d103      	bne.n	80094e6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80094de:	f06f 0303 	mvn.w	r3, #3
 80094e2:	61fb      	str	r3, [r7, #28]
 80094e4:	e012      	b.n	800950c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80094e6:	2300      	movs	r3, #0
 80094e8:	683a      	ldr	r2, [r7, #0]
 80094ea:	68b9      	ldr	r1, [r7, #8]
 80094ec:	69b8      	ldr	r0, [r7, #24]
 80094ee:	f000 fbb9 	bl	8009c64 <xQueueGenericSend>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d009      	beq.n	800950c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d003      	beq.n	8009506 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80094fe:	f06f 0301 	mvn.w	r3, #1
 8009502:	61fb      	str	r3, [r7, #28]
 8009504:	e002      	b.n	800950c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009506:	f06f 0302 	mvn.w	r3, #2
 800950a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800950c:	69fb      	ldr	r3, [r7, #28]
}
 800950e:	4618      	mov	r0, r3
 8009510:	3720      	adds	r7, #32
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	e000ed04 	.word	0xe000ed04

0800951c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800951c:	b580      	push	{r7, lr}
 800951e:	b088      	sub	sp, #32
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]
 8009528:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800952e:	2300      	movs	r3, #0
 8009530:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009532:	f3ef 8305 	mrs	r3, IPSR
 8009536:	617b      	str	r3, [r7, #20]
  return(result);
 8009538:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800953a:	2b00      	cmp	r3, #0
 800953c:	d028      	beq.n	8009590 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d005      	beq.n	8009550 <osMessageQueueGet+0x34>
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d002      	beq.n	8009550 <osMessageQueueGet+0x34>
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d003      	beq.n	8009558 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009550:	f06f 0303 	mvn.w	r3, #3
 8009554:	61fb      	str	r3, [r7, #28]
 8009556:	e037      	b.n	80095c8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009558:	2300      	movs	r3, #0
 800955a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800955c:	f107 0310 	add.w	r3, r7, #16
 8009560:	461a      	mov	r2, r3
 8009562:	68b9      	ldr	r1, [r7, #8]
 8009564:	69b8      	ldr	r0, [r7, #24]
 8009566:	f000 ff8f 	bl	800a488 <xQueueReceiveFromISR>
 800956a:	4603      	mov	r3, r0
 800956c:	2b01      	cmp	r3, #1
 800956e:	d003      	beq.n	8009578 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009570:	f06f 0302 	mvn.w	r3, #2
 8009574:	61fb      	str	r3, [r7, #28]
 8009576:	e027      	b.n	80095c8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d024      	beq.n	80095c8 <osMessageQueueGet+0xac>
 800957e:	4b15      	ldr	r3, [pc, #84]	; (80095d4 <osMessageQueueGet+0xb8>)
 8009580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009584:	601a      	str	r2, [r3, #0]
 8009586:	f3bf 8f4f 	dsb	sy
 800958a:	f3bf 8f6f 	isb	sy
 800958e:	e01b      	b.n	80095c8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d002      	beq.n	800959c <osMessageQueueGet+0x80>
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d103      	bne.n	80095a4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800959c:	f06f 0303 	mvn.w	r3, #3
 80095a0:	61fb      	str	r3, [r7, #28]
 80095a2:	e011      	b.n	80095c8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80095a4:	683a      	ldr	r2, [r7, #0]
 80095a6:	68b9      	ldr	r1, [r7, #8]
 80095a8:	69b8      	ldr	r0, [r7, #24]
 80095aa:	f000 fd81 	bl	800a0b0 <xQueueReceive>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d009      	beq.n	80095c8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d003      	beq.n	80095c2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80095ba:	f06f 0301 	mvn.w	r3, #1
 80095be:	61fb      	str	r3, [r7, #28]
 80095c0:	e002      	b.n	80095c8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80095c2:	f06f 0302 	mvn.w	r3, #2
 80095c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80095c8:	69fb      	ldr	r3, [r7, #28]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3720      	adds	r7, #32
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	e000ed04 	.word	0xe000ed04

080095d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	4a07      	ldr	r2, [pc, #28]	; (8009604 <vApplicationGetIdleTaskMemory+0x2c>)
 80095e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	4a06      	ldr	r2, [pc, #24]	; (8009608 <vApplicationGetIdleTaskMemory+0x30>)
 80095ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2280      	movs	r2, #128	; 0x80
 80095f4:	601a      	str	r2, [r3, #0]
}
 80095f6:	bf00      	nop
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	200001e8 	.word	0x200001e8
 8009608:	200002a4 	.word	0x200002a4

0800960c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800960c:	b480      	push	{r7}
 800960e:	b085      	sub	sp, #20
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	4a07      	ldr	r2, [pc, #28]	; (8009638 <vApplicationGetTimerTaskMemory+0x2c>)
 800961c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	4a06      	ldr	r2, [pc, #24]	; (800963c <vApplicationGetTimerTaskMemory+0x30>)
 8009622:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f44f 7280 	mov.w	r2, #256	; 0x100
 800962a:	601a      	str	r2, [r3, #0]
}
 800962c:	bf00      	nop
 800962e:	3714      	adds	r7, #20
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr
 8009638:	200004a4 	.word	0x200004a4
 800963c:	20000560 	.word	0x20000560

08009640 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f103 0208 	add.w	r2, r3, #8
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009658:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f103 0208 	add.w	r2, r3, #8
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f103 0208 	add.w	r2, r3, #8
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800968e:	bf00      	nop
 8009690:	370c      	adds	r7, #12
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr

0800969a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800969a:	b480      	push	{r7}
 800969c:	b085      	sub	sp, #20
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
 80096a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	689a      	ldr	r2, [r3, #8]
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	683a      	ldr	r2, [r7, #0]
 80096be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	683a      	ldr	r2, [r7, #0]
 80096c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	1c5a      	adds	r2, r3, #1
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	601a      	str	r2, [r3, #0]
}
 80096d6:	bf00      	nop
 80096d8:	3714      	adds	r7, #20
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr

080096e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80096e2:	b480      	push	{r7}
 80096e4:	b085      	sub	sp, #20
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
 80096ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096f8:	d103      	bne.n	8009702 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	691b      	ldr	r3, [r3, #16]
 80096fe:	60fb      	str	r3, [r7, #12]
 8009700:	e00c      	b.n	800971c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	3308      	adds	r3, #8
 8009706:	60fb      	str	r3, [r7, #12]
 8009708:	e002      	b.n	8009710 <vListInsert+0x2e>
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	60fb      	str	r3, [r7, #12]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	429a      	cmp	r2, r3
 800971a:	d2f6      	bcs.n	800970a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	685a      	ldr	r2, [r3, #4]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	683a      	ldr	r2, [r7, #0]
 800972a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	683a      	ldr	r2, [r7, #0]
 8009736:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	1c5a      	adds	r2, r3, #1
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	601a      	str	r2, [r3, #0]
}
 8009748:	bf00      	nop
 800974a:	3714      	adds	r7, #20
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009754:	b480      	push	{r7}
 8009756:	b085      	sub	sp, #20
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	6892      	ldr	r2, [r2, #8]
 800976a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	6852      	ldr	r2, [r2, #4]
 8009774:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	429a      	cmp	r2, r3
 800977e:	d103      	bne.n	8009788 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	689a      	ldr	r2, [r3, #8]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	1e5a      	subs	r2, r3, #1
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
}
 800979c:	4618      	mov	r0, r3
 800979e:	3714      	adds	r7, #20
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d10a      	bne.n	80097d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80097bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c0:	f383 8811 	msr	BASEPRI, r3
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80097ce:	bf00      	nop
 80097d0:	e7fe      	b.n	80097d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80097d2:	f002 fe17 	bl	800c404 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097de:	68f9      	ldr	r1, [r7, #12]
 80097e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80097e2:	fb01 f303 	mul.w	r3, r1, r3
 80097e6:	441a      	add	r2, r3
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2200      	movs	r2, #0
 80097f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009802:	3b01      	subs	r3, #1
 8009804:	68f9      	ldr	r1, [r7, #12]
 8009806:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009808:	fb01 f303 	mul.w	r3, r1, r3
 800980c:	441a      	add	r2, r3
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	22ff      	movs	r2, #255	; 0xff
 8009816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	22ff      	movs	r2, #255	; 0xff
 800981e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d114      	bne.n	8009852 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d01a      	beq.n	8009866 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	3310      	adds	r3, #16
 8009834:	4618      	mov	r0, r3
 8009836:	f001 fd01 	bl	800b23c <xTaskRemoveFromEventList>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d012      	beq.n	8009866 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009840:	4b0c      	ldr	r3, [pc, #48]	; (8009874 <xQueueGenericReset+0xcc>)
 8009842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009846:	601a      	str	r2, [r3, #0]
 8009848:	f3bf 8f4f 	dsb	sy
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	e009      	b.n	8009866 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	3310      	adds	r3, #16
 8009856:	4618      	mov	r0, r3
 8009858:	f7ff fef2 	bl	8009640 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	3324      	adds	r3, #36	; 0x24
 8009860:	4618      	mov	r0, r3
 8009862:	f7ff feed 	bl	8009640 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009866:	f002 fdfd 	bl	800c464 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800986a:	2301      	movs	r3, #1
}
 800986c:	4618      	mov	r0, r3
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	e000ed04 	.word	0xe000ed04

08009878 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009878:	b580      	push	{r7, lr}
 800987a:	b08e      	sub	sp, #56	; 0x38
 800987c:	af02      	add	r7, sp, #8
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	607a      	str	r2, [r7, #4]
 8009884:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10a      	bne.n	80098a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800988c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009890:	f383 8811 	msr	BASEPRI, r3
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800989e:	bf00      	nop
 80098a0:	e7fe      	b.n	80098a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10a      	bne.n	80098be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80098a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ac:	f383 8811 	msr	BASEPRI, r3
 80098b0:	f3bf 8f6f 	isb	sy
 80098b4:	f3bf 8f4f 	dsb	sy
 80098b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80098ba:	bf00      	nop
 80098bc:	e7fe      	b.n	80098bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d002      	beq.n	80098ca <xQueueGenericCreateStatic+0x52>
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d001      	beq.n	80098ce <xQueueGenericCreateStatic+0x56>
 80098ca:	2301      	movs	r3, #1
 80098cc:	e000      	b.n	80098d0 <xQueueGenericCreateStatic+0x58>
 80098ce:	2300      	movs	r3, #0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d10a      	bne.n	80098ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80098d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d8:	f383 8811 	msr	BASEPRI, r3
 80098dc:	f3bf 8f6f 	isb	sy
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	623b      	str	r3, [r7, #32]
}
 80098e6:	bf00      	nop
 80098e8:	e7fe      	b.n	80098e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d102      	bne.n	80098f6 <xQueueGenericCreateStatic+0x7e>
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d101      	bne.n	80098fa <xQueueGenericCreateStatic+0x82>
 80098f6:	2301      	movs	r3, #1
 80098f8:	e000      	b.n	80098fc <xQueueGenericCreateStatic+0x84>
 80098fa:	2300      	movs	r3, #0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d10a      	bne.n	8009916 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009904:	f383 8811 	msr	BASEPRI, r3
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	61fb      	str	r3, [r7, #28]
}
 8009912:	bf00      	nop
 8009914:	e7fe      	b.n	8009914 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009916:	2350      	movs	r3, #80	; 0x50
 8009918:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	2b50      	cmp	r3, #80	; 0x50
 800991e:	d00a      	beq.n	8009936 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	61bb      	str	r3, [r7, #24]
}
 8009932:	bf00      	nop
 8009934:	e7fe      	b.n	8009934 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009936:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800993c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00d      	beq.n	800995e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009944:	2201      	movs	r2, #1
 8009946:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800994a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800994e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009950:	9300      	str	r3, [sp, #0]
 8009952:	4613      	mov	r3, r2
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	68b9      	ldr	r1, [r7, #8]
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f000 f83f 	bl	80099dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800995e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009960:	4618      	mov	r0, r3
 8009962:	3730      	adds	r7, #48	; 0x30
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009968:	b580      	push	{r7, lr}
 800996a:	b08a      	sub	sp, #40	; 0x28
 800996c:	af02      	add	r7, sp, #8
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	4613      	mov	r3, r2
 8009974:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10a      	bne.n	8009992 <xQueueGenericCreate+0x2a>
	__asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	613b      	str	r3, [r7, #16]
}
 800998e:	bf00      	nop
 8009990:	e7fe      	b.n	8009990 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	68ba      	ldr	r2, [r7, #8]
 8009996:	fb02 f303 	mul.w	r3, r2, r3
 800999a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	3350      	adds	r3, #80	; 0x50
 80099a0:	4618      	mov	r0, r3
 80099a2:	f002 fe51 	bl	800c648 <pvPortMalloc>
 80099a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d011      	beq.n	80099d2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	3350      	adds	r3, #80	; 0x50
 80099b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	2200      	movs	r2, #0
 80099bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80099c0:	79fa      	ldrb	r2, [r7, #7]
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	9300      	str	r3, [sp, #0]
 80099c6:	4613      	mov	r3, r2
 80099c8:	697a      	ldr	r2, [r7, #20]
 80099ca:	68b9      	ldr	r1, [r7, #8]
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f000 f805 	bl	80099dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80099d2:	69bb      	ldr	r3, [r7, #24]
	}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3720      	adds	r7, #32
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	607a      	str	r2, [r7, #4]
 80099e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d103      	bne.n	80099f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	69ba      	ldr	r2, [r7, #24]
 80099f4:	601a      	str	r2, [r3, #0]
 80099f6:	e002      	b.n	80099fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009a04:	69bb      	ldr	r3, [r7, #24]
 8009a06:	68ba      	ldr	r2, [r7, #8]
 8009a08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009a0a:	2101      	movs	r1, #1
 8009a0c:	69b8      	ldr	r0, [r7, #24]
 8009a0e:	f7ff fecb 	bl	80097a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	78fa      	ldrb	r2, [r7, #3]
 8009a16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009a1a:	bf00      	nop
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b082      	sub	sp, #8
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00e      	beq.n	8009a4e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009a42:	2300      	movs	r3, #0
 8009a44:	2200      	movs	r2, #0
 8009a46:	2100      	movs	r1, #0
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 f90b 	bl	8009c64 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009a4e:	bf00      	nop
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b086      	sub	sp, #24
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009a60:	2301      	movs	r3, #1
 8009a62:	617b      	str	r3, [r7, #20]
 8009a64:	2300      	movs	r3, #0
 8009a66:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009a68:	79fb      	ldrb	r3, [r7, #7]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	6939      	ldr	r1, [r7, #16]
 8009a6e:	6978      	ldr	r0, [r7, #20]
 8009a70:	f7ff ff7a 	bl	8009968 <xQueueGenericCreate>
 8009a74:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f7ff ffd3 	bl	8009a22 <prvInitialiseMutex>

		return xNewQueue;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
	}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3718      	adds	r7, #24
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b088      	sub	sp, #32
 8009a8a:	af02      	add	r7, sp, #8
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	6039      	str	r1, [r7, #0]
 8009a90:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009a92:	2301      	movs	r3, #1
 8009a94:	617b      	str	r3, [r7, #20]
 8009a96:	2300      	movs	r3, #0
 8009a98:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009a9a:	79fb      	ldrb	r3, [r7, #7]
 8009a9c:	9300      	str	r3, [sp, #0]
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	6939      	ldr	r1, [r7, #16]
 8009aa4:	6978      	ldr	r0, [r7, #20]
 8009aa6:	f7ff fee7 	bl	8009878 <xQueueGenericCreateStatic>
 8009aaa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009aac:	68f8      	ldr	r0, [r7, #12]
 8009aae:	f7ff ffb8 	bl	8009a22 <prvInitialiseMutex>

		return xNewQueue;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
	}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3718      	adds	r7, #24
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009abc:	b590      	push	{r4, r7, lr}
 8009abe:	b087      	sub	sp, #28
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d10a      	bne.n	8009ae4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8009ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad2:	f383 8811 	msr	BASEPRI, r3
 8009ad6:	f3bf 8f6f 	isb	sy
 8009ada:	f3bf 8f4f 	dsb	sy
 8009ade:	60fb      	str	r3, [r7, #12]
}
 8009ae0:	bf00      	nop
 8009ae2:	e7fe      	b.n	8009ae2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	689c      	ldr	r4, [r3, #8]
 8009ae8:	f001 fd6a 	bl	800b5c0 <xTaskGetCurrentTaskHandle>
 8009aec:	4603      	mov	r3, r0
 8009aee:	429c      	cmp	r4, r3
 8009af0:	d111      	bne.n	8009b16 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	1e5a      	subs	r2, r3, #1
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d105      	bne.n	8009b10 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009b04:	2300      	movs	r3, #0
 8009b06:	2200      	movs	r2, #0
 8009b08:	2100      	movs	r1, #0
 8009b0a:	6938      	ldr	r0, [r7, #16]
 8009b0c:	f000 f8aa 	bl	8009c64 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009b10:	2301      	movs	r3, #1
 8009b12:	617b      	str	r3, [r7, #20]
 8009b14:	e001      	b.n	8009b1a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009b16:	2300      	movs	r3, #0
 8009b18:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009b1a:	697b      	ldr	r3, [r7, #20]
	}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	371c      	adds	r7, #28
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd90      	pop	{r4, r7, pc}

08009b24 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009b24:	b590      	push	{r4, r7, lr}
 8009b26:	b087      	sub	sp, #28
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d10a      	bne.n	8009b4e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8009b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3c:	f383 8811 	msr	BASEPRI, r3
 8009b40:	f3bf 8f6f 	isb	sy
 8009b44:	f3bf 8f4f 	dsb	sy
 8009b48:	60fb      	str	r3, [r7, #12]
}
 8009b4a:	bf00      	nop
 8009b4c:	e7fe      	b.n	8009b4c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	689c      	ldr	r4, [r3, #8]
 8009b52:	f001 fd35 	bl	800b5c0 <xTaskGetCurrentTaskHandle>
 8009b56:	4603      	mov	r3, r0
 8009b58:	429c      	cmp	r4, r3
 8009b5a:	d107      	bne.n	8009b6c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	1c5a      	adds	r2, r3, #1
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009b66:	2301      	movs	r3, #1
 8009b68:	617b      	str	r3, [r7, #20]
 8009b6a:	e00c      	b.n	8009b86 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009b6c:	6839      	ldr	r1, [r7, #0]
 8009b6e:	6938      	ldr	r0, [r7, #16]
 8009b70:	f000 fb7e 	bl	800a270 <xQueueSemaphoreTake>
 8009b74:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d004      	beq.n	8009b86 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	1c5a      	adds	r2, r3, #1
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009b86:	697b      	ldr	r3, [r7, #20]
	}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	371c      	adds	r7, #28
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd90      	pop	{r4, r7, pc}

08009b90 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b08a      	sub	sp, #40	; 0x28
 8009b94:	af02      	add	r7, sp, #8
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d10a      	bne.n	8009bb8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	61bb      	str	r3, [r7, #24]
}
 8009bb4:	bf00      	nop
 8009bb6:	e7fe      	b.n	8009bb6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009bb8:	68ba      	ldr	r2, [r7, #8]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d90a      	bls.n	8009bd6 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc4:	f383 8811 	msr	BASEPRI, r3
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	617b      	str	r3, [r7, #20]
}
 8009bd2:	bf00      	nop
 8009bd4:	e7fe      	b.n	8009bd4 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009bd6:	2302      	movs	r3, #2
 8009bd8:	9300      	str	r3, [sp, #0]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	2100      	movs	r1, #0
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f7ff fe49 	bl	8009878 <xQueueGenericCreateStatic>
 8009be6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009be8:	69fb      	ldr	r3, [r7, #28]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d002      	beq.n	8009bf4 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	68ba      	ldr	r2, [r7, #8]
 8009bf2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009bf4:	69fb      	ldr	r3, [r7, #28]
	}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3720      	adds	r7, #32
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b086      	sub	sp, #24
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10a      	bne.n	8009c24 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c12:	f383 8811 	msr	BASEPRI, r3
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	613b      	str	r3, [r7, #16]
}
 8009c20:	bf00      	nop
 8009c22:	e7fe      	b.n	8009c22 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009c24:	683a      	ldr	r2, [r7, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d90a      	bls.n	8009c42 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c30:	f383 8811 	msr	BASEPRI, r3
 8009c34:	f3bf 8f6f 	isb	sy
 8009c38:	f3bf 8f4f 	dsb	sy
 8009c3c:	60fb      	str	r3, [r7, #12]
}
 8009c3e:	bf00      	nop
 8009c40:	e7fe      	b.n	8009c40 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009c42:	2202      	movs	r2, #2
 8009c44:	2100      	movs	r1, #0
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f7ff fe8e 	bl	8009968 <xQueueGenericCreate>
 8009c4c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d002      	beq.n	8009c5a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	683a      	ldr	r2, [r7, #0]
 8009c58:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009c5a:	697b      	ldr	r3, [r7, #20]
	}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3718      	adds	r7, #24
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b08e      	sub	sp, #56	; 0x38
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	607a      	str	r2, [r7, #4]
 8009c70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009c72:	2300      	movs	r3, #0
 8009c74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10a      	bne.n	8009c96 <xQueueGenericSend+0x32>
	__asm volatile
 8009c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c84:	f383 8811 	msr	BASEPRI, r3
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c92:	bf00      	nop
 8009c94:	e7fe      	b.n	8009c94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d103      	bne.n	8009ca4 <xQueueGenericSend+0x40>
 8009c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d101      	bne.n	8009ca8 <xQueueGenericSend+0x44>
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e000      	b.n	8009caa <xQueueGenericSend+0x46>
 8009ca8:	2300      	movs	r3, #0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d10a      	bne.n	8009cc4 <xQueueGenericSend+0x60>
	__asm volatile
 8009cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb2:	f383 8811 	msr	BASEPRI, r3
 8009cb6:	f3bf 8f6f 	isb	sy
 8009cba:	f3bf 8f4f 	dsb	sy
 8009cbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009cc0:	bf00      	nop
 8009cc2:	e7fe      	b.n	8009cc2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d103      	bne.n	8009cd2 <xQueueGenericSend+0x6e>
 8009cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d101      	bne.n	8009cd6 <xQueueGenericSend+0x72>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e000      	b.n	8009cd8 <xQueueGenericSend+0x74>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d10a      	bne.n	8009cf2 <xQueueGenericSend+0x8e>
	__asm volatile
 8009cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce0:	f383 8811 	msr	BASEPRI, r3
 8009ce4:	f3bf 8f6f 	isb	sy
 8009ce8:	f3bf 8f4f 	dsb	sy
 8009cec:	623b      	str	r3, [r7, #32]
}
 8009cee:	bf00      	nop
 8009cf0:	e7fe      	b.n	8009cf0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009cf2:	f001 fc75 	bl	800b5e0 <xTaskGetSchedulerState>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d102      	bne.n	8009d02 <xQueueGenericSend+0x9e>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d101      	bne.n	8009d06 <xQueueGenericSend+0xa2>
 8009d02:	2301      	movs	r3, #1
 8009d04:	e000      	b.n	8009d08 <xQueueGenericSend+0xa4>
 8009d06:	2300      	movs	r3, #0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d10a      	bne.n	8009d22 <xQueueGenericSend+0xbe>
	__asm volatile
 8009d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d10:	f383 8811 	msr	BASEPRI, r3
 8009d14:	f3bf 8f6f 	isb	sy
 8009d18:	f3bf 8f4f 	dsb	sy
 8009d1c:	61fb      	str	r3, [r7, #28]
}
 8009d1e:	bf00      	nop
 8009d20:	e7fe      	b.n	8009d20 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d22:	f002 fb6f 	bl	800c404 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d302      	bcc.n	8009d38 <xQueueGenericSend+0xd4>
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	2b02      	cmp	r3, #2
 8009d36:	d129      	bne.n	8009d8c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d38:	683a      	ldr	r2, [r7, #0]
 8009d3a:	68b9      	ldr	r1, [r7, #8]
 8009d3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d3e:	f000 fc5e 	bl	800a5fe <prvCopyDataToQueue>
 8009d42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d010      	beq.n	8009d6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4e:	3324      	adds	r3, #36	; 0x24
 8009d50:	4618      	mov	r0, r3
 8009d52:	f001 fa73 	bl	800b23c <xTaskRemoveFromEventList>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d013      	beq.n	8009d84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009d5c:	4b3f      	ldr	r3, [pc, #252]	; (8009e5c <xQueueGenericSend+0x1f8>)
 8009d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d62:	601a      	str	r2, [r3, #0]
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	f3bf 8f6f 	isb	sy
 8009d6c:	e00a      	b.n	8009d84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d007      	beq.n	8009d84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009d74:	4b39      	ldr	r3, [pc, #228]	; (8009e5c <xQueueGenericSend+0x1f8>)
 8009d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d7a:	601a      	str	r2, [r3, #0]
 8009d7c:	f3bf 8f4f 	dsb	sy
 8009d80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009d84:	f002 fb6e 	bl	800c464 <vPortExitCritical>
				return pdPASS;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e063      	b.n	8009e54 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d103      	bne.n	8009d9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d92:	f002 fb67 	bl	800c464 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009d96:	2300      	movs	r3, #0
 8009d98:	e05c      	b.n	8009e54 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d106      	bne.n	8009dae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009da0:	f107 0314 	add.w	r3, r7, #20
 8009da4:	4618      	mov	r0, r3
 8009da6:	f001 faad 	bl	800b304 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009daa:	2301      	movs	r3, #1
 8009dac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009dae:	f002 fb59 	bl	800c464 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009db2:	f001 f819 	bl	800ade8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009db6:	f002 fb25 	bl	800c404 <vPortEnterCritical>
 8009dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009dc0:	b25b      	sxtb	r3, r3
 8009dc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dc6:	d103      	bne.n	8009dd0 <xQueueGenericSend+0x16c>
 8009dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dd6:	b25b      	sxtb	r3, r3
 8009dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ddc:	d103      	bne.n	8009de6 <xQueueGenericSend+0x182>
 8009dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009de6:	f002 fb3d 	bl	800c464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009dea:	1d3a      	adds	r2, r7, #4
 8009dec:	f107 0314 	add.w	r3, r7, #20
 8009df0:	4611      	mov	r1, r2
 8009df2:	4618      	mov	r0, r3
 8009df4:	f001 fa9c 	bl	800b330 <xTaskCheckForTimeOut>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d124      	bne.n	8009e48 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009dfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e00:	f000 fcf5 	bl	800a7ee <prvIsQueueFull>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d018      	beq.n	8009e3c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0c:	3310      	adds	r3, #16
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	4611      	mov	r1, r2
 8009e12:	4618      	mov	r0, r3
 8009e14:	f001 f9c2 	bl	800b19c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009e18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e1a:	f000 fc80 	bl	800a71e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009e1e:	f000 fff1 	bl	800ae04 <xTaskResumeAll>
 8009e22:	4603      	mov	r3, r0
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	f47f af7c 	bne.w	8009d22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009e2a:	4b0c      	ldr	r3, [pc, #48]	; (8009e5c <xQueueGenericSend+0x1f8>)
 8009e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e30:	601a      	str	r2, [r3, #0]
 8009e32:	f3bf 8f4f 	dsb	sy
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	e772      	b.n	8009d22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009e3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e3e:	f000 fc6e 	bl	800a71e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e42:	f000 ffdf 	bl	800ae04 <xTaskResumeAll>
 8009e46:	e76c      	b.n	8009d22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009e48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e4a:	f000 fc68 	bl	800a71e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e4e:	f000 ffd9 	bl	800ae04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009e52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3738      	adds	r7, #56	; 0x38
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	e000ed04 	.word	0xe000ed04

08009e60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b090      	sub	sp, #64	; 0x40
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
 8009e6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d10a      	bne.n	8009e8e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7c:	f383 8811 	msr	BASEPRI, r3
 8009e80:	f3bf 8f6f 	isb	sy
 8009e84:	f3bf 8f4f 	dsb	sy
 8009e88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e8a:	bf00      	nop
 8009e8c:	e7fe      	b.n	8009e8c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d103      	bne.n	8009e9c <xQueueGenericSendFromISR+0x3c>
 8009e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d101      	bne.n	8009ea0 <xQueueGenericSendFromISR+0x40>
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e000      	b.n	8009ea2 <xQueueGenericSendFromISR+0x42>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d10a      	bne.n	8009ebc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eaa:	f383 8811 	msr	BASEPRI, r3
 8009eae:	f3bf 8f6f 	isb	sy
 8009eb2:	f3bf 8f4f 	dsb	sy
 8009eb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009eb8:	bf00      	nop
 8009eba:	e7fe      	b.n	8009eba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	2b02      	cmp	r3, #2
 8009ec0:	d103      	bne.n	8009eca <xQueueGenericSendFromISR+0x6a>
 8009ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d101      	bne.n	8009ece <xQueueGenericSendFromISR+0x6e>
 8009eca:	2301      	movs	r3, #1
 8009ecc:	e000      	b.n	8009ed0 <xQueueGenericSendFromISR+0x70>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d10a      	bne.n	8009eea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed8:	f383 8811 	msr	BASEPRI, r3
 8009edc:	f3bf 8f6f 	isb	sy
 8009ee0:	f3bf 8f4f 	dsb	sy
 8009ee4:	623b      	str	r3, [r7, #32]
}
 8009ee6:	bf00      	nop
 8009ee8:	e7fe      	b.n	8009ee8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009eea:	f002 fb6d 	bl	800c5c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009eee:	f3ef 8211 	mrs	r2, BASEPRI
 8009ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef6:	f383 8811 	msr	BASEPRI, r3
 8009efa:	f3bf 8f6f 	isb	sy
 8009efe:	f3bf 8f4f 	dsb	sy
 8009f02:	61fa      	str	r2, [r7, #28]
 8009f04:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009f06:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f08:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d302      	bcc.n	8009f1c <xQueueGenericSendFromISR+0xbc>
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d12f      	bne.n	8009f7c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f2c:	683a      	ldr	r2, [r7, #0]
 8009f2e:	68b9      	ldr	r1, [r7, #8]
 8009f30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f32:	f000 fb64 	bl	800a5fe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f36:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f3e:	d112      	bne.n	8009f66 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d016      	beq.n	8009f76 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4a:	3324      	adds	r3, #36	; 0x24
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f001 f975 	bl	800b23c <xTaskRemoveFromEventList>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d00e      	beq.n	8009f76 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00b      	beq.n	8009f76 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2201      	movs	r2, #1
 8009f62:	601a      	str	r2, [r3, #0]
 8009f64:	e007      	b.n	8009f76 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	b25a      	sxtb	r2, r3
 8009f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009f76:	2301      	movs	r3, #1
 8009f78:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009f7a:	e001      	b.n	8009f80 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f82:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009f8a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3740      	adds	r7, #64	; 0x40
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b08e      	sub	sp, #56	; 0x38
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
 8009f9e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d10a      	bne.n	8009fc0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fae:	f383 8811 	msr	BASEPRI, r3
 8009fb2:	f3bf 8f6f 	isb	sy
 8009fb6:	f3bf 8f4f 	dsb	sy
 8009fba:	623b      	str	r3, [r7, #32]
}
 8009fbc:	bf00      	nop
 8009fbe:	e7fe      	b.n	8009fbe <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d00a      	beq.n	8009fde <xQueueGiveFromISR+0x48>
	__asm volatile
 8009fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fcc:	f383 8811 	msr	BASEPRI, r3
 8009fd0:	f3bf 8f6f 	isb	sy
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	61fb      	str	r3, [r7, #28]
}
 8009fda:	bf00      	nop
 8009fdc:	e7fe      	b.n	8009fdc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d103      	bne.n	8009fee <xQueueGiveFromISR+0x58>
 8009fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d101      	bne.n	8009ff2 <xQueueGiveFromISR+0x5c>
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e000      	b.n	8009ff4 <xQueueGiveFromISR+0x5e>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10a      	bne.n	800a00e <xQueueGiveFromISR+0x78>
	__asm volatile
 8009ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	61bb      	str	r3, [r7, #24]
}
 800a00a:	bf00      	nop
 800a00c:	e7fe      	b.n	800a00c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a00e:	f002 fadb 	bl	800c5c8 <vPortValidateInterruptPriority>
	__asm volatile
 800a012:	f3ef 8211 	mrs	r2, BASEPRI
 800a016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01a:	f383 8811 	msr	BASEPRI, r3
 800a01e:	f3bf 8f6f 	isb	sy
 800a022:	f3bf 8f4f 	dsb	sy
 800a026:	617a      	str	r2, [r7, #20]
 800a028:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a02a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a02c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a032:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d22b      	bcs.n	800a096 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a040:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04a:	1c5a      	adds	r2, r3, #1
 800a04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a050:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a058:	d112      	bne.n	800a080 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d016      	beq.n	800a090 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a064:	3324      	adds	r3, #36	; 0x24
 800a066:	4618      	mov	r0, r3
 800a068:	f001 f8e8 	bl	800b23c <xTaskRemoveFromEventList>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00e      	beq.n	800a090 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d00b      	beq.n	800a090 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	2201      	movs	r2, #1
 800a07c:	601a      	str	r2, [r3, #0]
 800a07e:	e007      	b.n	800a090 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a084:	3301      	adds	r3, #1
 800a086:	b2db      	uxtb	r3, r3
 800a088:	b25a      	sxtb	r2, r3
 800a08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a090:	2301      	movs	r3, #1
 800a092:	637b      	str	r3, [r7, #52]	; 0x34
 800a094:	e001      	b.n	800a09a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a096:	2300      	movs	r3, #0
 800a098:	637b      	str	r3, [r7, #52]	; 0x34
 800a09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f383 8811 	msr	BASEPRI, r3
}
 800a0a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a0a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3738      	adds	r7, #56	; 0x38
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b08c      	sub	sp, #48	; 0x30
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d10a      	bne.n	800a0e0 <xQueueReceive+0x30>
	__asm volatile
 800a0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ce:	f383 8811 	msr	BASEPRI, r3
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	623b      	str	r3, [r7, #32]
}
 800a0dc:	bf00      	nop
 800a0de:	e7fe      	b.n	800a0de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d103      	bne.n	800a0ee <xQueueReceive+0x3e>
 800a0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d101      	bne.n	800a0f2 <xQueueReceive+0x42>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e000      	b.n	800a0f4 <xQueueReceive+0x44>
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d10a      	bne.n	800a10e <xQueueReceive+0x5e>
	__asm volatile
 800a0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fc:	f383 8811 	msr	BASEPRI, r3
 800a100:	f3bf 8f6f 	isb	sy
 800a104:	f3bf 8f4f 	dsb	sy
 800a108:	61fb      	str	r3, [r7, #28]
}
 800a10a:	bf00      	nop
 800a10c:	e7fe      	b.n	800a10c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a10e:	f001 fa67 	bl	800b5e0 <xTaskGetSchedulerState>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d102      	bne.n	800a11e <xQueueReceive+0x6e>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d101      	bne.n	800a122 <xQueueReceive+0x72>
 800a11e:	2301      	movs	r3, #1
 800a120:	e000      	b.n	800a124 <xQueueReceive+0x74>
 800a122:	2300      	movs	r3, #0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d10a      	bne.n	800a13e <xQueueReceive+0x8e>
	__asm volatile
 800a128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12c:	f383 8811 	msr	BASEPRI, r3
 800a130:	f3bf 8f6f 	isb	sy
 800a134:	f3bf 8f4f 	dsb	sy
 800a138:	61bb      	str	r3, [r7, #24]
}
 800a13a:	bf00      	nop
 800a13c:	e7fe      	b.n	800a13c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a13e:	f002 f961 	bl	800c404 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a146:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d01f      	beq.n	800a18e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a14e:	68b9      	ldr	r1, [r7, #8]
 800a150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a152:	f000 fabe 	bl	800a6d2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a158:	1e5a      	subs	r2, r3, #1
 800a15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a160:	691b      	ldr	r3, [r3, #16]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00f      	beq.n	800a186 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a168:	3310      	adds	r3, #16
 800a16a:	4618      	mov	r0, r3
 800a16c:	f001 f866 	bl	800b23c <xTaskRemoveFromEventList>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	d007      	beq.n	800a186 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a176:	4b3d      	ldr	r3, [pc, #244]	; (800a26c <xQueueReceive+0x1bc>)
 800a178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a17c:	601a      	str	r2, [r3, #0]
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a186:	f002 f96d 	bl	800c464 <vPortExitCritical>
				return pdPASS;
 800a18a:	2301      	movs	r3, #1
 800a18c:	e069      	b.n	800a262 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d103      	bne.n	800a19c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a194:	f002 f966 	bl	800c464 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a198:	2300      	movs	r3, #0
 800a19a:	e062      	b.n	800a262 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d106      	bne.n	800a1b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a1a2:	f107 0310 	add.w	r3, r7, #16
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f001 f8ac 	bl	800b304 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a1b0:	f002 f958 	bl	800c464 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a1b4:	f000 fe18 	bl	800ade8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1b8:	f002 f924 	bl	800c404 <vPortEnterCritical>
 800a1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1c2:	b25b      	sxtb	r3, r3
 800a1c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1c8:	d103      	bne.n	800a1d2 <xQueueReceive+0x122>
 800a1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1d8:	b25b      	sxtb	r3, r3
 800a1da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1de:	d103      	bne.n	800a1e8 <xQueueReceive+0x138>
 800a1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1e8:	f002 f93c 	bl	800c464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1ec:	1d3a      	adds	r2, r7, #4
 800a1ee:	f107 0310 	add.w	r3, r7, #16
 800a1f2:	4611      	mov	r1, r2
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f001 f89b 	bl	800b330 <xTaskCheckForTimeOut>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d123      	bne.n	800a248 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a202:	f000 fade 	bl	800a7c2 <prvIsQueueEmpty>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d017      	beq.n	800a23c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20e:	3324      	adds	r3, #36	; 0x24
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	4611      	mov	r1, r2
 800a214:	4618      	mov	r0, r3
 800a216:	f000 ffc1 	bl	800b19c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a21a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a21c:	f000 fa7f 	bl	800a71e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a220:	f000 fdf0 	bl	800ae04 <xTaskResumeAll>
 800a224:	4603      	mov	r3, r0
 800a226:	2b00      	cmp	r3, #0
 800a228:	d189      	bne.n	800a13e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a22a:	4b10      	ldr	r3, [pc, #64]	; (800a26c <xQueueReceive+0x1bc>)
 800a22c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a230:	601a      	str	r2, [r3, #0]
 800a232:	f3bf 8f4f 	dsb	sy
 800a236:	f3bf 8f6f 	isb	sy
 800a23a:	e780      	b.n	800a13e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a23c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a23e:	f000 fa6e 	bl	800a71e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a242:	f000 fddf 	bl	800ae04 <xTaskResumeAll>
 800a246:	e77a      	b.n	800a13e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a24a:	f000 fa68 	bl	800a71e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a24e:	f000 fdd9 	bl	800ae04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a254:	f000 fab5 	bl	800a7c2 <prvIsQueueEmpty>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	f43f af6f 	beq.w	800a13e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a260:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a262:	4618      	mov	r0, r3
 800a264:	3730      	adds	r7, #48	; 0x30
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	e000ed04 	.word	0xe000ed04

0800a270 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b08e      	sub	sp, #56	; 0x38
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a27a:	2300      	movs	r3, #0
 800a27c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a282:	2300      	movs	r3, #0
 800a284:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d10a      	bne.n	800a2a2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a290:	f383 8811 	msr	BASEPRI, r3
 800a294:	f3bf 8f6f 	isb	sy
 800a298:	f3bf 8f4f 	dsb	sy
 800a29c:	623b      	str	r3, [r7, #32]
}
 800a29e:	bf00      	nop
 800a2a0:	e7fe      	b.n	800a2a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d00a      	beq.n	800a2c0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ae:	f383 8811 	msr	BASEPRI, r3
 800a2b2:	f3bf 8f6f 	isb	sy
 800a2b6:	f3bf 8f4f 	dsb	sy
 800a2ba:	61fb      	str	r3, [r7, #28]
}
 800a2bc:	bf00      	nop
 800a2be:	e7fe      	b.n	800a2be <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2c0:	f001 f98e 	bl	800b5e0 <xTaskGetSchedulerState>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d102      	bne.n	800a2d0 <xQueueSemaphoreTake+0x60>
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d101      	bne.n	800a2d4 <xQueueSemaphoreTake+0x64>
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e000      	b.n	800a2d6 <xQueueSemaphoreTake+0x66>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d10a      	bne.n	800a2f0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2de:	f383 8811 	msr	BASEPRI, r3
 800a2e2:	f3bf 8f6f 	isb	sy
 800a2e6:	f3bf 8f4f 	dsb	sy
 800a2ea:	61bb      	str	r3, [r7, #24]
}
 800a2ec:	bf00      	nop
 800a2ee:	e7fe      	b.n	800a2ee <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2f0:	f002 f888 	bl	800c404 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d024      	beq.n	800a34a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a302:	1e5a      	subs	r2, r3, #1
 800a304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a306:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d104      	bne.n	800a31a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a310:	f001 fadc 	bl	800b8cc <pvTaskIncrementMutexHeldCount>
 800a314:	4602      	mov	r2, r0
 800a316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a318:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a31c:	691b      	ldr	r3, [r3, #16]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d00f      	beq.n	800a342 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a324:	3310      	adds	r3, #16
 800a326:	4618      	mov	r0, r3
 800a328:	f000 ff88 	bl	800b23c <xTaskRemoveFromEventList>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d007      	beq.n	800a342 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a332:	4b54      	ldr	r3, [pc, #336]	; (800a484 <xQueueSemaphoreTake+0x214>)
 800a334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a338:	601a      	str	r2, [r3, #0]
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a342:	f002 f88f 	bl	800c464 <vPortExitCritical>
				return pdPASS;
 800a346:	2301      	movs	r3, #1
 800a348:	e097      	b.n	800a47a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d111      	bne.n	800a374 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00a      	beq.n	800a36c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35a:	f383 8811 	msr	BASEPRI, r3
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f3bf 8f4f 	dsb	sy
 800a366:	617b      	str	r3, [r7, #20]
}
 800a368:	bf00      	nop
 800a36a:	e7fe      	b.n	800a36a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a36c:	f002 f87a 	bl	800c464 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a370:	2300      	movs	r3, #0
 800a372:	e082      	b.n	800a47a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a376:	2b00      	cmp	r3, #0
 800a378:	d106      	bne.n	800a388 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a37a:	f107 030c 	add.w	r3, r7, #12
 800a37e:	4618      	mov	r0, r3
 800a380:	f000 ffc0 	bl	800b304 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a384:	2301      	movs	r3, #1
 800a386:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a388:	f002 f86c 	bl	800c464 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a38c:	f000 fd2c 	bl	800ade8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a390:	f002 f838 	bl	800c404 <vPortEnterCritical>
 800a394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a396:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a39a:	b25b      	sxtb	r3, r3
 800a39c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3a0:	d103      	bne.n	800a3aa <xQueueSemaphoreTake+0x13a>
 800a3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3b0:	b25b      	sxtb	r3, r3
 800a3b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3b6:	d103      	bne.n	800a3c0 <xQueueSemaphoreTake+0x150>
 800a3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3c0:	f002 f850 	bl	800c464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3c4:	463a      	mov	r2, r7
 800a3c6:	f107 030c 	add.w	r3, r7, #12
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f000 ffaf 	bl	800b330 <xTaskCheckForTimeOut>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d132      	bne.n	800a43e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3da:	f000 f9f2 	bl	800a7c2 <prvIsQueueEmpty>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d026      	beq.n	800a432 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d109      	bne.n	800a400 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a3ec:	f002 f80a 	bl	800c404 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f001 f911 	bl	800b61c <xTaskPriorityInherit>
 800a3fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a3fc:	f002 f832 	bl	800c464 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a402:	3324      	adds	r3, #36	; 0x24
 800a404:	683a      	ldr	r2, [r7, #0]
 800a406:	4611      	mov	r1, r2
 800a408:	4618      	mov	r0, r3
 800a40a:	f000 fec7 	bl	800b19c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a40e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a410:	f000 f985 	bl	800a71e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a414:	f000 fcf6 	bl	800ae04 <xTaskResumeAll>
 800a418:	4603      	mov	r3, r0
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	f47f af68 	bne.w	800a2f0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a420:	4b18      	ldr	r3, [pc, #96]	; (800a484 <xQueueSemaphoreTake+0x214>)
 800a422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a426:	601a      	str	r2, [r3, #0]
 800a428:	f3bf 8f4f 	dsb	sy
 800a42c:	f3bf 8f6f 	isb	sy
 800a430:	e75e      	b.n	800a2f0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a432:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a434:	f000 f973 	bl	800a71e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a438:	f000 fce4 	bl	800ae04 <xTaskResumeAll>
 800a43c:	e758      	b.n	800a2f0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a43e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a440:	f000 f96d 	bl	800a71e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a444:	f000 fcde 	bl	800ae04 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a448:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a44a:	f000 f9ba 	bl	800a7c2 <prvIsQueueEmpty>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	f43f af4d 	beq.w	800a2f0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d00d      	beq.n	800a478 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a45c:	f001 ffd2 	bl	800c404 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a460:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a462:	f000 f8b4 	bl	800a5ce <prvGetDisinheritPriorityAfterTimeout>
 800a466:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a46e:	4618      	mov	r0, r3
 800a470:	f001 f9aa 	bl	800b7c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a474:	f001 fff6 	bl	800c464 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a478:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3738      	adds	r7, #56	; 0x38
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	e000ed04 	.word	0xe000ed04

0800a488 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b08e      	sub	sp, #56	; 0x38
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d10a      	bne.n	800a4b4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a2:	f383 8811 	msr	BASEPRI, r3
 800a4a6:	f3bf 8f6f 	isb	sy
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	623b      	str	r3, [r7, #32]
}
 800a4b0:	bf00      	nop
 800a4b2:	e7fe      	b.n	800a4b2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d103      	bne.n	800a4c2 <xQueueReceiveFromISR+0x3a>
 800a4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d101      	bne.n	800a4c6 <xQueueReceiveFromISR+0x3e>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e000      	b.n	800a4c8 <xQueueReceiveFromISR+0x40>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10a      	bne.n	800a4e2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d0:	f383 8811 	msr	BASEPRI, r3
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	61fb      	str	r3, [r7, #28]
}
 800a4de:	bf00      	nop
 800a4e0:	e7fe      	b.n	800a4e0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4e2:	f002 f871 	bl	800c5c8 <vPortValidateInterruptPriority>
	__asm volatile
 800a4e6:	f3ef 8211 	mrs	r2, BASEPRI
 800a4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ee:	f383 8811 	msr	BASEPRI, r3
 800a4f2:	f3bf 8f6f 	isb	sy
 800a4f6:	f3bf 8f4f 	dsb	sy
 800a4fa:	61ba      	str	r2, [r7, #24]
 800a4fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a4fe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a500:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a506:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d02f      	beq.n	800a56e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a510:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a518:	68b9      	ldr	r1, [r7, #8]
 800a51a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a51c:	f000 f8d9 	bl	800a6d2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a522:	1e5a      	subs	r2, r3, #1
 800a524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a526:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a528:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a52c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a530:	d112      	bne.n	800a558 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a534:	691b      	ldr	r3, [r3, #16]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d016      	beq.n	800a568 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53c:	3310      	adds	r3, #16
 800a53e:	4618      	mov	r0, r3
 800a540:	f000 fe7c 	bl	800b23c <xTaskRemoveFromEventList>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d00e      	beq.n	800a568 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d00b      	beq.n	800a568 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	601a      	str	r2, [r3, #0]
 800a556:	e007      	b.n	800a568 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a55c:	3301      	adds	r3, #1
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	b25a      	sxtb	r2, r3
 800a562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a568:	2301      	movs	r3, #1
 800a56a:	637b      	str	r3, [r7, #52]	; 0x34
 800a56c:	e001      	b.n	800a572 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a56e:	2300      	movs	r3, #0
 800a570:	637b      	str	r3, [r7, #52]	; 0x34
 800a572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a574:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	f383 8811 	msr	BASEPRI, r3
}
 800a57c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a580:	4618      	mov	r0, r3
 800a582:	3738      	adds	r7, #56	; 0x38
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d10a      	bne.n	800a5b0 <vQueueDelete+0x28>
	__asm volatile
 800a59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a59e:	f383 8811 	msr	BASEPRI, r3
 800a5a2:	f3bf 8f6f 	isb	sy
 800a5a6:	f3bf 8f4f 	dsb	sy
 800a5aa:	60bb      	str	r3, [r7, #8]
}
 800a5ac:	bf00      	nop
 800a5ae:	e7fe      	b.n	800a5ae <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f000 f95f 	bl	800a874 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d102      	bne.n	800a5c6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	f002 f90d 	bl	800c7e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a5c6:	bf00      	nop
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a5ce:	b480      	push	{r7}
 800a5d0:	b085      	sub	sp, #20
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d006      	beq.n	800a5ec <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a5e8:	60fb      	str	r3, [r7, #12]
 800a5ea:	e001      	b.n	800a5f0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
	}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3714      	adds	r7, #20
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr

0800a5fe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b086      	sub	sp, #24
 800a602:	af00      	add	r7, sp, #0
 800a604:	60f8      	str	r0, [r7, #12]
 800a606:	60b9      	str	r1, [r7, #8]
 800a608:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a60a:	2300      	movs	r3, #0
 800a60c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a612:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10d      	bne.n	800a638 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d14d      	bne.n	800a6c0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	4618      	mov	r0, r3
 800a62a:	f001 f85f 	bl	800b6ec <xTaskPriorityDisinherit>
 800a62e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2200      	movs	r2, #0
 800a634:	609a      	str	r2, [r3, #8]
 800a636:	e043      	b.n	800a6c0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d119      	bne.n	800a672 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	6858      	ldr	r0, [r3, #4]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a646:	461a      	mov	r2, r3
 800a648:	68b9      	ldr	r1, [r7, #8]
 800a64a:	f002 fa13 	bl	800ca74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	685a      	ldr	r2, [r3, #4]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a656:	441a      	add	r2, r3
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	685a      	ldr	r2, [r3, #4]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	429a      	cmp	r2, r3
 800a666:	d32b      	bcc.n	800a6c0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	605a      	str	r2, [r3, #4]
 800a670:	e026      	b.n	800a6c0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	68d8      	ldr	r0, [r3, #12]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a67a:	461a      	mov	r2, r3
 800a67c:	68b9      	ldr	r1, [r7, #8]
 800a67e:	f002 f9f9 	bl	800ca74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	68da      	ldr	r2, [r3, #12]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a68a:	425b      	negs	r3, r3
 800a68c:	441a      	add	r2, r3
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	68da      	ldr	r2, [r3, #12]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d207      	bcs.n	800a6ae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	689a      	ldr	r2, [r3, #8]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a6:	425b      	negs	r3, r3
 800a6a8:	441a      	add	r2, r3
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2b02      	cmp	r3, #2
 800a6b2:	d105      	bne.n	800a6c0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d002      	beq.n	800a6c0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	3b01      	subs	r3, #1
 800a6be:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	1c5a      	adds	r2, r3, #1
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a6c8:	697b      	ldr	r3, [r7, #20]
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3718      	adds	r7, #24
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b082      	sub	sp, #8
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d018      	beq.n	800a716 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	68da      	ldr	r2, [r3, #12]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ec:	441a      	add	r2, r3
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	68da      	ldr	r2, [r3, #12]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	689b      	ldr	r3, [r3, #8]
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d303      	bcc.n	800a706 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	68d9      	ldr	r1, [r3, #12]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a70e:	461a      	mov	r2, r3
 800a710:	6838      	ldr	r0, [r7, #0]
 800a712:	f002 f9af 	bl	800ca74 <memcpy>
	}
}
 800a716:	bf00      	nop
 800a718:	3708      	adds	r7, #8
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b084      	sub	sp, #16
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a726:	f001 fe6d 	bl	800c404 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a730:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a732:	e011      	b.n	800a758 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d012      	beq.n	800a762 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	3324      	adds	r3, #36	; 0x24
 800a740:	4618      	mov	r0, r3
 800a742:	f000 fd7b 	bl	800b23c <xTaskRemoveFromEventList>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d001      	beq.n	800a750 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a74c:	f000 fe52 	bl	800b3f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a750:	7bfb      	ldrb	r3, [r7, #15]
 800a752:	3b01      	subs	r3, #1
 800a754:	b2db      	uxtb	r3, r3
 800a756:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	dce9      	bgt.n	800a734 <prvUnlockQueue+0x16>
 800a760:	e000      	b.n	800a764 <prvUnlockQueue+0x46>
					break;
 800a762:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	22ff      	movs	r2, #255	; 0xff
 800a768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a76c:	f001 fe7a 	bl	800c464 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a770:	f001 fe48 	bl	800c404 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a77a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a77c:	e011      	b.n	800a7a2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d012      	beq.n	800a7ac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	3310      	adds	r3, #16
 800a78a:	4618      	mov	r0, r3
 800a78c:	f000 fd56 	bl	800b23c <xTaskRemoveFromEventList>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d001      	beq.n	800a79a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a796:	f000 fe2d 	bl	800b3f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a79a:	7bbb      	ldrb	r3, [r7, #14]
 800a79c:	3b01      	subs	r3, #1
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a7a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	dce9      	bgt.n	800a77e <prvUnlockQueue+0x60>
 800a7aa:	e000      	b.n	800a7ae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a7ac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	22ff      	movs	r2, #255	; 0xff
 800a7b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a7b6:	f001 fe55 	bl	800c464 <vPortExitCritical>
}
 800a7ba:	bf00      	nop
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b084      	sub	sp, #16
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7ca:	f001 fe1b 	bl	800c404 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d102      	bne.n	800a7dc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	60fb      	str	r3, [r7, #12]
 800a7da:	e001      	b.n	800a7e0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7e0:	f001 fe40 	bl	800c464 <vPortExitCritical>

	return xReturn;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b084      	sub	sp, #16
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7f6:	f001 fe05 	bl	800c404 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a802:	429a      	cmp	r2, r3
 800a804:	d102      	bne.n	800a80c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a806:	2301      	movs	r3, #1
 800a808:	60fb      	str	r3, [r7, #12]
 800a80a:	e001      	b.n	800a810 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a80c:	2300      	movs	r3, #0
 800a80e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a810:	f001 fe28 	bl	800c464 <vPortExitCritical>

	return xReturn;
 800a814:	68fb      	ldr	r3, [r7, #12]
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
	...

0800a820 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a82a:	2300      	movs	r3, #0
 800a82c:	60fb      	str	r3, [r7, #12]
 800a82e:	e014      	b.n	800a85a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a830:	4a0f      	ldr	r2, [pc, #60]	; (800a870 <vQueueAddToRegistry+0x50>)
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d10b      	bne.n	800a854 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a83c:	490c      	ldr	r1, [pc, #48]	; (800a870 <vQueueAddToRegistry+0x50>)
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	683a      	ldr	r2, [r7, #0]
 800a842:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a846:	4a0a      	ldr	r2, [pc, #40]	; (800a870 <vQueueAddToRegistry+0x50>)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	00db      	lsls	r3, r3, #3
 800a84c:	4413      	add	r3, r2
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a852:	e006      	b.n	800a862 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	3301      	adds	r3, #1
 800a858:	60fb      	str	r3, [r7, #12]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2b07      	cmp	r3, #7
 800a85e:	d9e7      	bls.n	800a830 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a860:	bf00      	nop
 800a862:	bf00      	nop
 800a864:	3714      	adds	r7, #20
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop
 800a870:	20005608 	.word	0x20005608

0800a874 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a874:	b480      	push	{r7}
 800a876:	b085      	sub	sp, #20
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a87c:	2300      	movs	r3, #0
 800a87e:	60fb      	str	r3, [r7, #12]
 800a880:	e016      	b.n	800a8b0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a882:	4a10      	ldr	r2, [pc, #64]	; (800a8c4 <vQueueUnregisterQueue+0x50>)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	00db      	lsls	r3, r3, #3
 800a888:	4413      	add	r3, r2
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	429a      	cmp	r2, r3
 800a890:	d10b      	bne.n	800a8aa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a892:	4a0c      	ldr	r2, [pc, #48]	; (800a8c4 <vQueueUnregisterQueue+0x50>)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2100      	movs	r1, #0
 800a898:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a89c:	4a09      	ldr	r2, [pc, #36]	; (800a8c4 <vQueueUnregisterQueue+0x50>)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	00db      	lsls	r3, r3, #3
 800a8a2:	4413      	add	r3, r2
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	605a      	str	r2, [r3, #4]
				break;
 800a8a8:	e006      	b.n	800a8b8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	60fb      	str	r3, [r7, #12]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2b07      	cmp	r3, #7
 800a8b4:	d9e5      	bls.n	800a882 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a8b6:	bf00      	nop
 800a8b8:	bf00      	nop
 800a8ba:	3714      	adds	r7, #20
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr
 800a8c4:	20005608 	.word	0x20005608

0800a8c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b086      	sub	sp, #24
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a8d8:	f001 fd94 	bl	800c404 <vPortEnterCritical>
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8e2:	b25b      	sxtb	r3, r3
 800a8e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8e8:	d103      	bne.n	800a8f2 <vQueueWaitForMessageRestricted+0x2a>
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8f8:	b25b      	sxtb	r3, r3
 800a8fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8fe:	d103      	bne.n	800a908 <vQueueWaitForMessageRestricted+0x40>
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	2200      	movs	r2, #0
 800a904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a908:	f001 fdac 	bl	800c464 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a910:	2b00      	cmp	r3, #0
 800a912:	d106      	bne.n	800a922 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	3324      	adds	r3, #36	; 0x24
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	68b9      	ldr	r1, [r7, #8]
 800a91c:	4618      	mov	r0, r3
 800a91e:	f000 fc61 	bl	800b1e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a922:	6978      	ldr	r0, [r7, #20]
 800a924:	f7ff fefb 	bl	800a71e <prvUnlockQueue>
	}
 800a928:	bf00      	nop
 800a92a:	3718      	adds	r7, #24
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a930:	b580      	push	{r7, lr}
 800a932:	b08e      	sub	sp, #56	; 0x38
 800a934:	af04      	add	r7, sp, #16
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	607a      	str	r2, [r7, #4]
 800a93c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a93e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a940:	2b00      	cmp	r3, #0
 800a942:	d10a      	bne.n	800a95a <xTaskCreateStatic+0x2a>
	__asm volatile
 800a944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a948:	f383 8811 	msr	BASEPRI, r3
 800a94c:	f3bf 8f6f 	isb	sy
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	623b      	str	r3, [r7, #32]
}
 800a956:	bf00      	nop
 800a958:	e7fe      	b.n	800a958 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d10a      	bne.n	800a976 <xTaskCreateStatic+0x46>
	__asm volatile
 800a960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a964:	f383 8811 	msr	BASEPRI, r3
 800a968:	f3bf 8f6f 	isb	sy
 800a96c:	f3bf 8f4f 	dsb	sy
 800a970:	61fb      	str	r3, [r7, #28]
}
 800a972:	bf00      	nop
 800a974:	e7fe      	b.n	800a974 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a976:	23bc      	movs	r3, #188	; 0xbc
 800a978:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	2bbc      	cmp	r3, #188	; 0xbc
 800a97e:	d00a      	beq.n	800a996 <xTaskCreateStatic+0x66>
	__asm volatile
 800a980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a984:	f383 8811 	msr	BASEPRI, r3
 800a988:	f3bf 8f6f 	isb	sy
 800a98c:	f3bf 8f4f 	dsb	sy
 800a990:	61bb      	str	r3, [r7, #24]
}
 800a992:	bf00      	nop
 800a994:	e7fe      	b.n	800a994 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a996:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d01e      	beq.n	800a9dc <xTaskCreateStatic+0xac>
 800a99e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d01b      	beq.n	800a9dc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b0:	2202      	movs	r2, #2
 800a9b2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	9303      	str	r3, [sp, #12]
 800a9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9bc:	9302      	str	r3, [sp, #8]
 800a9be:	f107 0314 	add.w	r3, r7, #20
 800a9c2:	9301      	str	r3, [sp, #4]
 800a9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c6:	9300      	str	r3, [sp, #0]
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	68b9      	ldr	r1, [r7, #8]
 800a9ce:	68f8      	ldr	r0, [r7, #12]
 800a9d0:	f000 f850 	bl	800aa74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9d6:	f000 f8f3 	bl	800abc0 <prvAddNewTaskToReadyList>
 800a9da:	e001      	b.n	800a9e0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a9e0:	697b      	ldr	r3, [r7, #20]
	}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3728      	adds	r7, #40	; 0x28
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b08c      	sub	sp, #48	; 0x30
 800a9ee:	af04      	add	r7, sp, #16
 800a9f0:	60f8      	str	r0, [r7, #12]
 800a9f2:	60b9      	str	r1, [r7, #8]
 800a9f4:	603b      	str	r3, [r7, #0]
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a9fa:	88fb      	ldrh	r3, [r7, #6]
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f001 fe22 	bl	800c648 <pvPortMalloc>
 800aa04:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d00e      	beq.n	800aa2a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aa0c:	20bc      	movs	r0, #188	; 0xbc
 800aa0e:	f001 fe1b 	bl	800c648 <pvPortMalloc>
 800aa12:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d003      	beq.n	800aa22 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	697a      	ldr	r2, [r7, #20]
 800aa1e:	631a      	str	r2, [r3, #48]	; 0x30
 800aa20:	e005      	b.n	800aa2e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aa22:	6978      	ldr	r0, [r7, #20]
 800aa24:	f001 fedc 	bl	800c7e0 <vPortFree>
 800aa28:	e001      	b.n	800aa2e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d017      	beq.n	800aa64 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	2200      	movs	r2, #0
 800aa38:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aa3c:	88fa      	ldrh	r2, [r7, #6]
 800aa3e:	2300      	movs	r3, #0
 800aa40:	9303      	str	r3, [sp, #12]
 800aa42:	69fb      	ldr	r3, [r7, #28]
 800aa44:	9302      	str	r3, [sp, #8]
 800aa46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa48:	9301      	str	r3, [sp, #4]
 800aa4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4c:	9300      	str	r3, [sp, #0]
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	68b9      	ldr	r1, [r7, #8]
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	f000 f80e 	bl	800aa74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa58:	69f8      	ldr	r0, [r7, #28]
 800aa5a:	f000 f8b1 	bl	800abc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	61bb      	str	r3, [r7, #24]
 800aa62:	e002      	b.n	800aa6a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aa64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aa6a:	69bb      	ldr	r3, [r7, #24]
	}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3720      	adds	r7, #32
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b088      	sub	sp, #32
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	60b9      	str	r1, [r7, #8]
 800aa7e:	607a      	str	r2, [r7, #4]
 800aa80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aa82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	21a5      	movs	r1, #165	; 0xa5
 800aa8e:	f001 ffff 	bl	800ca90 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aa92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	4413      	add	r3, r2
 800aaa2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aaa4:	69bb      	ldr	r3, [r7, #24]
 800aaa6:	f023 0307 	bic.w	r3, r3, #7
 800aaaa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aaac:	69bb      	ldr	r3, [r7, #24]
 800aaae:	f003 0307 	and.w	r3, r3, #7
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00a      	beq.n	800aacc <prvInitialiseNewTask+0x58>
	__asm volatile
 800aab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaba:	f383 8811 	msr	BASEPRI, r3
 800aabe:	f3bf 8f6f 	isb	sy
 800aac2:	f3bf 8f4f 	dsb	sy
 800aac6:	617b      	str	r3, [r7, #20]
}
 800aac8:	bf00      	nop
 800aaca:	e7fe      	b.n	800aaca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d01f      	beq.n	800ab12 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aad2:	2300      	movs	r3, #0
 800aad4:	61fb      	str	r3, [r7, #28]
 800aad6:	e012      	b.n	800aafe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aad8:	68ba      	ldr	r2, [r7, #8]
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	4413      	add	r3, r2
 800aade:	7819      	ldrb	r1, [r3, #0]
 800aae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aae2:	69fb      	ldr	r3, [r7, #28]
 800aae4:	4413      	add	r3, r2
 800aae6:	3334      	adds	r3, #52	; 0x34
 800aae8:	460a      	mov	r2, r1
 800aaea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aaec:	68ba      	ldr	r2, [r7, #8]
 800aaee:	69fb      	ldr	r3, [r7, #28]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d006      	beq.n	800ab06 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	3301      	adds	r3, #1
 800aafc:	61fb      	str	r3, [r7, #28]
 800aafe:	69fb      	ldr	r3, [r7, #28]
 800ab00:	2b0f      	cmp	r3, #15
 800ab02:	d9e9      	bls.n	800aad8 <prvInitialiseNewTask+0x64>
 800ab04:	e000      	b.n	800ab08 <prvInitialiseNewTask+0x94>
			{
				break;
 800ab06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ab08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab10:	e003      	b.n	800ab1a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ab12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab14:	2200      	movs	r2, #0
 800ab16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ab1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1c:	2b37      	cmp	r3, #55	; 0x37
 800ab1e:	d901      	bls.n	800ab24 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ab20:	2337      	movs	r3, #55	; 0x37
 800ab22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ab24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ab2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab2e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ab30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab32:	2200      	movs	r2, #0
 800ab34:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab38:	3304      	adds	r3, #4
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7fe fda0 	bl	8009680 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab42:	3318      	adds	r3, #24
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7fe fd9b 	bl	8009680 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ab4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ab5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ab60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab62:	2200      	movs	r2, #0
 800ab64:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ab70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab72:	3354      	adds	r3, #84	; 0x54
 800ab74:	2260      	movs	r2, #96	; 0x60
 800ab76:	2100      	movs	r1, #0
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f001 ff89 	bl	800ca90 <memset>
 800ab7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab80:	4a0c      	ldr	r2, [pc, #48]	; (800abb4 <prvInitialiseNewTask+0x140>)
 800ab82:	659a      	str	r2, [r3, #88]	; 0x58
 800ab84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab86:	4a0c      	ldr	r2, [pc, #48]	; (800abb8 <prvInitialiseNewTask+0x144>)
 800ab88:	65da      	str	r2, [r3, #92]	; 0x5c
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8c:	4a0b      	ldr	r2, [pc, #44]	; (800abbc <prvInitialiseNewTask+0x148>)
 800ab8e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ab90:	683a      	ldr	r2, [r7, #0]
 800ab92:	68f9      	ldr	r1, [r7, #12]
 800ab94:	69b8      	ldr	r0, [r7, #24]
 800ab96:	f001 fb09 	bl	800c1ac <pxPortInitialiseStack>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d002      	beq.n	800abac <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abaa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abac:	bf00      	nop
 800abae:	3720      	adds	r7, #32
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	0800da94 	.word	0x0800da94
 800abb8:	0800dab4 	.word	0x0800dab4
 800abbc:	0800da74 	.word	0x0800da74

0800abc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800abc8:	f001 fc1c 	bl	800c404 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800abcc:	4b2d      	ldr	r3, [pc, #180]	; (800ac84 <prvAddNewTaskToReadyList+0xc4>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	3301      	adds	r3, #1
 800abd2:	4a2c      	ldr	r2, [pc, #176]	; (800ac84 <prvAddNewTaskToReadyList+0xc4>)
 800abd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800abd6:	4b2c      	ldr	r3, [pc, #176]	; (800ac88 <prvAddNewTaskToReadyList+0xc8>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d109      	bne.n	800abf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800abde:	4a2a      	ldr	r2, [pc, #168]	; (800ac88 <prvAddNewTaskToReadyList+0xc8>)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800abe4:	4b27      	ldr	r3, [pc, #156]	; (800ac84 <prvAddNewTaskToReadyList+0xc4>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d110      	bne.n	800ac0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800abec:	f000 fc26 	bl	800b43c <prvInitialiseTaskLists>
 800abf0:	e00d      	b.n	800ac0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800abf2:	4b26      	ldr	r3, [pc, #152]	; (800ac8c <prvAddNewTaskToReadyList+0xcc>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d109      	bne.n	800ac0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800abfa:	4b23      	ldr	r3, [pc, #140]	; (800ac88 <prvAddNewTaskToReadyList+0xc8>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d802      	bhi.n	800ac0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ac08:	4a1f      	ldr	r2, [pc, #124]	; (800ac88 <prvAddNewTaskToReadyList+0xc8>)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ac0e:	4b20      	ldr	r3, [pc, #128]	; (800ac90 <prvAddNewTaskToReadyList+0xd0>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	3301      	adds	r3, #1
 800ac14:	4a1e      	ldr	r2, [pc, #120]	; (800ac90 <prvAddNewTaskToReadyList+0xd0>)
 800ac16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ac18:	4b1d      	ldr	r3, [pc, #116]	; (800ac90 <prvAddNewTaskToReadyList+0xd0>)
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac24:	4b1b      	ldr	r3, [pc, #108]	; (800ac94 <prvAddNewTaskToReadyList+0xd4>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d903      	bls.n	800ac34 <prvAddNewTaskToReadyList+0x74>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac30:	4a18      	ldr	r2, [pc, #96]	; (800ac94 <prvAddNewTaskToReadyList+0xd4>)
 800ac32:	6013      	str	r3, [r2, #0]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac38:	4613      	mov	r3, r2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	4413      	add	r3, r2
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	4a15      	ldr	r2, [pc, #84]	; (800ac98 <prvAddNewTaskToReadyList+0xd8>)
 800ac42:	441a      	add	r2, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	3304      	adds	r3, #4
 800ac48:	4619      	mov	r1, r3
 800ac4a:	4610      	mov	r0, r2
 800ac4c:	f7fe fd25 	bl	800969a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ac50:	f001 fc08 	bl	800c464 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ac54:	4b0d      	ldr	r3, [pc, #52]	; (800ac8c <prvAddNewTaskToReadyList+0xcc>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d00e      	beq.n	800ac7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ac5c:	4b0a      	ldr	r3, [pc, #40]	; (800ac88 <prvAddNewTaskToReadyList+0xc8>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d207      	bcs.n	800ac7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ac6a:	4b0c      	ldr	r3, [pc, #48]	; (800ac9c <prvAddNewTaskToReadyList+0xdc>)
 800ac6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac70:	601a      	str	r2, [r3, #0]
 800ac72:	f3bf 8f4f 	dsb	sy
 800ac76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac7a:	bf00      	nop
 800ac7c:	3708      	adds	r7, #8
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop
 800ac84:	20000e34 	.word	0x20000e34
 800ac88:	20000960 	.word	0x20000960
 800ac8c:	20000e40 	.word	0x20000e40
 800ac90:	20000e50 	.word	0x20000e50
 800ac94:	20000e3c 	.word	0x20000e3c
 800ac98:	20000964 	.word	0x20000964
 800ac9c:	e000ed04 	.word	0xe000ed04

0800aca0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aca8:	2300      	movs	r3, #0
 800acaa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d017      	beq.n	800ace2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800acb2:	4b13      	ldr	r3, [pc, #76]	; (800ad00 <vTaskDelay+0x60>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00a      	beq.n	800acd0 <vTaskDelay+0x30>
	__asm volatile
 800acba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acbe:	f383 8811 	msr	BASEPRI, r3
 800acc2:	f3bf 8f6f 	isb	sy
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	60bb      	str	r3, [r7, #8]
}
 800accc:	bf00      	nop
 800acce:	e7fe      	b.n	800acce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800acd0:	f000 f88a 	bl	800ade8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800acd4:	2100      	movs	r1, #0
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 fe0c 	bl	800b8f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800acdc:	f000 f892 	bl	800ae04 <xTaskResumeAll>
 800ace0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d107      	bne.n	800acf8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ace8:	4b06      	ldr	r3, [pc, #24]	; (800ad04 <vTaskDelay+0x64>)
 800acea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acee:	601a      	str	r2, [r3, #0]
 800acf0:	f3bf 8f4f 	dsb	sy
 800acf4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800acf8:	bf00      	nop
 800acfa:	3710      	adds	r7, #16
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	20000e5c 	.word	0x20000e5c
 800ad04:	e000ed04 	.word	0xe000ed04

0800ad08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b08a      	sub	sp, #40	; 0x28
 800ad0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ad12:	2300      	movs	r3, #0
 800ad14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ad16:	463a      	mov	r2, r7
 800ad18:	1d39      	adds	r1, r7, #4
 800ad1a:	f107 0308 	add.w	r3, r7, #8
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7fe fc5a 	bl	80095d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ad24:	6839      	ldr	r1, [r7, #0]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	68ba      	ldr	r2, [r7, #8]
 800ad2a:	9202      	str	r2, [sp, #8]
 800ad2c:	9301      	str	r3, [sp, #4]
 800ad2e:	2300      	movs	r3, #0
 800ad30:	9300      	str	r3, [sp, #0]
 800ad32:	2300      	movs	r3, #0
 800ad34:	460a      	mov	r2, r1
 800ad36:	4924      	ldr	r1, [pc, #144]	; (800adc8 <vTaskStartScheduler+0xc0>)
 800ad38:	4824      	ldr	r0, [pc, #144]	; (800adcc <vTaskStartScheduler+0xc4>)
 800ad3a:	f7ff fdf9 	bl	800a930 <xTaskCreateStatic>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	4a23      	ldr	r2, [pc, #140]	; (800add0 <vTaskStartScheduler+0xc8>)
 800ad42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ad44:	4b22      	ldr	r3, [pc, #136]	; (800add0 <vTaskStartScheduler+0xc8>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d002      	beq.n	800ad52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	617b      	str	r3, [r7, #20]
 800ad50:	e001      	b.n	800ad56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ad52:	2300      	movs	r3, #0
 800ad54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d102      	bne.n	800ad62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ad5c:	f000 fe1e 	bl	800b99c <xTimerCreateTimerTask>
 800ad60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d11b      	bne.n	800ada0 <vTaskStartScheduler+0x98>
	__asm volatile
 800ad68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6c:	f383 8811 	msr	BASEPRI, r3
 800ad70:	f3bf 8f6f 	isb	sy
 800ad74:	f3bf 8f4f 	dsb	sy
 800ad78:	613b      	str	r3, [r7, #16]
}
 800ad7a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ad7c:	4b15      	ldr	r3, [pc, #84]	; (800add4 <vTaskStartScheduler+0xcc>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	3354      	adds	r3, #84	; 0x54
 800ad82:	4a15      	ldr	r2, [pc, #84]	; (800add8 <vTaskStartScheduler+0xd0>)
 800ad84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ad86:	4b15      	ldr	r3, [pc, #84]	; (800addc <vTaskStartScheduler+0xd4>)
 800ad88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ad8e:	4b14      	ldr	r3, [pc, #80]	; (800ade0 <vTaskStartScheduler+0xd8>)
 800ad90:	2201      	movs	r2, #1
 800ad92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ad94:	4b13      	ldr	r3, [pc, #76]	; (800ade4 <vTaskStartScheduler+0xdc>)
 800ad96:	2200      	movs	r2, #0
 800ad98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ad9a:	f001 fa91 	bl	800c2c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ad9e:	e00e      	b.n	800adbe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ada6:	d10a      	bne.n	800adbe <vTaskStartScheduler+0xb6>
	__asm volatile
 800ada8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adac:	f383 8811 	msr	BASEPRI, r3
 800adb0:	f3bf 8f6f 	isb	sy
 800adb4:	f3bf 8f4f 	dsb	sy
 800adb8:	60fb      	str	r3, [r7, #12]
}
 800adba:	bf00      	nop
 800adbc:	e7fe      	b.n	800adbc <vTaskStartScheduler+0xb4>
}
 800adbe:	bf00      	nop
 800adc0:	3718      	adds	r7, #24
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	0800d8cc 	.word	0x0800d8cc
 800adcc:	0800b40d 	.word	0x0800b40d
 800add0:	20000e58 	.word	0x20000e58
 800add4:	20000960 	.word	0x20000960
 800add8:	20000028 	.word	0x20000028
 800addc:	20000e54 	.word	0x20000e54
 800ade0:	20000e40 	.word	0x20000e40
 800ade4:	20000e38 	.word	0x20000e38

0800ade8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ade8:	b480      	push	{r7}
 800adea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800adec:	4b04      	ldr	r3, [pc, #16]	; (800ae00 <vTaskSuspendAll+0x18>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	3301      	adds	r3, #1
 800adf2:	4a03      	ldr	r2, [pc, #12]	; (800ae00 <vTaskSuspendAll+0x18>)
 800adf4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800adf6:	bf00      	nop
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr
 800ae00:	20000e5c 	.word	0x20000e5c

0800ae04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ae12:	4b42      	ldr	r3, [pc, #264]	; (800af1c <xTaskResumeAll+0x118>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d10a      	bne.n	800ae30 <xTaskResumeAll+0x2c>
	__asm volatile
 800ae1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1e:	f383 8811 	msr	BASEPRI, r3
 800ae22:	f3bf 8f6f 	isb	sy
 800ae26:	f3bf 8f4f 	dsb	sy
 800ae2a:	603b      	str	r3, [r7, #0]
}
 800ae2c:	bf00      	nop
 800ae2e:	e7fe      	b.n	800ae2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ae30:	f001 fae8 	bl	800c404 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ae34:	4b39      	ldr	r3, [pc, #228]	; (800af1c <xTaskResumeAll+0x118>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	4a38      	ldr	r2, [pc, #224]	; (800af1c <xTaskResumeAll+0x118>)
 800ae3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae3e:	4b37      	ldr	r3, [pc, #220]	; (800af1c <xTaskResumeAll+0x118>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d162      	bne.n	800af0c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ae46:	4b36      	ldr	r3, [pc, #216]	; (800af20 <xTaskResumeAll+0x11c>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d05e      	beq.n	800af0c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae4e:	e02f      	b.n	800aeb0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae50:	4b34      	ldr	r3, [pc, #208]	; (800af24 <xTaskResumeAll+0x120>)
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	3318      	adds	r3, #24
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f7fe fc79 	bl	8009754 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	3304      	adds	r3, #4
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7fe fc74 	bl	8009754 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae70:	4b2d      	ldr	r3, [pc, #180]	; (800af28 <xTaskResumeAll+0x124>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d903      	bls.n	800ae80 <xTaskResumeAll+0x7c>
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae7c:	4a2a      	ldr	r2, [pc, #168]	; (800af28 <xTaskResumeAll+0x124>)
 800ae7e:	6013      	str	r3, [r2, #0]
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae84:	4613      	mov	r3, r2
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	4413      	add	r3, r2
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	4a27      	ldr	r2, [pc, #156]	; (800af2c <xTaskResumeAll+0x128>)
 800ae8e:	441a      	add	r2, r3
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	3304      	adds	r3, #4
 800ae94:	4619      	mov	r1, r3
 800ae96:	4610      	mov	r0, r2
 800ae98:	f7fe fbff 	bl	800969a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aea0:	4b23      	ldr	r3, [pc, #140]	; (800af30 <xTaskResumeAll+0x12c>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d302      	bcc.n	800aeb0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800aeaa:	4b22      	ldr	r3, [pc, #136]	; (800af34 <xTaskResumeAll+0x130>)
 800aeac:	2201      	movs	r2, #1
 800aeae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aeb0:	4b1c      	ldr	r3, [pc, #112]	; (800af24 <xTaskResumeAll+0x120>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d1cb      	bne.n	800ae50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d001      	beq.n	800aec2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aebe:	f000 fb5f 	bl	800b580 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aec2:	4b1d      	ldr	r3, [pc, #116]	; (800af38 <xTaskResumeAll+0x134>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d010      	beq.n	800aef0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aece:	f000 f847 	bl	800af60 <xTaskIncrementTick>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d002      	beq.n	800aede <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800aed8:	4b16      	ldr	r3, [pc, #88]	; (800af34 <xTaskResumeAll+0x130>)
 800aeda:	2201      	movs	r2, #1
 800aedc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	3b01      	subs	r3, #1
 800aee2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d1f1      	bne.n	800aece <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800aeea:	4b13      	ldr	r3, [pc, #76]	; (800af38 <xTaskResumeAll+0x134>)
 800aeec:	2200      	movs	r2, #0
 800aeee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aef0:	4b10      	ldr	r3, [pc, #64]	; (800af34 <xTaskResumeAll+0x130>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d009      	beq.n	800af0c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aef8:	2301      	movs	r3, #1
 800aefa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aefc:	4b0f      	ldr	r3, [pc, #60]	; (800af3c <xTaskResumeAll+0x138>)
 800aefe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af02:	601a      	str	r2, [r3, #0]
 800af04:	f3bf 8f4f 	dsb	sy
 800af08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af0c:	f001 faaa 	bl	800c464 <vPortExitCritical>

	return xAlreadyYielded;
 800af10:	68bb      	ldr	r3, [r7, #8]
}
 800af12:	4618      	mov	r0, r3
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	20000e5c 	.word	0x20000e5c
 800af20:	20000e34 	.word	0x20000e34
 800af24:	20000df4 	.word	0x20000df4
 800af28:	20000e3c 	.word	0x20000e3c
 800af2c:	20000964 	.word	0x20000964
 800af30:	20000960 	.word	0x20000960
 800af34:	20000e48 	.word	0x20000e48
 800af38:	20000e44 	.word	0x20000e44
 800af3c:	e000ed04 	.word	0xe000ed04

0800af40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800af40:	b480      	push	{r7}
 800af42:	b083      	sub	sp, #12
 800af44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800af46:	4b05      	ldr	r3, [pc, #20]	; (800af5c <xTaskGetTickCount+0x1c>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800af4c:	687b      	ldr	r3, [r7, #4]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	370c      	adds	r7, #12
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr
 800af5a:	bf00      	nop
 800af5c:	20000e38 	.word	0x20000e38

0800af60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b086      	sub	sp, #24
 800af64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800af66:	2300      	movs	r3, #0
 800af68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af6a:	4b4f      	ldr	r3, [pc, #316]	; (800b0a8 <xTaskIncrementTick+0x148>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	f040 808f 	bne.w	800b092 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800af74:	4b4d      	ldr	r3, [pc, #308]	; (800b0ac <xTaskIncrementTick+0x14c>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	3301      	adds	r3, #1
 800af7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800af7c:	4a4b      	ldr	r2, [pc, #300]	; (800b0ac <xTaskIncrementTick+0x14c>)
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d120      	bne.n	800afca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800af88:	4b49      	ldr	r3, [pc, #292]	; (800b0b0 <xTaskIncrementTick+0x150>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d00a      	beq.n	800afa8 <xTaskIncrementTick+0x48>
	__asm volatile
 800af92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af96:	f383 8811 	msr	BASEPRI, r3
 800af9a:	f3bf 8f6f 	isb	sy
 800af9e:	f3bf 8f4f 	dsb	sy
 800afa2:	603b      	str	r3, [r7, #0]
}
 800afa4:	bf00      	nop
 800afa6:	e7fe      	b.n	800afa6 <xTaskIncrementTick+0x46>
 800afa8:	4b41      	ldr	r3, [pc, #260]	; (800b0b0 <xTaskIncrementTick+0x150>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	60fb      	str	r3, [r7, #12]
 800afae:	4b41      	ldr	r3, [pc, #260]	; (800b0b4 <xTaskIncrementTick+0x154>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a3f      	ldr	r2, [pc, #252]	; (800b0b0 <xTaskIncrementTick+0x150>)
 800afb4:	6013      	str	r3, [r2, #0]
 800afb6:	4a3f      	ldr	r2, [pc, #252]	; (800b0b4 <xTaskIncrementTick+0x154>)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	6013      	str	r3, [r2, #0]
 800afbc:	4b3e      	ldr	r3, [pc, #248]	; (800b0b8 <xTaskIncrementTick+0x158>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	3301      	adds	r3, #1
 800afc2:	4a3d      	ldr	r2, [pc, #244]	; (800b0b8 <xTaskIncrementTick+0x158>)
 800afc4:	6013      	str	r3, [r2, #0]
 800afc6:	f000 fadb 	bl	800b580 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800afca:	4b3c      	ldr	r3, [pc, #240]	; (800b0bc <xTaskIncrementTick+0x15c>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	693a      	ldr	r2, [r7, #16]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d349      	bcc.n	800b068 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afd4:	4b36      	ldr	r3, [pc, #216]	; (800b0b0 <xTaskIncrementTick+0x150>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d104      	bne.n	800afe8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afde:	4b37      	ldr	r3, [pc, #220]	; (800b0bc <xTaskIncrementTick+0x15c>)
 800afe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afe4:	601a      	str	r2, [r3, #0]
					break;
 800afe6:	e03f      	b.n	800b068 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afe8:	4b31      	ldr	r3, [pc, #196]	; (800b0b0 <xTaskIncrementTick+0x150>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	68db      	ldr	r3, [r3, #12]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aff8:	693a      	ldr	r2, [r7, #16]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	429a      	cmp	r2, r3
 800affe:	d203      	bcs.n	800b008 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b000:	4a2e      	ldr	r2, [pc, #184]	; (800b0bc <xTaskIncrementTick+0x15c>)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b006:	e02f      	b.n	800b068 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	3304      	adds	r3, #4
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7fe fba1 	bl	8009754 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b016:	2b00      	cmp	r3, #0
 800b018:	d004      	beq.n	800b024 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	3318      	adds	r3, #24
 800b01e:	4618      	mov	r0, r3
 800b020:	f7fe fb98 	bl	8009754 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b028:	4b25      	ldr	r3, [pc, #148]	; (800b0c0 <xTaskIncrementTick+0x160>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d903      	bls.n	800b038 <xTaskIncrementTick+0xd8>
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b034:	4a22      	ldr	r2, [pc, #136]	; (800b0c0 <xTaskIncrementTick+0x160>)
 800b036:	6013      	str	r3, [r2, #0]
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b03c:	4613      	mov	r3, r2
 800b03e:	009b      	lsls	r3, r3, #2
 800b040:	4413      	add	r3, r2
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	4a1f      	ldr	r2, [pc, #124]	; (800b0c4 <xTaskIncrementTick+0x164>)
 800b046:	441a      	add	r2, r3
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	3304      	adds	r3, #4
 800b04c:	4619      	mov	r1, r3
 800b04e:	4610      	mov	r0, r2
 800b050:	f7fe fb23 	bl	800969a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b058:	4b1b      	ldr	r3, [pc, #108]	; (800b0c8 <xTaskIncrementTick+0x168>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b05e:	429a      	cmp	r2, r3
 800b060:	d3b8      	bcc.n	800afd4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b062:	2301      	movs	r3, #1
 800b064:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b066:	e7b5      	b.n	800afd4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b068:	4b17      	ldr	r3, [pc, #92]	; (800b0c8 <xTaskIncrementTick+0x168>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b06e:	4915      	ldr	r1, [pc, #84]	; (800b0c4 <xTaskIncrementTick+0x164>)
 800b070:	4613      	mov	r3, r2
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	4413      	add	r3, r2
 800b076:	009b      	lsls	r3, r3, #2
 800b078:	440b      	add	r3, r1
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d901      	bls.n	800b084 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b080:	2301      	movs	r3, #1
 800b082:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b084:	4b11      	ldr	r3, [pc, #68]	; (800b0cc <xTaskIncrementTick+0x16c>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d007      	beq.n	800b09c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b08c:	2301      	movs	r3, #1
 800b08e:	617b      	str	r3, [r7, #20]
 800b090:	e004      	b.n	800b09c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b092:	4b0f      	ldr	r3, [pc, #60]	; (800b0d0 <xTaskIncrementTick+0x170>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	3301      	adds	r3, #1
 800b098:	4a0d      	ldr	r2, [pc, #52]	; (800b0d0 <xTaskIncrementTick+0x170>)
 800b09a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b09c:	697b      	ldr	r3, [r7, #20]
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3718      	adds	r7, #24
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	20000e5c 	.word	0x20000e5c
 800b0ac:	20000e38 	.word	0x20000e38
 800b0b0:	20000dec 	.word	0x20000dec
 800b0b4:	20000df0 	.word	0x20000df0
 800b0b8:	20000e4c 	.word	0x20000e4c
 800b0bc:	20000e54 	.word	0x20000e54
 800b0c0:	20000e3c 	.word	0x20000e3c
 800b0c4:	20000964 	.word	0x20000964
 800b0c8:	20000960 	.word	0x20000960
 800b0cc:	20000e48 	.word	0x20000e48
 800b0d0:	20000e44 	.word	0x20000e44

0800b0d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b0da:	4b2a      	ldr	r3, [pc, #168]	; (800b184 <vTaskSwitchContext+0xb0>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d003      	beq.n	800b0ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b0e2:	4b29      	ldr	r3, [pc, #164]	; (800b188 <vTaskSwitchContext+0xb4>)
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b0e8:	e046      	b.n	800b178 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b0ea:	4b27      	ldr	r3, [pc, #156]	; (800b188 <vTaskSwitchContext+0xb4>)
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0f0:	4b26      	ldr	r3, [pc, #152]	; (800b18c <vTaskSwitchContext+0xb8>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	60fb      	str	r3, [r7, #12]
 800b0f6:	e010      	b.n	800b11a <vTaskSwitchContext+0x46>
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d10a      	bne.n	800b114 <vTaskSwitchContext+0x40>
	__asm volatile
 800b0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b102:	f383 8811 	msr	BASEPRI, r3
 800b106:	f3bf 8f6f 	isb	sy
 800b10a:	f3bf 8f4f 	dsb	sy
 800b10e:	607b      	str	r3, [r7, #4]
}
 800b110:	bf00      	nop
 800b112:	e7fe      	b.n	800b112 <vTaskSwitchContext+0x3e>
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	3b01      	subs	r3, #1
 800b118:	60fb      	str	r3, [r7, #12]
 800b11a:	491d      	ldr	r1, [pc, #116]	; (800b190 <vTaskSwitchContext+0xbc>)
 800b11c:	68fa      	ldr	r2, [r7, #12]
 800b11e:	4613      	mov	r3, r2
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	4413      	add	r3, r2
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	440b      	add	r3, r1
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d0e4      	beq.n	800b0f8 <vTaskSwitchContext+0x24>
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	4613      	mov	r3, r2
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	4413      	add	r3, r2
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	4a15      	ldr	r2, [pc, #84]	; (800b190 <vTaskSwitchContext+0xbc>)
 800b13a:	4413      	add	r3, r2
 800b13c:	60bb      	str	r3, [r7, #8]
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	685a      	ldr	r2, [r3, #4]
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	605a      	str	r2, [r3, #4]
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	685a      	ldr	r2, [r3, #4]
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	3308      	adds	r3, #8
 800b150:	429a      	cmp	r2, r3
 800b152:	d104      	bne.n	800b15e <vTaskSwitchContext+0x8a>
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	685a      	ldr	r2, [r3, #4]
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	605a      	str	r2, [r3, #4]
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	4a0b      	ldr	r2, [pc, #44]	; (800b194 <vTaskSwitchContext+0xc0>)
 800b166:	6013      	str	r3, [r2, #0]
 800b168:	4a08      	ldr	r2, [pc, #32]	; (800b18c <vTaskSwitchContext+0xb8>)
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b16e:	4b09      	ldr	r3, [pc, #36]	; (800b194 <vTaskSwitchContext+0xc0>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	3354      	adds	r3, #84	; 0x54
 800b174:	4a08      	ldr	r2, [pc, #32]	; (800b198 <vTaskSwitchContext+0xc4>)
 800b176:	6013      	str	r3, [r2, #0]
}
 800b178:	bf00      	nop
 800b17a:	3714      	adds	r7, #20
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr
 800b184:	20000e5c 	.word	0x20000e5c
 800b188:	20000e48 	.word	0x20000e48
 800b18c:	20000e3c 	.word	0x20000e3c
 800b190:	20000964 	.word	0x20000964
 800b194:	20000960 	.word	0x20000960
 800b198:	20000028 	.word	0x20000028

0800b19c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d10a      	bne.n	800b1c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b0:	f383 8811 	msr	BASEPRI, r3
 800b1b4:	f3bf 8f6f 	isb	sy
 800b1b8:	f3bf 8f4f 	dsb	sy
 800b1bc:	60fb      	str	r3, [r7, #12]
}
 800b1be:	bf00      	nop
 800b1c0:	e7fe      	b.n	800b1c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b1c2:	4b07      	ldr	r3, [pc, #28]	; (800b1e0 <vTaskPlaceOnEventList+0x44>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	3318      	adds	r3, #24
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f7fe fa89 	bl	80096e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b1d0:	2101      	movs	r1, #1
 800b1d2:	6838      	ldr	r0, [r7, #0]
 800b1d4:	f000 fb8e 	bl	800b8f4 <prvAddCurrentTaskToDelayedList>
}
 800b1d8:	bf00      	nop
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}
 800b1e0:	20000960 	.word	0x20000960

0800b1e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b086      	sub	sp, #24
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	60b9      	str	r1, [r7, #8]
 800b1ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d10a      	bne.n	800b20c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fa:	f383 8811 	msr	BASEPRI, r3
 800b1fe:	f3bf 8f6f 	isb	sy
 800b202:	f3bf 8f4f 	dsb	sy
 800b206:	617b      	str	r3, [r7, #20]
}
 800b208:	bf00      	nop
 800b20a:	e7fe      	b.n	800b20a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b20c:	4b0a      	ldr	r3, [pc, #40]	; (800b238 <vTaskPlaceOnEventListRestricted+0x54>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	3318      	adds	r3, #24
 800b212:	4619      	mov	r1, r3
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f7fe fa40 	bl	800969a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d002      	beq.n	800b226 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b224:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b226:	6879      	ldr	r1, [r7, #4]
 800b228:	68b8      	ldr	r0, [r7, #8]
 800b22a:	f000 fb63 	bl	800b8f4 <prvAddCurrentTaskToDelayedList>
	}
 800b22e:	bf00      	nop
 800b230:	3718      	adds	r7, #24
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	20000960 	.word	0x20000960

0800b23c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b086      	sub	sp, #24
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	68db      	ldr	r3, [r3, #12]
 800b24a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d10a      	bne.n	800b268 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b256:	f383 8811 	msr	BASEPRI, r3
 800b25a:	f3bf 8f6f 	isb	sy
 800b25e:	f3bf 8f4f 	dsb	sy
 800b262:	60fb      	str	r3, [r7, #12]
}
 800b264:	bf00      	nop
 800b266:	e7fe      	b.n	800b266 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	3318      	adds	r3, #24
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7fe fa71 	bl	8009754 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b272:	4b1e      	ldr	r3, [pc, #120]	; (800b2ec <xTaskRemoveFromEventList+0xb0>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d11d      	bne.n	800b2b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	3304      	adds	r3, #4
 800b27e:	4618      	mov	r0, r3
 800b280:	f7fe fa68 	bl	8009754 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b288:	4b19      	ldr	r3, [pc, #100]	; (800b2f0 <xTaskRemoveFromEventList+0xb4>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d903      	bls.n	800b298 <xTaskRemoveFromEventList+0x5c>
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b294:	4a16      	ldr	r2, [pc, #88]	; (800b2f0 <xTaskRemoveFromEventList+0xb4>)
 800b296:	6013      	str	r3, [r2, #0]
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b29c:	4613      	mov	r3, r2
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	4413      	add	r3, r2
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	4a13      	ldr	r2, [pc, #76]	; (800b2f4 <xTaskRemoveFromEventList+0xb8>)
 800b2a6:	441a      	add	r2, r3
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	3304      	adds	r3, #4
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	4610      	mov	r0, r2
 800b2b0:	f7fe f9f3 	bl	800969a <vListInsertEnd>
 800b2b4:	e005      	b.n	800b2c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	3318      	adds	r3, #24
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	480e      	ldr	r0, [pc, #56]	; (800b2f8 <xTaskRemoveFromEventList+0xbc>)
 800b2be:	f7fe f9ec 	bl	800969a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c6:	4b0d      	ldr	r3, [pc, #52]	; (800b2fc <xTaskRemoveFromEventList+0xc0>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d905      	bls.n	800b2dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b2d4:	4b0a      	ldr	r3, [pc, #40]	; (800b300 <xTaskRemoveFromEventList+0xc4>)
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	601a      	str	r2, [r3, #0]
 800b2da:	e001      	b.n	800b2e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b2e0:	697b      	ldr	r3, [r7, #20]
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3718      	adds	r7, #24
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	20000e5c 	.word	0x20000e5c
 800b2f0:	20000e3c 	.word	0x20000e3c
 800b2f4:	20000964 	.word	0x20000964
 800b2f8:	20000df4 	.word	0x20000df4
 800b2fc:	20000960 	.word	0x20000960
 800b300:	20000e48 	.word	0x20000e48

0800b304 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b30c:	4b06      	ldr	r3, [pc, #24]	; (800b328 <vTaskInternalSetTimeOutState+0x24>)
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b314:	4b05      	ldr	r3, [pc, #20]	; (800b32c <vTaskInternalSetTimeOutState+0x28>)
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	605a      	str	r2, [r3, #4]
}
 800b31c:	bf00      	nop
 800b31e:	370c      	adds	r7, #12
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr
 800b328:	20000e4c 	.word	0x20000e4c
 800b32c:	20000e38 	.word	0x20000e38

0800b330 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b088      	sub	sp, #32
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d10a      	bne.n	800b356 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	613b      	str	r3, [r7, #16]
}
 800b352:	bf00      	nop
 800b354:	e7fe      	b.n	800b354 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d10a      	bne.n	800b372 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b360:	f383 8811 	msr	BASEPRI, r3
 800b364:	f3bf 8f6f 	isb	sy
 800b368:	f3bf 8f4f 	dsb	sy
 800b36c:	60fb      	str	r3, [r7, #12]
}
 800b36e:	bf00      	nop
 800b370:	e7fe      	b.n	800b370 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b372:	f001 f847 	bl	800c404 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b376:	4b1d      	ldr	r3, [pc, #116]	; (800b3ec <xTaskCheckForTimeOut+0xbc>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	69ba      	ldr	r2, [r7, #24]
 800b382:	1ad3      	subs	r3, r2, r3
 800b384:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b38e:	d102      	bne.n	800b396 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b390:	2300      	movs	r3, #0
 800b392:	61fb      	str	r3, [r7, #28]
 800b394:	e023      	b.n	800b3de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	4b15      	ldr	r3, [pc, #84]	; (800b3f0 <xTaskCheckForTimeOut+0xc0>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d007      	beq.n	800b3b2 <xTaskCheckForTimeOut+0x82>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	69ba      	ldr	r2, [r7, #24]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d302      	bcc.n	800b3b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	61fb      	str	r3, [r7, #28]
 800b3b0:	e015      	b.n	800b3de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	697a      	ldr	r2, [r7, #20]
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d20b      	bcs.n	800b3d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	681a      	ldr	r2, [r3, #0]
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	1ad2      	subs	r2, r2, r3
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f7ff ff9b 	bl	800b304 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	61fb      	str	r3, [r7, #28]
 800b3d2:	e004      	b.n	800b3de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b3de:	f001 f841 	bl	800c464 <vPortExitCritical>

	return xReturn;
 800b3e2:	69fb      	ldr	r3, [r7, #28]
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3720      	adds	r7, #32
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	20000e38 	.word	0x20000e38
 800b3f0:	20000e4c 	.word	0x20000e4c

0800b3f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b3f8:	4b03      	ldr	r3, [pc, #12]	; (800b408 <vTaskMissedYield+0x14>)
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	601a      	str	r2, [r3, #0]
}
 800b3fe:	bf00      	nop
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr
 800b408:	20000e48 	.word	0x20000e48

0800b40c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b414:	f000 f852 	bl	800b4bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b418:	4b06      	ldr	r3, [pc, #24]	; (800b434 <prvIdleTask+0x28>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d9f9      	bls.n	800b414 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b420:	4b05      	ldr	r3, [pc, #20]	; (800b438 <prvIdleTask+0x2c>)
 800b422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b426:	601a      	str	r2, [r3, #0]
 800b428:	f3bf 8f4f 	dsb	sy
 800b42c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b430:	e7f0      	b.n	800b414 <prvIdleTask+0x8>
 800b432:	bf00      	nop
 800b434:	20000964 	.word	0x20000964
 800b438:	e000ed04 	.word	0xe000ed04

0800b43c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b442:	2300      	movs	r3, #0
 800b444:	607b      	str	r3, [r7, #4]
 800b446:	e00c      	b.n	800b462 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	4613      	mov	r3, r2
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	4413      	add	r3, r2
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	4a12      	ldr	r2, [pc, #72]	; (800b49c <prvInitialiseTaskLists+0x60>)
 800b454:	4413      	add	r3, r2
 800b456:	4618      	mov	r0, r3
 800b458:	f7fe f8f2 	bl	8009640 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	3301      	adds	r3, #1
 800b460:	607b      	str	r3, [r7, #4]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2b37      	cmp	r3, #55	; 0x37
 800b466:	d9ef      	bls.n	800b448 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b468:	480d      	ldr	r0, [pc, #52]	; (800b4a0 <prvInitialiseTaskLists+0x64>)
 800b46a:	f7fe f8e9 	bl	8009640 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b46e:	480d      	ldr	r0, [pc, #52]	; (800b4a4 <prvInitialiseTaskLists+0x68>)
 800b470:	f7fe f8e6 	bl	8009640 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b474:	480c      	ldr	r0, [pc, #48]	; (800b4a8 <prvInitialiseTaskLists+0x6c>)
 800b476:	f7fe f8e3 	bl	8009640 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b47a:	480c      	ldr	r0, [pc, #48]	; (800b4ac <prvInitialiseTaskLists+0x70>)
 800b47c:	f7fe f8e0 	bl	8009640 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b480:	480b      	ldr	r0, [pc, #44]	; (800b4b0 <prvInitialiseTaskLists+0x74>)
 800b482:	f7fe f8dd 	bl	8009640 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b486:	4b0b      	ldr	r3, [pc, #44]	; (800b4b4 <prvInitialiseTaskLists+0x78>)
 800b488:	4a05      	ldr	r2, [pc, #20]	; (800b4a0 <prvInitialiseTaskLists+0x64>)
 800b48a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b48c:	4b0a      	ldr	r3, [pc, #40]	; (800b4b8 <prvInitialiseTaskLists+0x7c>)
 800b48e:	4a05      	ldr	r2, [pc, #20]	; (800b4a4 <prvInitialiseTaskLists+0x68>)
 800b490:	601a      	str	r2, [r3, #0]
}
 800b492:	bf00      	nop
 800b494:	3708      	adds	r7, #8
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	20000964 	.word	0x20000964
 800b4a0:	20000dc4 	.word	0x20000dc4
 800b4a4:	20000dd8 	.word	0x20000dd8
 800b4a8:	20000df4 	.word	0x20000df4
 800b4ac:	20000e08 	.word	0x20000e08
 800b4b0:	20000e20 	.word	0x20000e20
 800b4b4:	20000dec 	.word	0x20000dec
 800b4b8:	20000df0 	.word	0x20000df0

0800b4bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b4c2:	e019      	b.n	800b4f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b4c4:	f000 ff9e 	bl	800c404 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4c8:	4b10      	ldr	r3, [pc, #64]	; (800b50c <prvCheckTasksWaitingTermination+0x50>)
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	3304      	adds	r3, #4
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7fe f93d 	bl	8009754 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b4da:	4b0d      	ldr	r3, [pc, #52]	; (800b510 <prvCheckTasksWaitingTermination+0x54>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	3b01      	subs	r3, #1
 800b4e0:	4a0b      	ldr	r2, [pc, #44]	; (800b510 <prvCheckTasksWaitingTermination+0x54>)
 800b4e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b4e4:	4b0b      	ldr	r3, [pc, #44]	; (800b514 <prvCheckTasksWaitingTermination+0x58>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	3b01      	subs	r3, #1
 800b4ea:	4a0a      	ldr	r2, [pc, #40]	; (800b514 <prvCheckTasksWaitingTermination+0x58>)
 800b4ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b4ee:	f000 ffb9 	bl	800c464 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 f810 	bl	800b518 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b4f8:	4b06      	ldr	r3, [pc, #24]	; (800b514 <prvCheckTasksWaitingTermination+0x58>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d1e1      	bne.n	800b4c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b500:	bf00      	nop
 800b502:	bf00      	nop
 800b504:	3708      	adds	r7, #8
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	20000e08 	.word	0x20000e08
 800b510:	20000e34 	.word	0x20000e34
 800b514:	20000e1c 	.word	0x20000e1c

0800b518 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	3354      	adds	r3, #84	; 0x54
 800b524:	4618      	mov	r0, r3
 800b526:	f001 fb23 	bl	800cb70 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b530:	2b00      	cmp	r3, #0
 800b532:	d108      	bne.n	800b546 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b538:	4618      	mov	r0, r3
 800b53a:	f001 f951 	bl	800c7e0 <vPortFree>
				vPortFree( pxTCB );
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f001 f94e 	bl	800c7e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b544:	e018      	b.n	800b578 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d103      	bne.n	800b558 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f001 f945 	bl	800c7e0 <vPortFree>
	}
 800b556:	e00f      	b.n	800b578 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b55e:	2b02      	cmp	r3, #2
 800b560:	d00a      	beq.n	800b578 <prvDeleteTCB+0x60>
	__asm volatile
 800b562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b566:	f383 8811 	msr	BASEPRI, r3
 800b56a:	f3bf 8f6f 	isb	sy
 800b56e:	f3bf 8f4f 	dsb	sy
 800b572:	60fb      	str	r3, [r7, #12]
}
 800b574:	bf00      	nop
 800b576:	e7fe      	b.n	800b576 <prvDeleteTCB+0x5e>
	}
 800b578:	bf00      	nop
 800b57a:	3710      	adds	r7, #16
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b580:	b480      	push	{r7}
 800b582:	b083      	sub	sp, #12
 800b584:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b586:	4b0c      	ldr	r3, [pc, #48]	; (800b5b8 <prvResetNextTaskUnblockTime+0x38>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d104      	bne.n	800b59a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b590:	4b0a      	ldr	r3, [pc, #40]	; (800b5bc <prvResetNextTaskUnblockTime+0x3c>)
 800b592:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b596:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b598:	e008      	b.n	800b5ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b59a:	4b07      	ldr	r3, [pc, #28]	; (800b5b8 <prvResetNextTaskUnblockTime+0x38>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	4a04      	ldr	r2, [pc, #16]	; (800b5bc <prvResetNextTaskUnblockTime+0x3c>)
 800b5aa:	6013      	str	r3, [r2, #0]
}
 800b5ac:	bf00      	nop
 800b5ae:	370c      	adds	r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr
 800b5b8:	20000dec 	.word	0x20000dec
 800b5bc:	20000e54 	.word	0x20000e54

0800b5c0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b083      	sub	sp, #12
 800b5c4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b5c6:	4b05      	ldr	r3, [pc, #20]	; (800b5dc <xTaskGetCurrentTaskHandle+0x1c>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b5cc:	687b      	ldr	r3, [r7, #4]
	}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	370c      	adds	r7, #12
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr
 800b5da:	bf00      	nop
 800b5dc:	20000960 	.word	0x20000960

0800b5e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b5e6:	4b0b      	ldr	r3, [pc, #44]	; (800b614 <xTaskGetSchedulerState+0x34>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d102      	bne.n	800b5f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	607b      	str	r3, [r7, #4]
 800b5f2:	e008      	b.n	800b606 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5f4:	4b08      	ldr	r3, [pc, #32]	; (800b618 <xTaskGetSchedulerState+0x38>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d102      	bne.n	800b602 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b5fc:	2302      	movs	r3, #2
 800b5fe:	607b      	str	r3, [r7, #4]
 800b600:	e001      	b.n	800b606 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b602:	2300      	movs	r3, #0
 800b604:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b606:	687b      	ldr	r3, [r7, #4]
	}
 800b608:	4618      	mov	r0, r3
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr
 800b614:	20000e40 	.word	0x20000e40
 800b618:	20000e5c 	.word	0x20000e5c

0800b61c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b628:	2300      	movs	r3, #0
 800b62a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d051      	beq.n	800b6d6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b636:	4b2a      	ldr	r3, [pc, #168]	; (800b6e0 <xTaskPriorityInherit+0xc4>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d241      	bcs.n	800b6c4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	699b      	ldr	r3, [r3, #24]
 800b644:	2b00      	cmp	r3, #0
 800b646:	db06      	blt.n	800b656 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b648:	4b25      	ldr	r3, [pc, #148]	; (800b6e0 <xTaskPriorityInherit+0xc4>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b64e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	6959      	ldr	r1, [r3, #20]
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b65e:	4613      	mov	r3, r2
 800b660:	009b      	lsls	r3, r3, #2
 800b662:	4413      	add	r3, r2
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	4a1f      	ldr	r2, [pc, #124]	; (800b6e4 <xTaskPriorityInherit+0xc8>)
 800b668:	4413      	add	r3, r2
 800b66a:	4299      	cmp	r1, r3
 800b66c:	d122      	bne.n	800b6b4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	3304      	adds	r3, #4
 800b672:	4618      	mov	r0, r3
 800b674:	f7fe f86e 	bl	8009754 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b678:	4b19      	ldr	r3, [pc, #100]	; (800b6e0 <xTaskPriorityInherit+0xc4>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b686:	4b18      	ldr	r3, [pc, #96]	; (800b6e8 <xTaskPriorityInherit+0xcc>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d903      	bls.n	800b696 <xTaskPriorityInherit+0x7a>
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b692:	4a15      	ldr	r2, [pc, #84]	; (800b6e8 <xTaskPriorityInherit+0xcc>)
 800b694:	6013      	str	r3, [r2, #0]
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b69a:	4613      	mov	r3, r2
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	4413      	add	r3, r2
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	4a10      	ldr	r2, [pc, #64]	; (800b6e4 <xTaskPriorityInherit+0xc8>)
 800b6a4:	441a      	add	r2, r3
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	3304      	adds	r3, #4
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	4610      	mov	r0, r2
 800b6ae:	f7fd fff4 	bl	800969a <vListInsertEnd>
 800b6b2:	e004      	b.n	800b6be <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b6b4:	4b0a      	ldr	r3, [pc, #40]	; (800b6e0 <xTaskPriorityInherit+0xc4>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	60fb      	str	r3, [r7, #12]
 800b6c2:	e008      	b.n	800b6d6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b6c8:	4b05      	ldr	r3, [pc, #20]	; (800b6e0 <xTaskPriorityInherit+0xc4>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d201      	bcs.n	800b6d6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
	}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3710      	adds	r7, #16
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	20000960 	.word	0x20000960
 800b6e4:	20000964 	.word	0x20000964
 800b6e8:	20000e3c 	.word	0x20000e3c

0800b6ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b086      	sub	sp, #24
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d056      	beq.n	800b7b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b702:	4b2e      	ldr	r3, [pc, #184]	; (800b7bc <xTaskPriorityDisinherit+0xd0>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	693a      	ldr	r2, [r7, #16]
 800b708:	429a      	cmp	r2, r3
 800b70a:	d00a      	beq.n	800b722 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b710:	f383 8811 	msr	BASEPRI, r3
 800b714:	f3bf 8f6f 	isb	sy
 800b718:	f3bf 8f4f 	dsb	sy
 800b71c:	60fb      	str	r3, [r7, #12]
}
 800b71e:	bf00      	nop
 800b720:	e7fe      	b.n	800b720 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b726:	2b00      	cmp	r3, #0
 800b728:	d10a      	bne.n	800b740 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b72e:	f383 8811 	msr	BASEPRI, r3
 800b732:	f3bf 8f6f 	isb	sy
 800b736:	f3bf 8f4f 	dsb	sy
 800b73a:	60bb      	str	r3, [r7, #8]
}
 800b73c:	bf00      	nop
 800b73e:	e7fe      	b.n	800b73e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b744:	1e5a      	subs	r2, r3, #1
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b752:	429a      	cmp	r2, r3
 800b754:	d02c      	beq.n	800b7b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d128      	bne.n	800b7b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	3304      	adds	r3, #4
 800b762:	4618      	mov	r0, r3
 800b764:	f7fd fff6 	bl	8009754 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b774:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b780:	4b0f      	ldr	r3, [pc, #60]	; (800b7c0 <xTaskPriorityDisinherit+0xd4>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	429a      	cmp	r2, r3
 800b786:	d903      	bls.n	800b790 <xTaskPriorityDisinherit+0xa4>
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b78c:	4a0c      	ldr	r2, [pc, #48]	; (800b7c0 <xTaskPriorityDisinherit+0xd4>)
 800b78e:	6013      	str	r3, [r2, #0]
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b794:	4613      	mov	r3, r2
 800b796:	009b      	lsls	r3, r3, #2
 800b798:	4413      	add	r3, r2
 800b79a:	009b      	lsls	r3, r3, #2
 800b79c:	4a09      	ldr	r2, [pc, #36]	; (800b7c4 <xTaskPriorityDisinherit+0xd8>)
 800b79e:	441a      	add	r2, r3
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	3304      	adds	r3, #4
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	4610      	mov	r0, r2
 800b7a8:	f7fd ff77 	bl	800969a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b7b0:	697b      	ldr	r3, [r7, #20]
	}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3718      	adds	r7, #24
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	bf00      	nop
 800b7bc:	20000960 	.word	0x20000960
 800b7c0:	20000e3c 	.word	0x20000e3c
 800b7c4:	20000964 	.word	0x20000964

0800b7c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b088      	sub	sp, #32
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d06a      	beq.n	800b8b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b7e0:	69bb      	ldr	r3, [r7, #24]
 800b7e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d10a      	bne.n	800b7fe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ec:	f383 8811 	msr	BASEPRI, r3
 800b7f0:	f3bf 8f6f 	isb	sy
 800b7f4:	f3bf 8f4f 	dsb	sy
 800b7f8:	60fb      	str	r3, [r7, #12]
}
 800b7fa:	bf00      	nop
 800b7fc:	e7fe      	b.n	800b7fc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b7fe:	69bb      	ldr	r3, [r7, #24]
 800b800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b802:	683a      	ldr	r2, [r7, #0]
 800b804:	429a      	cmp	r2, r3
 800b806:	d902      	bls.n	800b80e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	61fb      	str	r3, [r7, #28]
 800b80c:	e002      	b.n	800b814 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b80e:	69bb      	ldr	r3, [r7, #24]
 800b810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b812:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b814:	69bb      	ldr	r3, [r7, #24]
 800b816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b818:	69fa      	ldr	r2, [r7, #28]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d04b      	beq.n	800b8b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b822:	697a      	ldr	r2, [r7, #20]
 800b824:	429a      	cmp	r2, r3
 800b826:	d146      	bne.n	800b8b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b828:	4b25      	ldr	r3, [pc, #148]	; (800b8c0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	69ba      	ldr	r2, [r7, #24]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d10a      	bne.n	800b848 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b836:	f383 8811 	msr	BASEPRI, r3
 800b83a:	f3bf 8f6f 	isb	sy
 800b83e:	f3bf 8f4f 	dsb	sy
 800b842:	60bb      	str	r3, [r7, #8]
}
 800b844:	bf00      	nop
 800b846:	e7fe      	b.n	800b846 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b848:	69bb      	ldr	r3, [r7, #24]
 800b84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b84e:	69bb      	ldr	r3, [r7, #24]
 800b850:	69fa      	ldr	r2, [r7, #28]
 800b852:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b854:	69bb      	ldr	r3, [r7, #24]
 800b856:	699b      	ldr	r3, [r3, #24]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	db04      	blt.n	800b866 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b85c:	69fb      	ldr	r3, [r7, #28]
 800b85e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b866:	69bb      	ldr	r3, [r7, #24]
 800b868:	6959      	ldr	r1, [r3, #20]
 800b86a:	693a      	ldr	r2, [r7, #16]
 800b86c:	4613      	mov	r3, r2
 800b86e:	009b      	lsls	r3, r3, #2
 800b870:	4413      	add	r3, r2
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	4a13      	ldr	r2, [pc, #76]	; (800b8c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b876:	4413      	add	r3, r2
 800b878:	4299      	cmp	r1, r3
 800b87a:	d11c      	bne.n	800b8b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b87c:	69bb      	ldr	r3, [r7, #24]
 800b87e:	3304      	adds	r3, #4
 800b880:	4618      	mov	r0, r3
 800b882:	f7fd ff67 	bl	8009754 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b88a:	4b0f      	ldr	r3, [pc, #60]	; (800b8c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d903      	bls.n	800b89a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b892:	69bb      	ldr	r3, [r7, #24]
 800b894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b896:	4a0c      	ldr	r2, [pc, #48]	; (800b8c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b898:	6013      	str	r3, [r2, #0]
 800b89a:	69bb      	ldr	r3, [r7, #24]
 800b89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b89e:	4613      	mov	r3, r2
 800b8a0:	009b      	lsls	r3, r3, #2
 800b8a2:	4413      	add	r3, r2
 800b8a4:	009b      	lsls	r3, r3, #2
 800b8a6:	4a07      	ldr	r2, [pc, #28]	; (800b8c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b8a8:	441a      	add	r2, r3
 800b8aa:	69bb      	ldr	r3, [r7, #24]
 800b8ac:	3304      	adds	r3, #4
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	4610      	mov	r0, r2
 800b8b2:	f7fd fef2 	bl	800969a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b8b6:	bf00      	nop
 800b8b8:	3720      	adds	r7, #32
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop
 800b8c0:	20000960 	.word	0x20000960
 800b8c4:	20000964 	.word	0x20000964
 800b8c8:	20000e3c 	.word	0x20000e3c

0800b8cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b8cc:	b480      	push	{r7}
 800b8ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b8d0:	4b07      	ldr	r3, [pc, #28]	; (800b8f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d004      	beq.n	800b8e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b8d8:	4b05      	ldr	r3, [pc, #20]	; (800b8f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b8de:	3201      	adds	r2, #1
 800b8e0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b8e2:	4b03      	ldr	r3, [pc, #12]	; (800b8f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
	}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr
 800b8f0:	20000960 	.word	0x20000960

0800b8f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b084      	sub	sp, #16
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b8fe:	4b21      	ldr	r3, [pc, #132]	; (800b984 <prvAddCurrentTaskToDelayedList+0x90>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b904:	4b20      	ldr	r3, [pc, #128]	; (800b988 <prvAddCurrentTaskToDelayedList+0x94>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	3304      	adds	r3, #4
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7fd ff22 	bl	8009754 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b916:	d10a      	bne.n	800b92e <prvAddCurrentTaskToDelayedList+0x3a>
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d007      	beq.n	800b92e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b91e:	4b1a      	ldr	r3, [pc, #104]	; (800b988 <prvAddCurrentTaskToDelayedList+0x94>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	3304      	adds	r3, #4
 800b924:	4619      	mov	r1, r3
 800b926:	4819      	ldr	r0, [pc, #100]	; (800b98c <prvAddCurrentTaskToDelayedList+0x98>)
 800b928:	f7fd feb7 	bl	800969a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b92c:	e026      	b.n	800b97c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b92e:	68fa      	ldr	r2, [r7, #12]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4413      	add	r3, r2
 800b934:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b936:	4b14      	ldr	r3, [pc, #80]	; (800b988 <prvAddCurrentTaskToDelayedList+0x94>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	68ba      	ldr	r2, [r7, #8]
 800b93c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b93e:	68ba      	ldr	r2, [r7, #8]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	429a      	cmp	r2, r3
 800b944:	d209      	bcs.n	800b95a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b946:	4b12      	ldr	r3, [pc, #72]	; (800b990 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	4b0f      	ldr	r3, [pc, #60]	; (800b988 <prvAddCurrentTaskToDelayedList+0x94>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	3304      	adds	r3, #4
 800b950:	4619      	mov	r1, r3
 800b952:	4610      	mov	r0, r2
 800b954:	f7fd fec5 	bl	80096e2 <vListInsert>
}
 800b958:	e010      	b.n	800b97c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b95a:	4b0e      	ldr	r3, [pc, #56]	; (800b994 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	4b0a      	ldr	r3, [pc, #40]	; (800b988 <prvAddCurrentTaskToDelayedList+0x94>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	3304      	adds	r3, #4
 800b964:	4619      	mov	r1, r3
 800b966:	4610      	mov	r0, r2
 800b968:	f7fd febb 	bl	80096e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b96c:	4b0a      	ldr	r3, [pc, #40]	; (800b998 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	68ba      	ldr	r2, [r7, #8]
 800b972:	429a      	cmp	r2, r3
 800b974:	d202      	bcs.n	800b97c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b976:	4a08      	ldr	r2, [pc, #32]	; (800b998 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	6013      	str	r3, [r2, #0]
}
 800b97c:	bf00      	nop
 800b97e:	3710      	adds	r7, #16
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	20000e38 	.word	0x20000e38
 800b988:	20000960 	.word	0x20000960
 800b98c:	20000e20 	.word	0x20000e20
 800b990:	20000df0 	.word	0x20000df0
 800b994:	20000dec 	.word	0x20000dec
 800b998:	20000e54 	.word	0x20000e54

0800b99c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b08a      	sub	sp, #40	; 0x28
 800b9a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b9a6:	f000 fba1 	bl	800c0ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b9aa:	4b1c      	ldr	r3, [pc, #112]	; (800ba1c <xTimerCreateTimerTask+0x80>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d021      	beq.n	800b9f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b9ba:	1d3a      	adds	r2, r7, #4
 800b9bc:	f107 0108 	add.w	r1, r7, #8
 800b9c0:	f107 030c 	add.w	r3, r7, #12
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7fd fe21 	bl	800960c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b9ca:	6879      	ldr	r1, [r7, #4]
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	9202      	str	r2, [sp, #8]
 800b9d2:	9301      	str	r3, [sp, #4]
 800b9d4:	2302      	movs	r3, #2
 800b9d6:	9300      	str	r3, [sp, #0]
 800b9d8:	2300      	movs	r3, #0
 800b9da:	460a      	mov	r2, r1
 800b9dc:	4910      	ldr	r1, [pc, #64]	; (800ba20 <xTimerCreateTimerTask+0x84>)
 800b9de:	4811      	ldr	r0, [pc, #68]	; (800ba24 <xTimerCreateTimerTask+0x88>)
 800b9e0:	f7fe ffa6 	bl	800a930 <xTaskCreateStatic>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	4a10      	ldr	r2, [pc, #64]	; (800ba28 <xTimerCreateTimerTask+0x8c>)
 800b9e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b9ea:	4b0f      	ldr	r3, [pc, #60]	; (800ba28 <xTimerCreateTimerTask+0x8c>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d001      	beq.n	800b9f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d10a      	bne.n	800ba12 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba00:	f383 8811 	msr	BASEPRI, r3
 800ba04:	f3bf 8f6f 	isb	sy
 800ba08:	f3bf 8f4f 	dsb	sy
 800ba0c:	613b      	str	r3, [r7, #16]
}
 800ba0e:	bf00      	nop
 800ba10:	e7fe      	b.n	800ba10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ba12:	697b      	ldr	r3, [r7, #20]
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3718      	adds	r7, #24
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	20000e90 	.word	0x20000e90
 800ba20:	0800d8d4 	.word	0x0800d8d4
 800ba24:	0800bc95 	.word	0x0800bc95
 800ba28:	20000e94 	.word	0x20000e94

0800ba2c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b088      	sub	sp, #32
 800ba30:	af02      	add	r7, sp, #8
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	60b9      	str	r1, [r7, #8]
 800ba36:	607a      	str	r2, [r7, #4]
 800ba38:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ba3a:	202c      	movs	r0, #44	; 0x2c
 800ba3c:	f000 fe04 	bl	800c648 <pvPortMalloc>
 800ba40:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d00d      	beq.n	800ba64 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	9301      	str	r3, [sp, #4]
 800ba54:	6a3b      	ldr	r3, [r7, #32]
 800ba56:	9300      	str	r3, [sp, #0]
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	68b9      	ldr	r1, [r7, #8]
 800ba5e:	68f8      	ldr	r0, [r7, #12]
 800ba60:	f000 f843 	bl	800baea <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ba64:	697b      	ldr	r3, [r7, #20]
	}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3718      	adds	r7, #24
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b08a      	sub	sp, #40	; 0x28
 800ba72:	af02      	add	r7, sp, #8
 800ba74:	60f8      	str	r0, [r7, #12]
 800ba76:	60b9      	str	r1, [r7, #8]
 800ba78:	607a      	str	r2, [r7, #4]
 800ba7a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800ba7c:	232c      	movs	r3, #44	; 0x2c
 800ba7e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	2b2c      	cmp	r3, #44	; 0x2c
 800ba84:	d00a      	beq.n	800ba9c <xTimerCreateStatic+0x2e>
	__asm volatile
 800ba86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8a:	f383 8811 	msr	BASEPRI, r3
 800ba8e:	f3bf 8f6f 	isb	sy
 800ba92:	f3bf 8f4f 	dsb	sy
 800ba96:	61bb      	str	r3, [r7, #24]
}
 800ba98:	bf00      	nop
 800ba9a:	e7fe      	b.n	800ba9a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ba9c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800ba9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d10a      	bne.n	800baba <xTimerCreateStatic+0x4c>
	__asm volatile
 800baa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa8:	f383 8811 	msr	BASEPRI, r3
 800baac:	f3bf 8f6f 	isb	sy
 800bab0:	f3bf 8f4f 	dsb	sy
 800bab4:	617b      	str	r3, [r7, #20]
}
 800bab6:	bf00      	nop
 800bab8:	e7fe      	b.n	800bab8 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800baba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800babe:	69fb      	ldr	r3, [r7, #28]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d00d      	beq.n	800bae0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800bac4:	69fb      	ldr	r3, [r7, #28]
 800bac6:	2202      	movs	r2, #2
 800bac8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800bacc:	69fb      	ldr	r3, [r7, #28]
 800bace:	9301      	str	r3, [sp, #4]
 800bad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad2:	9300      	str	r3, [sp, #0]
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	68b9      	ldr	r1, [r7, #8]
 800bada:	68f8      	ldr	r0, [r7, #12]
 800badc:	f000 f805 	bl	800baea <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800bae0:	69fb      	ldr	r3, [r7, #28]
	}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3720      	adds	r7, #32
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800baea:	b580      	push	{r7, lr}
 800baec:	b086      	sub	sp, #24
 800baee:	af00      	add	r7, sp, #0
 800baf0:	60f8      	str	r0, [r7, #12]
 800baf2:	60b9      	str	r1, [r7, #8]
 800baf4:	607a      	str	r2, [r7, #4]
 800baf6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d10a      	bne.n	800bb14 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800bafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb02:	f383 8811 	msr	BASEPRI, r3
 800bb06:	f3bf 8f6f 	isb	sy
 800bb0a:	f3bf 8f4f 	dsb	sy
 800bb0e:	617b      	str	r3, [r7, #20]
}
 800bb10:	bf00      	nop
 800bb12:	e7fe      	b.n	800bb12 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800bb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d01e      	beq.n	800bb58 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800bb1a:	f000 fae7 	bl	800c0ec <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800bb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb20:	68fa      	ldr	r2, [r7, #12]
 800bb22:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800bb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb26:	68ba      	ldr	r2, [r7, #8]
 800bb28:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800bb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2c:	683a      	ldr	r2, [r7, #0]
 800bb2e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800bb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb32:	6a3a      	ldr	r2, [r7, #32]
 800bb34:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800bb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb38:	3304      	adds	r3, #4
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7fd fda0 	bl	8009680 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d008      	beq.n	800bb58 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800bb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb4c:	f043 0304 	orr.w	r3, r3, #4
 800bb50:	b2da      	uxtb	r2, r3
 800bb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800bb58:	bf00      	nop
 800bb5a:	3718      	adds	r7, #24
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b08a      	sub	sp, #40	; 0x28
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
 800bb6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d10a      	bne.n	800bb8e <xTimerGenericCommand+0x2e>
	__asm volatile
 800bb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7c:	f383 8811 	msr	BASEPRI, r3
 800bb80:	f3bf 8f6f 	isb	sy
 800bb84:	f3bf 8f4f 	dsb	sy
 800bb88:	623b      	str	r3, [r7, #32]
}
 800bb8a:	bf00      	nop
 800bb8c:	e7fe      	b.n	800bb8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bb8e:	4b1a      	ldr	r3, [pc, #104]	; (800bbf8 <xTimerGenericCommand+0x98>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d02a      	beq.n	800bbec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	2b05      	cmp	r3, #5
 800bba6:	dc18      	bgt.n	800bbda <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bba8:	f7ff fd1a 	bl	800b5e0 <xTaskGetSchedulerState>
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b02      	cmp	r3, #2
 800bbb0:	d109      	bne.n	800bbc6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bbb2:	4b11      	ldr	r3, [pc, #68]	; (800bbf8 <xTimerGenericCommand+0x98>)
 800bbb4:	6818      	ldr	r0, [r3, #0]
 800bbb6:	f107 0110 	add.w	r1, r7, #16
 800bbba:	2300      	movs	r3, #0
 800bbbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbbe:	f7fe f851 	bl	8009c64 <xQueueGenericSend>
 800bbc2:	6278      	str	r0, [r7, #36]	; 0x24
 800bbc4:	e012      	b.n	800bbec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bbc6:	4b0c      	ldr	r3, [pc, #48]	; (800bbf8 <xTimerGenericCommand+0x98>)
 800bbc8:	6818      	ldr	r0, [r3, #0]
 800bbca:	f107 0110 	add.w	r1, r7, #16
 800bbce:	2300      	movs	r3, #0
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	f7fe f847 	bl	8009c64 <xQueueGenericSend>
 800bbd6:	6278      	str	r0, [r7, #36]	; 0x24
 800bbd8:	e008      	b.n	800bbec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bbda:	4b07      	ldr	r3, [pc, #28]	; (800bbf8 <xTimerGenericCommand+0x98>)
 800bbdc:	6818      	ldr	r0, [r3, #0]
 800bbde:	f107 0110 	add.w	r1, r7, #16
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	683a      	ldr	r2, [r7, #0]
 800bbe6:	f7fe f93b 	bl	8009e60 <xQueueGenericSendFromISR>
 800bbea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3728      	adds	r7, #40	; 0x28
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
 800bbf6:	bf00      	nop
 800bbf8:	20000e90 	.word	0x20000e90

0800bbfc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b088      	sub	sp, #32
 800bc00:	af02      	add	r7, sp, #8
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc06:	4b22      	ldr	r3, [pc, #136]	; (800bc90 <prvProcessExpiredTimer+0x94>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	68db      	ldr	r3, [r3, #12]
 800bc0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	3304      	adds	r3, #4
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7fd fd9d 	bl	8009754 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc20:	f003 0304 	and.w	r3, r3, #4
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d022      	beq.n	800bc6e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	699a      	ldr	r2, [r3, #24]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	18d1      	adds	r1, r2, r3
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	683a      	ldr	r2, [r7, #0]
 800bc34:	6978      	ldr	r0, [r7, #20]
 800bc36:	f000 f8d1 	bl	800bddc <prvInsertTimerInActiveList>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d01f      	beq.n	800bc80 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc40:	2300      	movs	r3, #0
 800bc42:	9300      	str	r3, [sp, #0]
 800bc44:	2300      	movs	r3, #0
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	2100      	movs	r1, #0
 800bc4a:	6978      	ldr	r0, [r7, #20]
 800bc4c:	f7ff ff88 	bl	800bb60 <xTimerGenericCommand>
 800bc50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d113      	bne.n	800bc80 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc5c:	f383 8811 	msr	BASEPRI, r3
 800bc60:	f3bf 8f6f 	isb	sy
 800bc64:	f3bf 8f4f 	dsb	sy
 800bc68:	60fb      	str	r3, [r7, #12]
}
 800bc6a:	bf00      	nop
 800bc6c:	e7fe      	b.n	800bc6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc74:	f023 0301 	bic.w	r3, r3, #1
 800bc78:	b2da      	uxtb	r2, r3
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	6a1b      	ldr	r3, [r3, #32]
 800bc84:	6978      	ldr	r0, [r7, #20]
 800bc86:	4798      	blx	r3
}
 800bc88:	bf00      	nop
 800bc8a:	3718      	adds	r7, #24
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	20000e88 	.word	0x20000e88

0800bc94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc9c:	f107 0308 	add.w	r3, r7, #8
 800bca0:	4618      	mov	r0, r3
 800bca2:	f000 f857 	bl	800bd54 <prvGetNextExpireTime>
 800bca6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	4619      	mov	r1, r3
 800bcac:	68f8      	ldr	r0, [r7, #12]
 800bcae:	f000 f803 	bl	800bcb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bcb2:	f000 f8d5 	bl	800be60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bcb6:	e7f1      	b.n	800bc9c <prvTimerTask+0x8>

0800bcb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bcc2:	f7ff f891 	bl	800ade8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bcc6:	f107 0308 	add.w	r3, r7, #8
 800bcca:	4618      	mov	r0, r3
 800bccc:	f000 f866 	bl	800bd9c <prvSampleTimeNow>
 800bcd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d130      	bne.n	800bd3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d10a      	bne.n	800bcf4 <prvProcessTimerOrBlockTask+0x3c>
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d806      	bhi.n	800bcf4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bce6:	f7ff f88d 	bl	800ae04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bcea:	68f9      	ldr	r1, [r7, #12]
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f7ff ff85 	bl	800bbfc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bcf2:	e024      	b.n	800bd3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d008      	beq.n	800bd0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bcfa:	4b13      	ldr	r3, [pc, #76]	; (800bd48 <prvProcessTimerOrBlockTask+0x90>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d101      	bne.n	800bd08 <prvProcessTimerOrBlockTask+0x50>
 800bd04:	2301      	movs	r3, #1
 800bd06:	e000      	b.n	800bd0a <prvProcessTimerOrBlockTask+0x52>
 800bd08:	2300      	movs	r3, #0
 800bd0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bd0c:	4b0f      	ldr	r3, [pc, #60]	; (800bd4c <prvProcessTimerOrBlockTask+0x94>)
 800bd0e:	6818      	ldr	r0, [r3, #0]
 800bd10:	687a      	ldr	r2, [r7, #4]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	1ad3      	subs	r3, r2, r3
 800bd16:	683a      	ldr	r2, [r7, #0]
 800bd18:	4619      	mov	r1, r3
 800bd1a:	f7fe fdd5 	bl	800a8c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bd1e:	f7ff f871 	bl	800ae04 <xTaskResumeAll>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d10a      	bne.n	800bd3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bd28:	4b09      	ldr	r3, [pc, #36]	; (800bd50 <prvProcessTimerOrBlockTask+0x98>)
 800bd2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd2e:	601a      	str	r2, [r3, #0]
 800bd30:	f3bf 8f4f 	dsb	sy
 800bd34:	f3bf 8f6f 	isb	sy
}
 800bd38:	e001      	b.n	800bd3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bd3a:	f7ff f863 	bl	800ae04 <xTaskResumeAll>
}
 800bd3e:	bf00      	nop
 800bd40:	3710      	adds	r7, #16
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
 800bd46:	bf00      	nop
 800bd48:	20000e8c 	.word	0x20000e8c
 800bd4c:	20000e90 	.word	0x20000e90
 800bd50:	e000ed04 	.word	0xe000ed04

0800bd54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bd54:	b480      	push	{r7}
 800bd56:	b085      	sub	sp, #20
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bd5c:	4b0e      	ldr	r3, [pc, #56]	; (800bd98 <prvGetNextExpireTime+0x44>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d101      	bne.n	800bd6a <prvGetNextExpireTime+0x16>
 800bd66:	2201      	movs	r2, #1
 800bd68:	e000      	b.n	800bd6c <prvGetNextExpireTime+0x18>
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d105      	bne.n	800bd84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd78:	4b07      	ldr	r3, [pc, #28]	; (800bd98 <prvGetNextExpireTime+0x44>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	60fb      	str	r3, [r7, #12]
 800bd82:	e001      	b.n	800bd88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bd84:	2300      	movs	r3, #0
 800bd86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bd88:	68fb      	ldr	r3, [r7, #12]
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3714      	adds	r7, #20
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr
 800bd96:	bf00      	nop
 800bd98:	20000e88 	.word	0x20000e88

0800bd9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bda4:	f7ff f8cc 	bl	800af40 <xTaskGetTickCount>
 800bda8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bdaa:	4b0b      	ldr	r3, [pc, #44]	; (800bdd8 <prvSampleTimeNow+0x3c>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	68fa      	ldr	r2, [r7, #12]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d205      	bcs.n	800bdc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bdb4:	f000 f936 	bl	800c024 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2201      	movs	r2, #1
 800bdbc:	601a      	str	r2, [r3, #0]
 800bdbe:	e002      	b.n	800bdc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bdc6:	4a04      	ldr	r2, [pc, #16]	; (800bdd8 <prvSampleTimeNow+0x3c>)
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3710      	adds	r7, #16
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	20000e98 	.word	0x20000e98

0800bddc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b086      	sub	sp, #24
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	607a      	str	r2, [r7, #4]
 800bde8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bdea:	2300      	movs	r3, #0
 800bdec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	68ba      	ldr	r2, [r7, #8]
 800bdf2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bdfa:	68ba      	ldr	r2, [r7, #8]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d812      	bhi.n	800be28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be02:	687a      	ldr	r2, [r7, #4]
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	1ad2      	subs	r2, r2, r3
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	699b      	ldr	r3, [r3, #24]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d302      	bcc.n	800be16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800be10:	2301      	movs	r3, #1
 800be12:	617b      	str	r3, [r7, #20]
 800be14:	e01b      	b.n	800be4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800be16:	4b10      	ldr	r3, [pc, #64]	; (800be58 <prvInsertTimerInActiveList+0x7c>)
 800be18:	681a      	ldr	r2, [r3, #0]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	3304      	adds	r3, #4
 800be1e:	4619      	mov	r1, r3
 800be20:	4610      	mov	r0, r2
 800be22:	f7fd fc5e 	bl	80096e2 <vListInsert>
 800be26:	e012      	b.n	800be4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800be28:	687a      	ldr	r2, [r7, #4]
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d206      	bcs.n	800be3e <prvInsertTimerInActiveList+0x62>
 800be30:	68ba      	ldr	r2, [r7, #8]
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	429a      	cmp	r2, r3
 800be36:	d302      	bcc.n	800be3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800be38:	2301      	movs	r3, #1
 800be3a:	617b      	str	r3, [r7, #20]
 800be3c:	e007      	b.n	800be4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be3e:	4b07      	ldr	r3, [pc, #28]	; (800be5c <prvInsertTimerInActiveList+0x80>)
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	3304      	adds	r3, #4
 800be46:	4619      	mov	r1, r3
 800be48:	4610      	mov	r0, r2
 800be4a:	f7fd fc4a 	bl	80096e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800be4e:	697b      	ldr	r3, [r7, #20]
}
 800be50:	4618      	mov	r0, r3
 800be52:	3718      	adds	r7, #24
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}
 800be58:	20000e8c 	.word	0x20000e8c
 800be5c:	20000e88 	.word	0x20000e88

0800be60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b08e      	sub	sp, #56	; 0x38
 800be64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be66:	e0ca      	b.n	800bffe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	da18      	bge.n	800bea0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800be6e:	1d3b      	adds	r3, r7, #4
 800be70:	3304      	adds	r3, #4
 800be72:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800be74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be76:	2b00      	cmp	r3, #0
 800be78:	d10a      	bne.n	800be90 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800be7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be7e:	f383 8811 	msr	BASEPRI, r3
 800be82:	f3bf 8f6f 	isb	sy
 800be86:	f3bf 8f4f 	dsb	sy
 800be8a:	61fb      	str	r3, [r7, #28]
}
 800be8c:	bf00      	nop
 800be8e:	e7fe      	b.n	800be8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800be90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be96:	6850      	ldr	r0, [r2, #4]
 800be98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be9a:	6892      	ldr	r2, [r2, #8]
 800be9c:	4611      	mov	r1, r2
 800be9e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	f2c0 80aa 	blt.w	800bffc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800beac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beae:	695b      	ldr	r3, [r3, #20]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d004      	beq.n	800bebe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800beb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb6:	3304      	adds	r3, #4
 800beb8:	4618      	mov	r0, r3
 800beba:	f7fd fc4b 	bl	8009754 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bebe:	463b      	mov	r3, r7
 800bec0:	4618      	mov	r0, r3
 800bec2:	f7ff ff6b 	bl	800bd9c <prvSampleTimeNow>
 800bec6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2b09      	cmp	r3, #9
 800becc:	f200 8097 	bhi.w	800bffe <prvProcessReceivedCommands+0x19e>
 800bed0:	a201      	add	r2, pc, #4	; (adr r2, 800bed8 <prvProcessReceivedCommands+0x78>)
 800bed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed6:	bf00      	nop
 800bed8:	0800bf01 	.word	0x0800bf01
 800bedc:	0800bf01 	.word	0x0800bf01
 800bee0:	0800bf01 	.word	0x0800bf01
 800bee4:	0800bf75 	.word	0x0800bf75
 800bee8:	0800bf89 	.word	0x0800bf89
 800beec:	0800bfd3 	.word	0x0800bfd3
 800bef0:	0800bf01 	.word	0x0800bf01
 800bef4:	0800bf01 	.word	0x0800bf01
 800bef8:	0800bf75 	.word	0x0800bf75
 800befc:	0800bf89 	.word	0x0800bf89
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf06:	f043 0301 	orr.w	r3, r3, #1
 800bf0a:	b2da      	uxtb	r2, r3
 800bf0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bf12:	68ba      	ldr	r2, [r7, #8]
 800bf14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf16:	699b      	ldr	r3, [r3, #24]
 800bf18:	18d1      	adds	r1, r2, r3
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf20:	f7ff ff5c 	bl	800bddc <prvInsertTimerInActiveList>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d069      	beq.n	800bffe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2c:	6a1b      	ldr	r3, [r3, #32]
 800bf2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf38:	f003 0304 	and.w	r3, r3, #4
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d05e      	beq.n	800bffe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bf40:	68ba      	ldr	r2, [r7, #8]
 800bf42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf44:	699b      	ldr	r3, [r3, #24]
 800bf46:	441a      	add	r2, r3
 800bf48:	2300      	movs	r3, #0
 800bf4a:	9300      	str	r3, [sp, #0]
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	2100      	movs	r1, #0
 800bf50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf52:	f7ff fe05 	bl	800bb60 <xTimerGenericCommand>
 800bf56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bf58:	6a3b      	ldr	r3, [r7, #32]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d14f      	bne.n	800bffe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bf5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf62:	f383 8811 	msr	BASEPRI, r3
 800bf66:	f3bf 8f6f 	isb	sy
 800bf6a:	f3bf 8f4f 	dsb	sy
 800bf6e:	61bb      	str	r3, [r7, #24]
}
 800bf70:	bf00      	nop
 800bf72:	e7fe      	b.n	800bf72 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf7a:	f023 0301 	bic.w	r3, r3, #1
 800bf7e:	b2da      	uxtb	r2, r3
 800bf80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bf86:	e03a      	b.n	800bffe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf8e:	f043 0301 	orr.w	r3, r3, #1
 800bf92:	b2da      	uxtb	r2, r3
 800bf94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bf9a:	68ba      	ldr	r2, [r7, #8]
 800bf9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa2:	699b      	ldr	r3, [r3, #24]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d10a      	bne.n	800bfbe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bfa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfac:	f383 8811 	msr	BASEPRI, r3
 800bfb0:	f3bf 8f6f 	isb	sy
 800bfb4:	f3bf 8f4f 	dsb	sy
 800bfb8:	617b      	str	r3, [r7, #20]
}
 800bfba:	bf00      	nop
 800bfbc:	e7fe      	b.n	800bfbc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc0:	699a      	ldr	r2, [r3, #24]
 800bfc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc4:	18d1      	adds	r1, r2, r3
 800bfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfcc:	f7ff ff06 	bl	800bddc <prvInsertTimerInActiveList>
					break;
 800bfd0:	e015      	b.n	800bffe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfd8:	f003 0302 	and.w	r3, r3, #2
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d103      	bne.n	800bfe8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bfe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfe2:	f000 fbfd 	bl	800c7e0 <vPortFree>
 800bfe6:	e00a      	b.n	800bffe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfee:	f023 0301 	bic.w	r3, r3, #1
 800bff2:	b2da      	uxtb	r2, r3
 800bff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bffa:	e000      	b.n	800bffe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bffc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bffe:	4b08      	ldr	r3, [pc, #32]	; (800c020 <prvProcessReceivedCommands+0x1c0>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	1d39      	adds	r1, r7, #4
 800c004:	2200      	movs	r2, #0
 800c006:	4618      	mov	r0, r3
 800c008:	f7fe f852 	bl	800a0b0 <xQueueReceive>
 800c00c:	4603      	mov	r3, r0
 800c00e:	2b00      	cmp	r3, #0
 800c010:	f47f af2a 	bne.w	800be68 <prvProcessReceivedCommands+0x8>
	}
}
 800c014:	bf00      	nop
 800c016:	bf00      	nop
 800c018:	3730      	adds	r7, #48	; 0x30
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	20000e90 	.word	0x20000e90

0800c024 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b088      	sub	sp, #32
 800c028:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c02a:	e048      	b.n	800c0be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c02c:	4b2d      	ldr	r3, [pc, #180]	; (800c0e4 <prvSwitchTimerLists+0xc0>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	68db      	ldr	r3, [r3, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c036:	4b2b      	ldr	r3, [pc, #172]	; (800c0e4 <prvSwitchTimerLists+0xc0>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	68db      	ldr	r3, [r3, #12]
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	3304      	adds	r3, #4
 800c044:	4618      	mov	r0, r3
 800c046:	f7fd fb85 	bl	8009754 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	6a1b      	ldr	r3, [r3, #32]
 800c04e:	68f8      	ldr	r0, [r7, #12]
 800c050:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c058:	f003 0304 	and.w	r3, r3, #4
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d02e      	beq.n	800c0be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	699b      	ldr	r3, [r3, #24]
 800c064:	693a      	ldr	r2, [r7, #16]
 800c066:	4413      	add	r3, r2
 800c068:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c06a:	68ba      	ldr	r2, [r7, #8]
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	429a      	cmp	r2, r3
 800c070:	d90e      	bls.n	800c090 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	68ba      	ldr	r2, [r7, #8]
 800c076:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	68fa      	ldr	r2, [r7, #12]
 800c07c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c07e:	4b19      	ldr	r3, [pc, #100]	; (800c0e4 <prvSwitchTimerLists+0xc0>)
 800c080:	681a      	ldr	r2, [r3, #0]
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	3304      	adds	r3, #4
 800c086:	4619      	mov	r1, r3
 800c088:	4610      	mov	r0, r2
 800c08a:	f7fd fb2a 	bl	80096e2 <vListInsert>
 800c08e:	e016      	b.n	800c0be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c090:	2300      	movs	r3, #0
 800c092:	9300      	str	r3, [sp, #0]
 800c094:	2300      	movs	r3, #0
 800c096:	693a      	ldr	r2, [r7, #16]
 800c098:	2100      	movs	r1, #0
 800c09a:	68f8      	ldr	r0, [r7, #12]
 800c09c:	f7ff fd60 	bl	800bb60 <xTimerGenericCommand>
 800c0a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d10a      	bne.n	800c0be <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ac:	f383 8811 	msr	BASEPRI, r3
 800c0b0:	f3bf 8f6f 	isb	sy
 800c0b4:	f3bf 8f4f 	dsb	sy
 800c0b8:	603b      	str	r3, [r7, #0]
}
 800c0ba:	bf00      	nop
 800c0bc:	e7fe      	b.n	800c0bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c0be:	4b09      	ldr	r3, [pc, #36]	; (800c0e4 <prvSwitchTimerLists+0xc0>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d1b1      	bne.n	800c02c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c0c8:	4b06      	ldr	r3, [pc, #24]	; (800c0e4 <prvSwitchTimerLists+0xc0>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c0ce:	4b06      	ldr	r3, [pc, #24]	; (800c0e8 <prvSwitchTimerLists+0xc4>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4a04      	ldr	r2, [pc, #16]	; (800c0e4 <prvSwitchTimerLists+0xc0>)
 800c0d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c0d6:	4a04      	ldr	r2, [pc, #16]	; (800c0e8 <prvSwitchTimerLists+0xc4>)
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	6013      	str	r3, [r2, #0]
}
 800c0dc:	bf00      	nop
 800c0de:	3718      	adds	r7, #24
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}
 800c0e4:	20000e88 	.word	0x20000e88
 800c0e8:	20000e8c 	.word	0x20000e8c

0800c0ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c0f2:	f000 f987 	bl	800c404 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c0f6:	4b15      	ldr	r3, [pc, #84]	; (800c14c <prvCheckForValidListAndQueue+0x60>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d120      	bne.n	800c140 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c0fe:	4814      	ldr	r0, [pc, #80]	; (800c150 <prvCheckForValidListAndQueue+0x64>)
 800c100:	f7fd fa9e 	bl	8009640 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c104:	4813      	ldr	r0, [pc, #76]	; (800c154 <prvCheckForValidListAndQueue+0x68>)
 800c106:	f7fd fa9b 	bl	8009640 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c10a:	4b13      	ldr	r3, [pc, #76]	; (800c158 <prvCheckForValidListAndQueue+0x6c>)
 800c10c:	4a10      	ldr	r2, [pc, #64]	; (800c150 <prvCheckForValidListAndQueue+0x64>)
 800c10e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c110:	4b12      	ldr	r3, [pc, #72]	; (800c15c <prvCheckForValidListAndQueue+0x70>)
 800c112:	4a10      	ldr	r2, [pc, #64]	; (800c154 <prvCheckForValidListAndQueue+0x68>)
 800c114:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c116:	2300      	movs	r3, #0
 800c118:	9300      	str	r3, [sp, #0]
 800c11a:	4b11      	ldr	r3, [pc, #68]	; (800c160 <prvCheckForValidListAndQueue+0x74>)
 800c11c:	4a11      	ldr	r2, [pc, #68]	; (800c164 <prvCheckForValidListAndQueue+0x78>)
 800c11e:	2110      	movs	r1, #16
 800c120:	200a      	movs	r0, #10
 800c122:	f7fd fba9 	bl	8009878 <xQueueGenericCreateStatic>
 800c126:	4603      	mov	r3, r0
 800c128:	4a08      	ldr	r2, [pc, #32]	; (800c14c <prvCheckForValidListAndQueue+0x60>)
 800c12a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c12c:	4b07      	ldr	r3, [pc, #28]	; (800c14c <prvCheckForValidListAndQueue+0x60>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d005      	beq.n	800c140 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c134:	4b05      	ldr	r3, [pc, #20]	; (800c14c <prvCheckForValidListAndQueue+0x60>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	490b      	ldr	r1, [pc, #44]	; (800c168 <prvCheckForValidListAndQueue+0x7c>)
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7fe fb70 	bl	800a820 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c140:	f000 f990 	bl	800c464 <vPortExitCritical>
}
 800c144:	bf00      	nop
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	20000e90 	.word	0x20000e90
 800c150:	20000e60 	.word	0x20000e60
 800c154:	20000e74 	.word	0x20000e74
 800c158:	20000e88 	.word	0x20000e88
 800c15c:	20000e8c 	.word	0x20000e8c
 800c160:	20000f3c 	.word	0x20000f3c
 800c164:	20000e9c 	.word	0x20000e9c
 800c168:	0800d8dc 	.word	0x0800d8dc

0800c16c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b086      	sub	sp, #24
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d10a      	bne.n	800c194 <pvTimerGetTimerID+0x28>
	__asm volatile
 800c17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c182:	f383 8811 	msr	BASEPRI, r3
 800c186:	f3bf 8f6f 	isb	sy
 800c18a:	f3bf 8f4f 	dsb	sy
 800c18e:	60fb      	str	r3, [r7, #12]
}
 800c190:	bf00      	nop
 800c192:	e7fe      	b.n	800c192 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800c194:	f000 f936 	bl	800c404 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	69db      	ldr	r3, [r3, #28]
 800c19c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800c19e:	f000 f961 	bl	800c464 <vPortExitCritical>

	return pvReturn;
 800c1a2:	693b      	ldr	r3, [r7, #16]
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3718      	adds	r7, #24
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b085      	sub	sp, #20
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	3b04      	subs	r3, #4
 800c1bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c1c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	3b04      	subs	r3, #4
 800c1ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	f023 0201 	bic.w	r2, r3, #1
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	3b04      	subs	r3, #4
 800c1da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c1dc:	4a0c      	ldr	r2, [pc, #48]	; (800c210 <pxPortInitialiseStack+0x64>)
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	3b14      	subs	r3, #20
 800c1e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c1e8:	687a      	ldr	r2, [r7, #4]
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	3b04      	subs	r3, #4
 800c1f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	f06f 0202 	mvn.w	r2, #2
 800c1fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	3b20      	subs	r3, #32
 800c200:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c202:	68fb      	ldr	r3, [r7, #12]
}
 800c204:	4618      	mov	r0, r3
 800c206:	3714      	adds	r7, #20
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr
 800c210:	0800c215 	.word	0x0800c215

0800c214 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c214:	b480      	push	{r7}
 800c216:	b085      	sub	sp, #20
 800c218:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c21a:	2300      	movs	r3, #0
 800c21c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c21e:	4b12      	ldr	r3, [pc, #72]	; (800c268 <prvTaskExitError+0x54>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c226:	d00a      	beq.n	800c23e <prvTaskExitError+0x2a>
	__asm volatile
 800c228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22c:	f383 8811 	msr	BASEPRI, r3
 800c230:	f3bf 8f6f 	isb	sy
 800c234:	f3bf 8f4f 	dsb	sy
 800c238:	60fb      	str	r3, [r7, #12]
}
 800c23a:	bf00      	nop
 800c23c:	e7fe      	b.n	800c23c <prvTaskExitError+0x28>
	__asm volatile
 800c23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c242:	f383 8811 	msr	BASEPRI, r3
 800c246:	f3bf 8f6f 	isb	sy
 800c24a:	f3bf 8f4f 	dsb	sy
 800c24e:	60bb      	str	r3, [r7, #8]
}
 800c250:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c252:	bf00      	nop
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d0fc      	beq.n	800c254 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c25a:	bf00      	nop
 800c25c:	bf00      	nop
 800c25e:	3714      	adds	r7, #20
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr
 800c268:	20000024 	.word	0x20000024
 800c26c:	00000000 	.word	0x00000000

0800c270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c270:	4b07      	ldr	r3, [pc, #28]	; (800c290 <pxCurrentTCBConst2>)
 800c272:	6819      	ldr	r1, [r3, #0]
 800c274:	6808      	ldr	r0, [r1, #0]
 800c276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c27a:	f380 8809 	msr	PSP, r0
 800c27e:	f3bf 8f6f 	isb	sy
 800c282:	f04f 0000 	mov.w	r0, #0
 800c286:	f380 8811 	msr	BASEPRI, r0
 800c28a:	4770      	bx	lr
 800c28c:	f3af 8000 	nop.w

0800c290 <pxCurrentTCBConst2>:
 800c290:	20000960 	.word	0x20000960
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c294:	bf00      	nop
 800c296:	bf00      	nop

0800c298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c298:	4808      	ldr	r0, [pc, #32]	; (800c2bc <prvPortStartFirstTask+0x24>)
 800c29a:	6800      	ldr	r0, [r0, #0]
 800c29c:	6800      	ldr	r0, [r0, #0]
 800c29e:	f380 8808 	msr	MSP, r0
 800c2a2:	f04f 0000 	mov.w	r0, #0
 800c2a6:	f380 8814 	msr	CONTROL, r0
 800c2aa:	b662      	cpsie	i
 800c2ac:	b661      	cpsie	f
 800c2ae:	f3bf 8f4f 	dsb	sy
 800c2b2:	f3bf 8f6f 	isb	sy
 800c2b6:	df00      	svc	0
 800c2b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c2ba:	bf00      	nop
 800c2bc:	e000ed08 	.word	0xe000ed08

0800c2c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b086      	sub	sp, #24
 800c2c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c2c6:	4b46      	ldr	r3, [pc, #280]	; (800c3e0 <xPortStartScheduler+0x120>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	4a46      	ldr	r2, [pc, #280]	; (800c3e4 <xPortStartScheduler+0x124>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d10a      	bne.n	800c2e6 <xPortStartScheduler+0x26>
	__asm volatile
 800c2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d4:	f383 8811 	msr	BASEPRI, r3
 800c2d8:	f3bf 8f6f 	isb	sy
 800c2dc:	f3bf 8f4f 	dsb	sy
 800c2e0:	613b      	str	r3, [r7, #16]
}
 800c2e2:	bf00      	nop
 800c2e4:	e7fe      	b.n	800c2e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c2e6:	4b3e      	ldr	r3, [pc, #248]	; (800c3e0 <xPortStartScheduler+0x120>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a3f      	ldr	r2, [pc, #252]	; (800c3e8 <xPortStartScheduler+0x128>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d10a      	bne.n	800c306 <xPortStartScheduler+0x46>
	__asm volatile
 800c2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f4:	f383 8811 	msr	BASEPRI, r3
 800c2f8:	f3bf 8f6f 	isb	sy
 800c2fc:	f3bf 8f4f 	dsb	sy
 800c300:	60fb      	str	r3, [r7, #12]
}
 800c302:	bf00      	nop
 800c304:	e7fe      	b.n	800c304 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c306:	4b39      	ldr	r3, [pc, #228]	; (800c3ec <xPortStartScheduler+0x12c>)
 800c308:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	b2db      	uxtb	r3, r3
 800c310:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	22ff      	movs	r2, #255	; 0xff
 800c316:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	781b      	ldrb	r3, [r3, #0]
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c320:	78fb      	ldrb	r3, [r7, #3]
 800c322:	b2db      	uxtb	r3, r3
 800c324:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c328:	b2da      	uxtb	r2, r3
 800c32a:	4b31      	ldr	r3, [pc, #196]	; (800c3f0 <xPortStartScheduler+0x130>)
 800c32c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c32e:	4b31      	ldr	r3, [pc, #196]	; (800c3f4 <xPortStartScheduler+0x134>)
 800c330:	2207      	movs	r2, #7
 800c332:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c334:	e009      	b.n	800c34a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c336:	4b2f      	ldr	r3, [pc, #188]	; (800c3f4 <xPortStartScheduler+0x134>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	3b01      	subs	r3, #1
 800c33c:	4a2d      	ldr	r2, [pc, #180]	; (800c3f4 <xPortStartScheduler+0x134>)
 800c33e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c340:	78fb      	ldrb	r3, [r7, #3]
 800c342:	b2db      	uxtb	r3, r3
 800c344:	005b      	lsls	r3, r3, #1
 800c346:	b2db      	uxtb	r3, r3
 800c348:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c34a:	78fb      	ldrb	r3, [r7, #3]
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c352:	2b80      	cmp	r3, #128	; 0x80
 800c354:	d0ef      	beq.n	800c336 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c356:	4b27      	ldr	r3, [pc, #156]	; (800c3f4 <xPortStartScheduler+0x134>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f1c3 0307 	rsb	r3, r3, #7
 800c35e:	2b04      	cmp	r3, #4
 800c360:	d00a      	beq.n	800c378 <xPortStartScheduler+0xb8>
	__asm volatile
 800c362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c366:	f383 8811 	msr	BASEPRI, r3
 800c36a:	f3bf 8f6f 	isb	sy
 800c36e:	f3bf 8f4f 	dsb	sy
 800c372:	60bb      	str	r3, [r7, #8]
}
 800c374:	bf00      	nop
 800c376:	e7fe      	b.n	800c376 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c378:	4b1e      	ldr	r3, [pc, #120]	; (800c3f4 <xPortStartScheduler+0x134>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	021b      	lsls	r3, r3, #8
 800c37e:	4a1d      	ldr	r2, [pc, #116]	; (800c3f4 <xPortStartScheduler+0x134>)
 800c380:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c382:	4b1c      	ldr	r3, [pc, #112]	; (800c3f4 <xPortStartScheduler+0x134>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c38a:	4a1a      	ldr	r2, [pc, #104]	; (800c3f4 <xPortStartScheduler+0x134>)
 800c38c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	b2da      	uxtb	r2, r3
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c396:	4b18      	ldr	r3, [pc, #96]	; (800c3f8 <xPortStartScheduler+0x138>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4a17      	ldr	r2, [pc, #92]	; (800c3f8 <xPortStartScheduler+0x138>)
 800c39c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c3a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c3a2:	4b15      	ldr	r3, [pc, #84]	; (800c3f8 <xPortStartScheduler+0x138>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4a14      	ldr	r2, [pc, #80]	; (800c3f8 <xPortStartScheduler+0x138>)
 800c3a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c3ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c3ae:	f000 f8dd 	bl	800c56c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c3b2:	4b12      	ldr	r3, [pc, #72]	; (800c3fc <xPortStartScheduler+0x13c>)
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c3b8:	f000 f8fc 	bl	800c5b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c3bc:	4b10      	ldr	r3, [pc, #64]	; (800c400 <xPortStartScheduler+0x140>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4a0f      	ldr	r2, [pc, #60]	; (800c400 <xPortStartScheduler+0x140>)
 800c3c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c3c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c3c8:	f7ff ff66 	bl	800c298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c3cc:	f7fe fe82 	bl	800b0d4 <vTaskSwitchContext>
	prvTaskExitError();
 800c3d0:	f7ff ff20 	bl	800c214 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c3d4:	2300      	movs	r3, #0
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3718      	adds	r7, #24
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	e000ed00 	.word	0xe000ed00
 800c3e4:	410fc271 	.word	0x410fc271
 800c3e8:	410fc270 	.word	0x410fc270
 800c3ec:	e000e400 	.word	0xe000e400
 800c3f0:	20000f8c 	.word	0x20000f8c
 800c3f4:	20000f90 	.word	0x20000f90
 800c3f8:	e000ed20 	.word	0xe000ed20
 800c3fc:	20000024 	.word	0x20000024
 800c400:	e000ef34 	.word	0xe000ef34

0800c404 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c404:	b480      	push	{r7}
 800c406:	b083      	sub	sp, #12
 800c408:	af00      	add	r7, sp, #0
	__asm volatile
 800c40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40e:	f383 8811 	msr	BASEPRI, r3
 800c412:	f3bf 8f6f 	isb	sy
 800c416:	f3bf 8f4f 	dsb	sy
 800c41a:	607b      	str	r3, [r7, #4]
}
 800c41c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c41e:	4b0f      	ldr	r3, [pc, #60]	; (800c45c <vPortEnterCritical+0x58>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	3301      	adds	r3, #1
 800c424:	4a0d      	ldr	r2, [pc, #52]	; (800c45c <vPortEnterCritical+0x58>)
 800c426:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c428:	4b0c      	ldr	r3, [pc, #48]	; (800c45c <vPortEnterCritical+0x58>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d10f      	bne.n	800c450 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c430:	4b0b      	ldr	r3, [pc, #44]	; (800c460 <vPortEnterCritical+0x5c>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	b2db      	uxtb	r3, r3
 800c436:	2b00      	cmp	r3, #0
 800c438:	d00a      	beq.n	800c450 <vPortEnterCritical+0x4c>
	__asm volatile
 800c43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43e:	f383 8811 	msr	BASEPRI, r3
 800c442:	f3bf 8f6f 	isb	sy
 800c446:	f3bf 8f4f 	dsb	sy
 800c44a:	603b      	str	r3, [r7, #0]
}
 800c44c:	bf00      	nop
 800c44e:	e7fe      	b.n	800c44e <vPortEnterCritical+0x4a>
	}
}
 800c450:	bf00      	nop
 800c452:	370c      	adds	r7, #12
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr
 800c45c:	20000024 	.word	0x20000024
 800c460:	e000ed04 	.word	0xe000ed04

0800c464 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c464:	b480      	push	{r7}
 800c466:	b083      	sub	sp, #12
 800c468:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c46a:	4b12      	ldr	r3, [pc, #72]	; (800c4b4 <vPortExitCritical+0x50>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d10a      	bne.n	800c488 <vPortExitCritical+0x24>
	__asm volatile
 800c472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c476:	f383 8811 	msr	BASEPRI, r3
 800c47a:	f3bf 8f6f 	isb	sy
 800c47e:	f3bf 8f4f 	dsb	sy
 800c482:	607b      	str	r3, [r7, #4]
}
 800c484:	bf00      	nop
 800c486:	e7fe      	b.n	800c486 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c488:	4b0a      	ldr	r3, [pc, #40]	; (800c4b4 <vPortExitCritical+0x50>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	3b01      	subs	r3, #1
 800c48e:	4a09      	ldr	r2, [pc, #36]	; (800c4b4 <vPortExitCritical+0x50>)
 800c490:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c492:	4b08      	ldr	r3, [pc, #32]	; (800c4b4 <vPortExitCritical+0x50>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d105      	bne.n	800c4a6 <vPortExitCritical+0x42>
 800c49a:	2300      	movs	r3, #0
 800c49c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	f383 8811 	msr	BASEPRI, r3
}
 800c4a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c4a6:	bf00      	nop
 800c4a8:	370c      	adds	r7, #12
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr
 800c4b2:	bf00      	nop
 800c4b4:	20000024 	.word	0x20000024
	...

0800c4c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c4c0:	f3ef 8009 	mrs	r0, PSP
 800c4c4:	f3bf 8f6f 	isb	sy
 800c4c8:	4b15      	ldr	r3, [pc, #84]	; (800c520 <pxCurrentTCBConst>)
 800c4ca:	681a      	ldr	r2, [r3, #0]
 800c4cc:	f01e 0f10 	tst.w	lr, #16
 800c4d0:	bf08      	it	eq
 800c4d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c4d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4da:	6010      	str	r0, [r2, #0]
 800c4dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c4e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c4e4:	f380 8811 	msr	BASEPRI, r0
 800c4e8:	f3bf 8f4f 	dsb	sy
 800c4ec:	f3bf 8f6f 	isb	sy
 800c4f0:	f7fe fdf0 	bl	800b0d4 <vTaskSwitchContext>
 800c4f4:	f04f 0000 	mov.w	r0, #0
 800c4f8:	f380 8811 	msr	BASEPRI, r0
 800c4fc:	bc09      	pop	{r0, r3}
 800c4fe:	6819      	ldr	r1, [r3, #0]
 800c500:	6808      	ldr	r0, [r1, #0]
 800c502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c506:	f01e 0f10 	tst.w	lr, #16
 800c50a:	bf08      	it	eq
 800c50c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c510:	f380 8809 	msr	PSP, r0
 800c514:	f3bf 8f6f 	isb	sy
 800c518:	4770      	bx	lr
 800c51a:	bf00      	nop
 800c51c:	f3af 8000 	nop.w

0800c520 <pxCurrentTCBConst>:
 800c520:	20000960 	.word	0x20000960
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c524:	bf00      	nop
 800c526:	bf00      	nop

0800c528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
	__asm volatile
 800c52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c532:	f383 8811 	msr	BASEPRI, r3
 800c536:	f3bf 8f6f 	isb	sy
 800c53a:	f3bf 8f4f 	dsb	sy
 800c53e:	607b      	str	r3, [r7, #4]
}
 800c540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c542:	f7fe fd0d 	bl	800af60 <xTaskIncrementTick>
 800c546:	4603      	mov	r3, r0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d003      	beq.n	800c554 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c54c:	4b06      	ldr	r3, [pc, #24]	; (800c568 <xPortSysTickHandler+0x40>)
 800c54e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c552:	601a      	str	r2, [r3, #0]
 800c554:	2300      	movs	r3, #0
 800c556:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	f383 8811 	msr	BASEPRI, r3
}
 800c55e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c560:	bf00      	nop
 800c562:	3708      	adds	r7, #8
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}
 800c568:	e000ed04 	.word	0xe000ed04

0800c56c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c56c:	b480      	push	{r7}
 800c56e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c570:	4b0b      	ldr	r3, [pc, #44]	; (800c5a0 <vPortSetupTimerInterrupt+0x34>)
 800c572:	2200      	movs	r2, #0
 800c574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c576:	4b0b      	ldr	r3, [pc, #44]	; (800c5a4 <vPortSetupTimerInterrupt+0x38>)
 800c578:	2200      	movs	r2, #0
 800c57a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c57c:	4b0a      	ldr	r3, [pc, #40]	; (800c5a8 <vPortSetupTimerInterrupt+0x3c>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a0a      	ldr	r2, [pc, #40]	; (800c5ac <vPortSetupTimerInterrupt+0x40>)
 800c582:	fba2 2303 	umull	r2, r3, r2, r3
 800c586:	099b      	lsrs	r3, r3, #6
 800c588:	4a09      	ldr	r2, [pc, #36]	; (800c5b0 <vPortSetupTimerInterrupt+0x44>)
 800c58a:	3b01      	subs	r3, #1
 800c58c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c58e:	4b04      	ldr	r3, [pc, #16]	; (800c5a0 <vPortSetupTimerInterrupt+0x34>)
 800c590:	2207      	movs	r2, #7
 800c592:	601a      	str	r2, [r3, #0]
}
 800c594:	bf00      	nop
 800c596:	46bd      	mov	sp, r7
 800c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59c:	4770      	bx	lr
 800c59e:	bf00      	nop
 800c5a0:	e000e010 	.word	0xe000e010
 800c5a4:	e000e018 	.word	0xe000e018
 800c5a8:	20000000 	.word	0x20000000
 800c5ac:	10624dd3 	.word	0x10624dd3
 800c5b0:	e000e014 	.word	0xe000e014

0800c5b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c5b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c5c4 <vPortEnableVFP+0x10>
 800c5b8:	6801      	ldr	r1, [r0, #0]
 800c5ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c5be:	6001      	str	r1, [r0, #0]
 800c5c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c5c2:	bf00      	nop
 800c5c4:	e000ed88 	.word	0xe000ed88

0800c5c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c5ce:	f3ef 8305 	mrs	r3, IPSR
 800c5d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	2b0f      	cmp	r3, #15
 800c5d8:	d914      	bls.n	800c604 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c5da:	4a17      	ldr	r2, [pc, #92]	; (800c638 <vPortValidateInterruptPriority+0x70>)
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	4413      	add	r3, r2
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c5e4:	4b15      	ldr	r3, [pc, #84]	; (800c63c <vPortValidateInterruptPriority+0x74>)
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	7afa      	ldrb	r2, [r7, #11]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d20a      	bcs.n	800c604 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f2:	f383 8811 	msr	BASEPRI, r3
 800c5f6:	f3bf 8f6f 	isb	sy
 800c5fa:	f3bf 8f4f 	dsb	sy
 800c5fe:	607b      	str	r3, [r7, #4]
}
 800c600:	bf00      	nop
 800c602:	e7fe      	b.n	800c602 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c604:	4b0e      	ldr	r3, [pc, #56]	; (800c640 <vPortValidateInterruptPriority+0x78>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c60c:	4b0d      	ldr	r3, [pc, #52]	; (800c644 <vPortValidateInterruptPriority+0x7c>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	429a      	cmp	r2, r3
 800c612:	d90a      	bls.n	800c62a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c618:	f383 8811 	msr	BASEPRI, r3
 800c61c:	f3bf 8f6f 	isb	sy
 800c620:	f3bf 8f4f 	dsb	sy
 800c624:	603b      	str	r3, [r7, #0]
}
 800c626:	bf00      	nop
 800c628:	e7fe      	b.n	800c628 <vPortValidateInterruptPriority+0x60>
	}
 800c62a:	bf00      	nop
 800c62c:	3714      	adds	r7, #20
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr
 800c636:	bf00      	nop
 800c638:	e000e3f0 	.word	0xe000e3f0
 800c63c:	20000f8c 	.word	0x20000f8c
 800c640:	e000ed0c 	.word	0xe000ed0c
 800c644:	20000f90 	.word	0x20000f90

0800c648 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b08a      	sub	sp, #40	; 0x28
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c650:	2300      	movs	r3, #0
 800c652:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c654:	f7fe fbc8 	bl	800ade8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c658:	4b5b      	ldr	r3, [pc, #364]	; (800c7c8 <pvPortMalloc+0x180>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d101      	bne.n	800c664 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c660:	f000 f920 	bl	800c8a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c664:	4b59      	ldr	r3, [pc, #356]	; (800c7cc <pvPortMalloc+0x184>)
 800c666:	681a      	ldr	r2, [r3, #0]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	4013      	ands	r3, r2
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	f040 8093 	bne.w	800c798 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d01d      	beq.n	800c6b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c678:	2208      	movs	r2, #8
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4413      	add	r3, r2
 800c67e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f003 0307 	and.w	r3, r3, #7
 800c686:	2b00      	cmp	r3, #0
 800c688:	d014      	beq.n	800c6b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f023 0307 	bic.w	r3, r3, #7
 800c690:	3308      	adds	r3, #8
 800c692:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f003 0307 	and.w	r3, r3, #7
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d00a      	beq.n	800c6b4 <pvPortMalloc+0x6c>
	__asm volatile
 800c69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a2:	f383 8811 	msr	BASEPRI, r3
 800c6a6:	f3bf 8f6f 	isb	sy
 800c6aa:	f3bf 8f4f 	dsb	sy
 800c6ae:	617b      	str	r3, [r7, #20]
}
 800c6b0:	bf00      	nop
 800c6b2:	e7fe      	b.n	800c6b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d06e      	beq.n	800c798 <pvPortMalloc+0x150>
 800c6ba:	4b45      	ldr	r3, [pc, #276]	; (800c7d0 <pvPortMalloc+0x188>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	687a      	ldr	r2, [r7, #4]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d869      	bhi.n	800c798 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c6c4:	4b43      	ldr	r3, [pc, #268]	; (800c7d4 <pvPortMalloc+0x18c>)
 800c6c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c6c8:	4b42      	ldr	r3, [pc, #264]	; (800c7d4 <pvPortMalloc+0x18c>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6ce:	e004      	b.n	800c6da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d903      	bls.n	800c6ec <pvPortMalloc+0xa4>
 800c6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d1f1      	bne.n	800c6d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c6ec:	4b36      	ldr	r3, [pc, #216]	; (800c7c8 <pvPortMalloc+0x180>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d050      	beq.n	800c798 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c6f6:	6a3b      	ldr	r3, [r7, #32]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	2208      	movs	r2, #8
 800c6fc:	4413      	add	r3, r2
 800c6fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c702:	681a      	ldr	r2, [r3, #0]
 800c704:	6a3b      	ldr	r3, [r7, #32]
 800c706:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c70a:	685a      	ldr	r2, [r3, #4]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	1ad2      	subs	r2, r2, r3
 800c710:	2308      	movs	r3, #8
 800c712:	005b      	lsls	r3, r3, #1
 800c714:	429a      	cmp	r2, r3
 800c716:	d91f      	bls.n	800c758 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	4413      	add	r3, r2
 800c71e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c720:	69bb      	ldr	r3, [r7, #24]
 800c722:	f003 0307 	and.w	r3, r3, #7
 800c726:	2b00      	cmp	r3, #0
 800c728:	d00a      	beq.n	800c740 <pvPortMalloc+0xf8>
	__asm volatile
 800c72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c72e:	f383 8811 	msr	BASEPRI, r3
 800c732:	f3bf 8f6f 	isb	sy
 800c736:	f3bf 8f4f 	dsb	sy
 800c73a:	613b      	str	r3, [r7, #16]
}
 800c73c:	bf00      	nop
 800c73e:	e7fe      	b.n	800c73e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c742:	685a      	ldr	r2, [r3, #4]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	1ad2      	subs	r2, r2, r3
 800c748:	69bb      	ldr	r3, [r7, #24]
 800c74a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c74e:	687a      	ldr	r2, [r7, #4]
 800c750:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c752:	69b8      	ldr	r0, [r7, #24]
 800c754:	f000 f908 	bl	800c968 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c758:	4b1d      	ldr	r3, [pc, #116]	; (800c7d0 <pvPortMalloc+0x188>)
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	1ad3      	subs	r3, r2, r3
 800c762:	4a1b      	ldr	r2, [pc, #108]	; (800c7d0 <pvPortMalloc+0x188>)
 800c764:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c766:	4b1a      	ldr	r3, [pc, #104]	; (800c7d0 <pvPortMalloc+0x188>)
 800c768:	681a      	ldr	r2, [r3, #0]
 800c76a:	4b1b      	ldr	r3, [pc, #108]	; (800c7d8 <pvPortMalloc+0x190>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	429a      	cmp	r2, r3
 800c770:	d203      	bcs.n	800c77a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c772:	4b17      	ldr	r3, [pc, #92]	; (800c7d0 <pvPortMalloc+0x188>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	4a18      	ldr	r2, [pc, #96]	; (800c7d8 <pvPortMalloc+0x190>)
 800c778:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77c:	685a      	ldr	r2, [r3, #4]
 800c77e:	4b13      	ldr	r3, [pc, #76]	; (800c7cc <pvPortMalloc+0x184>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	431a      	orrs	r2, r3
 800c784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c786:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78a:	2200      	movs	r2, #0
 800c78c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c78e:	4b13      	ldr	r3, [pc, #76]	; (800c7dc <pvPortMalloc+0x194>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	3301      	adds	r3, #1
 800c794:	4a11      	ldr	r2, [pc, #68]	; (800c7dc <pvPortMalloc+0x194>)
 800c796:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c798:	f7fe fb34 	bl	800ae04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	f003 0307 	and.w	r3, r3, #7
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d00a      	beq.n	800c7bc <pvPortMalloc+0x174>
	__asm volatile
 800c7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7aa:	f383 8811 	msr	BASEPRI, r3
 800c7ae:	f3bf 8f6f 	isb	sy
 800c7b2:	f3bf 8f4f 	dsb	sy
 800c7b6:	60fb      	str	r3, [r7, #12]
}
 800c7b8:	bf00      	nop
 800c7ba:	e7fe      	b.n	800c7ba <pvPortMalloc+0x172>
	return pvReturn;
 800c7bc:	69fb      	ldr	r3, [r7, #28]
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3728      	adds	r7, #40	; 0x28
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	20004b9c 	.word	0x20004b9c
 800c7cc:	20004bb0 	.word	0x20004bb0
 800c7d0:	20004ba0 	.word	0x20004ba0
 800c7d4:	20004b94 	.word	0x20004b94
 800c7d8:	20004ba4 	.word	0x20004ba4
 800c7dc:	20004ba8 	.word	0x20004ba8

0800c7e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b086      	sub	sp, #24
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d04d      	beq.n	800c88e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c7f2:	2308      	movs	r3, #8
 800c7f4:	425b      	negs	r3, r3
 800c7f6:	697a      	ldr	r2, [r7, #20]
 800c7f8:	4413      	add	r3, r2
 800c7fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	685a      	ldr	r2, [r3, #4]
 800c804:	4b24      	ldr	r3, [pc, #144]	; (800c898 <vPortFree+0xb8>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4013      	ands	r3, r2
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d10a      	bne.n	800c824 <vPortFree+0x44>
	__asm volatile
 800c80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c812:	f383 8811 	msr	BASEPRI, r3
 800c816:	f3bf 8f6f 	isb	sy
 800c81a:	f3bf 8f4f 	dsb	sy
 800c81e:	60fb      	str	r3, [r7, #12]
}
 800c820:	bf00      	nop
 800c822:	e7fe      	b.n	800c822 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d00a      	beq.n	800c842 <vPortFree+0x62>
	__asm volatile
 800c82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c830:	f383 8811 	msr	BASEPRI, r3
 800c834:	f3bf 8f6f 	isb	sy
 800c838:	f3bf 8f4f 	dsb	sy
 800c83c:	60bb      	str	r3, [r7, #8]
}
 800c83e:	bf00      	nop
 800c840:	e7fe      	b.n	800c840 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	685a      	ldr	r2, [r3, #4]
 800c846:	4b14      	ldr	r3, [pc, #80]	; (800c898 <vPortFree+0xb8>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4013      	ands	r3, r2
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d01e      	beq.n	800c88e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d11a      	bne.n	800c88e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	685a      	ldr	r2, [r3, #4]
 800c85c:	4b0e      	ldr	r3, [pc, #56]	; (800c898 <vPortFree+0xb8>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	43db      	mvns	r3, r3
 800c862:	401a      	ands	r2, r3
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c868:	f7fe fabe 	bl	800ade8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	685a      	ldr	r2, [r3, #4]
 800c870:	4b0a      	ldr	r3, [pc, #40]	; (800c89c <vPortFree+0xbc>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	4413      	add	r3, r2
 800c876:	4a09      	ldr	r2, [pc, #36]	; (800c89c <vPortFree+0xbc>)
 800c878:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c87a:	6938      	ldr	r0, [r7, #16]
 800c87c:	f000 f874 	bl	800c968 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c880:	4b07      	ldr	r3, [pc, #28]	; (800c8a0 <vPortFree+0xc0>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	3301      	adds	r3, #1
 800c886:	4a06      	ldr	r2, [pc, #24]	; (800c8a0 <vPortFree+0xc0>)
 800c888:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c88a:	f7fe fabb 	bl	800ae04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c88e:	bf00      	nop
 800c890:	3718      	adds	r7, #24
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	20004bb0 	.word	0x20004bb0
 800c89c:	20004ba0 	.word	0x20004ba0
 800c8a0:	20004bac 	.word	0x20004bac

0800c8a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b085      	sub	sp, #20
 800c8a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c8aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c8ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c8b0:	4b27      	ldr	r3, [pc, #156]	; (800c950 <prvHeapInit+0xac>)
 800c8b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f003 0307 	and.w	r3, r3, #7
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d00c      	beq.n	800c8d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	3307      	adds	r3, #7
 800c8c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f023 0307 	bic.w	r3, r3, #7
 800c8ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c8cc:	68ba      	ldr	r2, [r7, #8]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	1ad3      	subs	r3, r2, r3
 800c8d2:	4a1f      	ldr	r2, [pc, #124]	; (800c950 <prvHeapInit+0xac>)
 800c8d4:	4413      	add	r3, r2
 800c8d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c8dc:	4a1d      	ldr	r2, [pc, #116]	; (800c954 <prvHeapInit+0xb0>)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c8e2:	4b1c      	ldr	r3, [pc, #112]	; (800c954 <prvHeapInit+0xb0>)
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	68ba      	ldr	r2, [r7, #8]
 800c8ec:	4413      	add	r3, r2
 800c8ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c8f0:	2208      	movs	r2, #8
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	1a9b      	subs	r3, r3, r2
 800c8f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f023 0307 	bic.w	r3, r3, #7
 800c8fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	4a15      	ldr	r2, [pc, #84]	; (800c958 <prvHeapInit+0xb4>)
 800c904:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c906:	4b14      	ldr	r3, [pc, #80]	; (800c958 <prvHeapInit+0xb4>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	2200      	movs	r2, #0
 800c90c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c90e:	4b12      	ldr	r3, [pc, #72]	; (800c958 <prvHeapInit+0xb4>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	2200      	movs	r2, #0
 800c914:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	68fa      	ldr	r2, [r7, #12]
 800c91e:	1ad2      	subs	r2, r2, r3
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c924:	4b0c      	ldr	r3, [pc, #48]	; (800c958 <prvHeapInit+0xb4>)
 800c926:	681a      	ldr	r2, [r3, #0]
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	4a0a      	ldr	r2, [pc, #40]	; (800c95c <prvHeapInit+0xb8>)
 800c932:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	4a09      	ldr	r2, [pc, #36]	; (800c960 <prvHeapInit+0xbc>)
 800c93a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c93c:	4b09      	ldr	r3, [pc, #36]	; (800c964 <prvHeapInit+0xc0>)
 800c93e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c942:	601a      	str	r2, [r3, #0]
}
 800c944:	bf00      	nop
 800c946:	3714      	adds	r7, #20
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr
 800c950:	20000f94 	.word	0x20000f94
 800c954:	20004b94 	.word	0x20004b94
 800c958:	20004b9c 	.word	0x20004b9c
 800c95c:	20004ba4 	.word	0x20004ba4
 800c960:	20004ba0 	.word	0x20004ba0
 800c964:	20004bb0 	.word	0x20004bb0

0800c968 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c968:	b480      	push	{r7}
 800c96a:	b085      	sub	sp, #20
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c970:	4b28      	ldr	r3, [pc, #160]	; (800ca14 <prvInsertBlockIntoFreeList+0xac>)
 800c972:	60fb      	str	r3, [r7, #12]
 800c974:	e002      	b.n	800c97c <prvInsertBlockIntoFreeList+0x14>
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	60fb      	str	r3, [r7, #12]
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	429a      	cmp	r2, r3
 800c984:	d8f7      	bhi.n	800c976 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	68ba      	ldr	r2, [r7, #8]
 800c990:	4413      	add	r3, r2
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	429a      	cmp	r2, r3
 800c996:	d108      	bne.n	800c9aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	685a      	ldr	r2, [r3, #4]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	441a      	add	r2, r3
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	68ba      	ldr	r2, [r7, #8]
 800c9b4:	441a      	add	r2, r3
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d118      	bne.n	800c9f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	4b15      	ldr	r3, [pc, #84]	; (800ca18 <prvInsertBlockIntoFreeList+0xb0>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d00d      	beq.n	800c9e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	685a      	ldr	r2, [r3, #4]
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	441a      	add	r2, r3
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	681a      	ldr	r2, [r3, #0]
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	601a      	str	r2, [r3, #0]
 800c9e4:	e008      	b.n	800c9f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c9e6:	4b0c      	ldr	r3, [pc, #48]	; (800ca18 <prvInsertBlockIntoFreeList+0xb0>)
 800c9e8:	681a      	ldr	r2, [r3, #0]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	601a      	str	r2, [r3, #0]
 800c9ee:	e003      	b.n	800c9f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681a      	ldr	r2, [r3, #0]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c9f8:	68fa      	ldr	r2, [r7, #12]
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d002      	beq.n	800ca06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	687a      	ldr	r2, [r7, #4]
 800ca04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca06:	bf00      	nop
 800ca08:	3714      	adds	r7, #20
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca10:	4770      	bx	lr
 800ca12:	bf00      	nop
 800ca14:	20004b94 	.word	0x20004b94
 800ca18:	20004b9c 	.word	0x20004b9c

0800ca1c <__errno>:
 800ca1c:	4b01      	ldr	r3, [pc, #4]	; (800ca24 <__errno+0x8>)
 800ca1e:	6818      	ldr	r0, [r3, #0]
 800ca20:	4770      	bx	lr
 800ca22:	bf00      	nop
 800ca24:	20000028 	.word	0x20000028

0800ca28 <__libc_init_array>:
 800ca28:	b570      	push	{r4, r5, r6, lr}
 800ca2a:	4d0d      	ldr	r5, [pc, #52]	; (800ca60 <__libc_init_array+0x38>)
 800ca2c:	4c0d      	ldr	r4, [pc, #52]	; (800ca64 <__libc_init_array+0x3c>)
 800ca2e:	1b64      	subs	r4, r4, r5
 800ca30:	10a4      	asrs	r4, r4, #2
 800ca32:	2600      	movs	r6, #0
 800ca34:	42a6      	cmp	r6, r4
 800ca36:	d109      	bne.n	800ca4c <__libc_init_array+0x24>
 800ca38:	4d0b      	ldr	r5, [pc, #44]	; (800ca68 <__libc_init_array+0x40>)
 800ca3a:	4c0c      	ldr	r4, [pc, #48]	; (800ca6c <__libc_init_array+0x44>)
 800ca3c:	f000 fcb8 	bl	800d3b0 <_init>
 800ca40:	1b64      	subs	r4, r4, r5
 800ca42:	10a4      	asrs	r4, r4, #2
 800ca44:	2600      	movs	r6, #0
 800ca46:	42a6      	cmp	r6, r4
 800ca48:	d105      	bne.n	800ca56 <__libc_init_array+0x2e>
 800ca4a:	bd70      	pop	{r4, r5, r6, pc}
 800ca4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca50:	4798      	blx	r3
 800ca52:	3601      	adds	r6, #1
 800ca54:	e7ee      	b.n	800ca34 <__libc_init_array+0xc>
 800ca56:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca5a:	4798      	blx	r3
 800ca5c:	3601      	adds	r6, #1
 800ca5e:	e7f2      	b.n	800ca46 <__libc_init_array+0x1e>
 800ca60:	0800db10 	.word	0x0800db10
 800ca64:	0800db10 	.word	0x0800db10
 800ca68:	0800db10 	.word	0x0800db10
 800ca6c:	0800db14 	.word	0x0800db14

0800ca70 <__retarget_lock_acquire_recursive>:
 800ca70:	4770      	bx	lr

0800ca72 <__retarget_lock_release_recursive>:
 800ca72:	4770      	bx	lr

0800ca74 <memcpy>:
 800ca74:	440a      	add	r2, r1
 800ca76:	4291      	cmp	r1, r2
 800ca78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ca7c:	d100      	bne.n	800ca80 <memcpy+0xc>
 800ca7e:	4770      	bx	lr
 800ca80:	b510      	push	{r4, lr}
 800ca82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca8a:	4291      	cmp	r1, r2
 800ca8c:	d1f9      	bne.n	800ca82 <memcpy+0xe>
 800ca8e:	bd10      	pop	{r4, pc}

0800ca90 <memset>:
 800ca90:	4402      	add	r2, r0
 800ca92:	4603      	mov	r3, r0
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d100      	bne.n	800ca9a <memset+0xa>
 800ca98:	4770      	bx	lr
 800ca9a:	f803 1b01 	strb.w	r1, [r3], #1
 800ca9e:	e7f9      	b.n	800ca94 <memset+0x4>

0800caa0 <_malloc_r>:
 800caa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caa2:	1ccd      	adds	r5, r1, #3
 800caa4:	f025 0503 	bic.w	r5, r5, #3
 800caa8:	3508      	adds	r5, #8
 800caaa:	2d0c      	cmp	r5, #12
 800caac:	bf38      	it	cc
 800caae:	250c      	movcc	r5, #12
 800cab0:	2d00      	cmp	r5, #0
 800cab2:	4606      	mov	r6, r0
 800cab4:	db01      	blt.n	800caba <_malloc_r+0x1a>
 800cab6:	42a9      	cmp	r1, r5
 800cab8:	d903      	bls.n	800cac2 <_malloc_r+0x22>
 800caba:	230c      	movs	r3, #12
 800cabc:	6033      	str	r3, [r6, #0]
 800cabe:	2000      	movs	r0, #0
 800cac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cac2:	f000 f8e1 	bl	800cc88 <__malloc_lock>
 800cac6:	4921      	ldr	r1, [pc, #132]	; (800cb4c <_malloc_r+0xac>)
 800cac8:	680a      	ldr	r2, [r1, #0]
 800caca:	4614      	mov	r4, r2
 800cacc:	b99c      	cbnz	r4, 800caf6 <_malloc_r+0x56>
 800cace:	4f20      	ldr	r7, [pc, #128]	; (800cb50 <_malloc_r+0xb0>)
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	b923      	cbnz	r3, 800cade <_malloc_r+0x3e>
 800cad4:	4621      	mov	r1, r4
 800cad6:	4630      	mov	r0, r6
 800cad8:	f000 f8a6 	bl	800cc28 <_sbrk_r>
 800cadc:	6038      	str	r0, [r7, #0]
 800cade:	4629      	mov	r1, r5
 800cae0:	4630      	mov	r0, r6
 800cae2:	f000 f8a1 	bl	800cc28 <_sbrk_r>
 800cae6:	1c43      	adds	r3, r0, #1
 800cae8:	d123      	bne.n	800cb32 <_malloc_r+0x92>
 800caea:	230c      	movs	r3, #12
 800caec:	6033      	str	r3, [r6, #0]
 800caee:	4630      	mov	r0, r6
 800caf0:	f000 f8d0 	bl	800cc94 <__malloc_unlock>
 800caf4:	e7e3      	b.n	800cabe <_malloc_r+0x1e>
 800caf6:	6823      	ldr	r3, [r4, #0]
 800caf8:	1b5b      	subs	r3, r3, r5
 800cafa:	d417      	bmi.n	800cb2c <_malloc_r+0x8c>
 800cafc:	2b0b      	cmp	r3, #11
 800cafe:	d903      	bls.n	800cb08 <_malloc_r+0x68>
 800cb00:	6023      	str	r3, [r4, #0]
 800cb02:	441c      	add	r4, r3
 800cb04:	6025      	str	r5, [r4, #0]
 800cb06:	e004      	b.n	800cb12 <_malloc_r+0x72>
 800cb08:	6863      	ldr	r3, [r4, #4]
 800cb0a:	42a2      	cmp	r2, r4
 800cb0c:	bf0c      	ite	eq
 800cb0e:	600b      	streq	r3, [r1, #0]
 800cb10:	6053      	strne	r3, [r2, #4]
 800cb12:	4630      	mov	r0, r6
 800cb14:	f000 f8be 	bl	800cc94 <__malloc_unlock>
 800cb18:	f104 000b 	add.w	r0, r4, #11
 800cb1c:	1d23      	adds	r3, r4, #4
 800cb1e:	f020 0007 	bic.w	r0, r0, #7
 800cb22:	1ac2      	subs	r2, r0, r3
 800cb24:	d0cc      	beq.n	800cac0 <_malloc_r+0x20>
 800cb26:	1a1b      	subs	r3, r3, r0
 800cb28:	50a3      	str	r3, [r4, r2]
 800cb2a:	e7c9      	b.n	800cac0 <_malloc_r+0x20>
 800cb2c:	4622      	mov	r2, r4
 800cb2e:	6864      	ldr	r4, [r4, #4]
 800cb30:	e7cc      	b.n	800cacc <_malloc_r+0x2c>
 800cb32:	1cc4      	adds	r4, r0, #3
 800cb34:	f024 0403 	bic.w	r4, r4, #3
 800cb38:	42a0      	cmp	r0, r4
 800cb3a:	d0e3      	beq.n	800cb04 <_malloc_r+0x64>
 800cb3c:	1a21      	subs	r1, r4, r0
 800cb3e:	4630      	mov	r0, r6
 800cb40:	f000 f872 	bl	800cc28 <_sbrk_r>
 800cb44:	3001      	adds	r0, #1
 800cb46:	d1dd      	bne.n	800cb04 <_malloc_r+0x64>
 800cb48:	e7cf      	b.n	800caea <_malloc_r+0x4a>
 800cb4a:	bf00      	nop
 800cb4c:	20004bb4 	.word	0x20004bb4
 800cb50:	20004bb8 	.word	0x20004bb8

0800cb54 <cleanup_glue>:
 800cb54:	b538      	push	{r3, r4, r5, lr}
 800cb56:	460c      	mov	r4, r1
 800cb58:	6809      	ldr	r1, [r1, #0]
 800cb5a:	4605      	mov	r5, r0
 800cb5c:	b109      	cbz	r1, 800cb62 <cleanup_glue+0xe>
 800cb5e:	f7ff fff9 	bl	800cb54 <cleanup_glue>
 800cb62:	4621      	mov	r1, r4
 800cb64:	4628      	mov	r0, r5
 800cb66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb6a:	f000 b899 	b.w	800cca0 <_free_r>
	...

0800cb70 <_reclaim_reent>:
 800cb70:	4b2c      	ldr	r3, [pc, #176]	; (800cc24 <_reclaim_reent+0xb4>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4283      	cmp	r3, r0
 800cb76:	b570      	push	{r4, r5, r6, lr}
 800cb78:	4604      	mov	r4, r0
 800cb7a:	d051      	beq.n	800cc20 <_reclaim_reent+0xb0>
 800cb7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cb7e:	b143      	cbz	r3, 800cb92 <_reclaim_reent+0x22>
 800cb80:	68db      	ldr	r3, [r3, #12]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d14a      	bne.n	800cc1c <_reclaim_reent+0xac>
 800cb86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb88:	6819      	ldr	r1, [r3, #0]
 800cb8a:	b111      	cbz	r1, 800cb92 <_reclaim_reent+0x22>
 800cb8c:	4620      	mov	r0, r4
 800cb8e:	f000 f887 	bl	800cca0 <_free_r>
 800cb92:	6961      	ldr	r1, [r4, #20]
 800cb94:	b111      	cbz	r1, 800cb9c <_reclaim_reent+0x2c>
 800cb96:	4620      	mov	r0, r4
 800cb98:	f000 f882 	bl	800cca0 <_free_r>
 800cb9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cb9e:	b111      	cbz	r1, 800cba6 <_reclaim_reent+0x36>
 800cba0:	4620      	mov	r0, r4
 800cba2:	f000 f87d 	bl	800cca0 <_free_r>
 800cba6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cba8:	b111      	cbz	r1, 800cbb0 <_reclaim_reent+0x40>
 800cbaa:	4620      	mov	r0, r4
 800cbac:	f000 f878 	bl	800cca0 <_free_r>
 800cbb0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cbb2:	b111      	cbz	r1, 800cbba <_reclaim_reent+0x4a>
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	f000 f873 	bl	800cca0 <_free_r>
 800cbba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cbbc:	b111      	cbz	r1, 800cbc4 <_reclaim_reent+0x54>
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	f000 f86e 	bl	800cca0 <_free_r>
 800cbc4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cbc6:	b111      	cbz	r1, 800cbce <_reclaim_reent+0x5e>
 800cbc8:	4620      	mov	r0, r4
 800cbca:	f000 f869 	bl	800cca0 <_free_r>
 800cbce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cbd0:	b111      	cbz	r1, 800cbd8 <_reclaim_reent+0x68>
 800cbd2:	4620      	mov	r0, r4
 800cbd4:	f000 f864 	bl	800cca0 <_free_r>
 800cbd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbda:	b111      	cbz	r1, 800cbe2 <_reclaim_reent+0x72>
 800cbdc:	4620      	mov	r0, r4
 800cbde:	f000 f85f 	bl	800cca0 <_free_r>
 800cbe2:	69a3      	ldr	r3, [r4, #24]
 800cbe4:	b1e3      	cbz	r3, 800cc20 <_reclaim_reent+0xb0>
 800cbe6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cbe8:	4620      	mov	r0, r4
 800cbea:	4798      	blx	r3
 800cbec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cbee:	b1b9      	cbz	r1, 800cc20 <_reclaim_reent+0xb0>
 800cbf0:	4620      	mov	r0, r4
 800cbf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cbf6:	f7ff bfad 	b.w	800cb54 <cleanup_glue>
 800cbfa:	5949      	ldr	r1, [r1, r5]
 800cbfc:	b941      	cbnz	r1, 800cc10 <_reclaim_reent+0xa0>
 800cbfe:	3504      	adds	r5, #4
 800cc00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc02:	2d80      	cmp	r5, #128	; 0x80
 800cc04:	68d9      	ldr	r1, [r3, #12]
 800cc06:	d1f8      	bne.n	800cbfa <_reclaim_reent+0x8a>
 800cc08:	4620      	mov	r0, r4
 800cc0a:	f000 f849 	bl	800cca0 <_free_r>
 800cc0e:	e7ba      	b.n	800cb86 <_reclaim_reent+0x16>
 800cc10:	680e      	ldr	r6, [r1, #0]
 800cc12:	4620      	mov	r0, r4
 800cc14:	f000 f844 	bl	800cca0 <_free_r>
 800cc18:	4631      	mov	r1, r6
 800cc1a:	e7ef      	b.n	800cbfc <_reclaim_reent+0x8c>
 800cc1c:	2500      	movs	r5, #0
 800cc1e:	e7ef      	b.n	800cc00 <_reclaim_reent+0x90>
 800cc20:	bd70      	pop	{r4, r5, r6, pc}
 800cc22:	bf00      	nop
 800cc24:	20000028 	.word	0x20000028

0800cc28 <_sbrk_r>:
 800cc28:	b538      	push	{r3, r4, r5, lr}
 800cc2a:	4d06      	ldr	r5, [pc, #24]	; (800cc44 <_sbrk_r+0x1c>)
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	4604      	mov	r4, r0
 800cc30:	4608      	mov	r0, r1
 800cc32:	602b      	str	r3, [r5, #0]
 800cc34:	f7f4 fc88 	bl	8001548 <_sbrk>
 800cc38:	1c43      	adds	r3, r0, #1
 800cc3a:	d102      	bne.n	800cc42 <_sbrk_r+0x1a>
 800cc3c:	682b      	ldr	r3, [r5, #0]
 800cc3e:	b103      	cbz	r3, 800cc42 <_sbrk_r+0x1a>
 800cc40:	6023      	str	r3, [r4, #0]
 800cc42:	bd38      	pop	{r3, r4, r5, pc}
 800cc44:	20005654 	.word	0x20005654

0800cc48 <siprintf>:
 800cc48:	b40e      	push	{r1, r2, r3}
 800cc4a:	b500      	push	{lr}
 800cc4c:	b09c      	sub	sp, #112	; 0x70
 800cc4e:	ab1d      	add	r3, sp, #116	; 0x74
 800cc50:	9002      	str	r0, [sp, #8]
 800cc52:	9006      	str	r0, [sp, #24]
 800cc54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cc58:	4809      	ldr	r0, [pc, #36]	; (800cc80 <siprintf+0x38>)
 800cc5a:	9107      	str	r1, [sp, #28]
 800cc5c:	9104      	str	r1, [sp, #16]
 800cc5e:	4909      	ldr	r1, [pc, #36]	; (800cc84 <siprintf+0x3c>)
 800cc60:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc64:	9105      	str	r1, [sp, #20]
 800cc66:	6800      	ldr	r0, [r0, #0]
 800cc68:	9301      	str	r3, [sp, #4]
 800cc6a:	a902      	add	r1, sp, #8
 800cc6c:	f000 f8c4 	bl	800cdf8 <_svfiprintf_r>
 800cc70:	9b02      	ldr	r3, [sp, #8]
 800cc72:	2200      	movs	r2, #0
 800cc74:	701a      	strb	r2, [r3, #0]
 800cc76:	b01c      	add	sp, #112	; 0x70
 800cc78:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc7c:	b003      	add	sp, #12
 800cc7e:	4770      	bx	lr
 800cc80:	20000028 	.word	0x20000028
 800cc84:	ffff0208 	.word	0xffff0208

0800cc88 <__malloc_lock>:
 800cc88:	4801      	ldr	r0, [pc, #4]	; (800cc90 <__malloc_lock+0x8>)
 800cc8a:	f7ff bef1 	b.w	800ca70 <__retarget_lock_acquire_recursive>
 800cc8e:	bf00      	nop
 800cc90:	2000564c 	.word	0x2000564c

0800cc94 <__malloc_unlock>:
 800cc94:	4801      	ldr	r0, [pc, #4]	; (800cc9c <__malloc_unlock+0x8>)
 800cc96:	f7ff beec 	b.w	800ca72 <__retarget_lock_release_recursive>
 800cc9a:	bf00      	nop
 800cc9c:	2000564c 	.word	0x2000564c

0800cca0 <_free_r>:
 800cca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cca2:	2900      	cmp	r1, #0
 800cca4:	d048      	beq.n	800cd38 <_free_r+0x98>
 800cca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccaa:	9001      	str	r0, [sp, #4]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	f1a1 0404 	sub.w	r4, r1, #4
 800ccb2:	bfb8      	it	lt
 800ccb4:	18e4      	addlt	r4, r4, r3
 800ccb6:	f7ff ffe7 	bl	800cc88 <__malloc_lock>
 800ccba:	4a20      	ldr	r2, [pc, #128]	; (800cd3c <_free_r+0x9c>)
 800ccbc:	9801      	ldr	r0, [sp, #4]
 800ccbe:	6813      	ldr	r3, [r2, #0]
 800ccc0:	4615      	mov	r5, r2
 800ccc2:	b933      	cbnz	r3, 800ccd2 <_free_r+0x32>
 800ccc4:	6063      	str	r3, [r4, #4]
 800ccc6:	6014      	str	r4, [r2, #0]
 800ccc8:	b003      	add	sp, #12
 800ccca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ccce:	f7ff bfe1 	b.w	800cc94 <__malloc_unlock>
 800ccd2:	42a3      	cmp	r3, r4
 800ccd4:	d90b      	bls.n	800ccee <_free_r+0x4e>
 800ccd6:	6821      	ldr	r1, [r4, #0]
 800ccd8:	1862      	adds	r2, r4, r1
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	bf04      	itt	eq
 800ccde:	681a      	ldreq	r2, [r3, #0]
 800cce0:	685b      	ldreq	r3, [r3, #4]
 800cce2:	6063      	str	r3, [r4, #4]
 800cce4:	bf04      	itt	eq
 800cce6:	1852      	addeq	r2, r2, r1
 800cce8:	6022      	streq	r2, [r4, #0]
 800ccea:	602c      	str	r4, [r5, #0]
 800ccec:	e7ec      	b.n	800ccc8 <_free_r+0x28>
 800ccee:	461a      	mov	r2, r3
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	b10b      	cbz	r3, 800ccf8 <_free_r+0x58>
 800ccf4:	42a3      	cmp	r3, r4
 800ccf6:	d9fa      	bls.n	800ccee <_free_r+0x4e>
 800ccf8:	6811      	ldr	r1, [r2, #0]
 800ccfa:	1855      	adds	r5, r2, r1
 800ccfc:	42a5      	cmp	r5, r4
 800ccfe:	d10b      	bne.n	800cd18 <_free_r+0x78>
 800cd00:	6824      	ldr	r4, [r4, #0]
 800cd02:	4421      	add	r1, r4
 800cd04:	1854      	adds	r4, r2, r1
 800cd06:	42a3      	cmp	r3, r4
 800cd08:	6011      	str	r1, [r2, #0]
 800cd0a:	d1dd      	bne.n	800ccc8 <_free_r+0x28>
 800cd0c:	681c      	ldr	r4, [r3, #0]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	6053      	str	r3, [r2, #4]
 800cd12:	4421      	add	r1, r4
 800cd14:	6011      	str	r1, [r2, #0]
 800cd16:	e7d7      	b.n	800ccc8 <_free_r+0x28>
 800cd18:	d902      	bls.n	800cd20 <_free_r+0x80>
 800cd1a:	230c      	movs	r3, #12
 800cd1c:	6003      	str	r3, [r0, #0]
 800cd1e:	e7d3      	b.n	800ccc8 <_free_r+0x28>
 800cd20:	6825      	ldr	r5, [r4, #0]
 800cd22:	1961      	adds	r1, r4, r5
 800cd24:	428b      	cmp	r3, r1
 800cd26:	bf04      	itt	eq
 800cd28:	6819      	ldreq	r1, [r3, #0]
 800cd2a:	685b      	ldreq	r3, [r3, #4]
 800cd2c:	6063      	str	r3, [r4, #4]
 800cd2e:	bf04      	itt	eq
 800cd30:	1949      	addeq	r1, r1, r5
 800cd32:	6021      	streq	r1, [r4, #0]
 800cd34:	6054      	str	r4, [r2, #4]
 800cd36:	e7c7      	b.n	800ccc8 <_free_r+0x28>
 800cd38:	b003      	add	sp, #12
 800cd3a:	bd30      	pop	{r4, r5, pc}
 800cd3c:	20004bb4 	.word	0x20004bb4

0800cd40 <__ssputs_r>:
 800cd40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd44:	688e      	ldr	r6, [r1, #8]
 800cd46:	429e      	cmp	r6, r3
 800cd48:	4682      	mov	sl, r0
 800cd4a:	460c      	mov	r4, r1
 800cd4c:	4690      	mov	r8, r2
 800cd4e:	461f      	mov	r7, r3
 800cd50:	d838      	bhi.n	800cdc4 <__ssputs_r+0x84>
 800cd52:	898a      	ldrh	r2, [r1, #12]
 800cd54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd58:	d032      	beq.n	800cdc0 <__ssputs_r+0x80>
 800cd5a:	6825      	ldr	r5, [r4, #0]
 800cd5c:	6909      	ldr	r1, [r1, #16]
 800cd5e:	eba5 0901 	sub.w	r9, r5, r1
 800cd62:	6965      	ldr	r5, [r4, #20]
 800cd64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	444b      	add	r3, r9
 800cd70:	106d      	asrs	r5, r5, #1
 800cd72:	429d      	cmp	r5, r3
 800cd74:	bf38      	it	cc
 800cd76:	461d      	movcc	r5, r3
 800cd78:	0553      	lsls	r3, r2, #21
 800cd7a:	d531      	bpl.n	800cde0 <__ssputs_r+0xa0>
 800cd7c:	4629      	mov	r1, r5
 800cd7e:	f7ff fe8f 	bl	800caa0 <_malloc_r>
 800cd82:	4606      	mov	r6, r0
 800cd84:	b950      	cbnz	r0, 800cd9c <__ssputs_r+0x5c>
 800cd86:	230c      	movs	r3, #12
 800cd88:	f8ca 3000 	str.w	r3, [sl]
 800cd8c:	89a3      	ldrh	r3, [r4, #12]
 800cd8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd92:	81a3      	strh	r3, [r4, #12]
 800cd94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd9c:	6921      	ldr	r1, [r4, #16]
 800cd9e:	464a      	mov	r2, r9
 800cda0:	f7ff fe68 	bl	800ca74 <memcpy>
 800cda4:	89a3      	ldrh	r3, [r4, #12]
 800cda6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cdaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdae:	81a3      	strh	r3, [r4, #12]
 800cdb0:	6126      	str	r6, [r4, #16]
 800cdb2:	6165      	str	r5, [r4, #20]
 800cdb4:	444e      	add	r6, r9
 800cdb6:	eba5 0509 	sub.w	r5, r5, r9
 800cdba:	6026      	str	r6, [r4, #0]
 800cdbc:	60a5      	str	r5, [r4, #8]
 800cdbe:	463e      	mov	r6, r7
 800cdc0:	42be      	cmp	r6, r7
 800cdc2:	d900      	bls.n	800cdc6 <__ssputs_r+0x86>
 800cdc4:	463e      	mov	r6, r7
 800cdc6:	4632      	mov	r2, r6
 800cdc8:	6820      	ldr	r0, [r4, #0]
 800cdca:	4641      	mov	r1, r8
 800cdcc:	f000 faa8 	bl	800d320 <memmove>
 800cdd0:	68a3      	ldr	r3, [r4, #8]
 800cdd2:	6822      	ldr	r2, [r4, #0]
 800cdd4:	1b9b      	subs	r3, r3, r6
 800cdd6:	4432      	add	r2, r6
 800cdd8:	60a3      	str	r3, [r4, #8]
 800cdda:	6022      	str	r2, [r4, #0]
 800cddc:	2000      	movs	r0, #0
 800cdde:	e7db      	b.n	800cd98 <__ssputs_r+0x58>
 800cde0:	462a      	mov	r2, r5
 800cde2:	f000 fab7 	bl	800d354 <_realloc_r>
 800cde6:	4606      	mov	r6, r0
 800cde8:	2800      	cmp	r0, #0
 800cdea:	d1e1      	bne.n	800cdb0 <__ssputs_r+0x70>
 800cdec:	6921      	ldr	r1, [r4, #16]
 800cdee:	4650      	mov	r0, sl
 800cdf0:	f7ff ff56 	bl	800cca0 <_free_r>
 800cdf4:	e7c7      	b.n	800cd86 <__ssputs_r+0x46>
	...

0800cdf8 <_svfiprintf_r>:
 800cdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdfc:	4698      	mov	r8, r3
 800cdfe:	898b      	ldrh	r3, [r1, #12]
 800ce00:	061b      	lsls	r3, r3, #24
 800ce02:	b09d      	sub	sp, #116	; 0x74
 800ce04:	4607      	mov	r7, r0
 800ce06:	460d      	mov	r5, r1
 800ce08:	4614      	mov	r4, r2
 800ce0a:	d50e      	bpl.n	800ce2a <_svfiprintf_r+0x32>
 800ce0c:	690b      	ldr	r3, [r1, #16]
 800ce0e:	b963      	cbnz	r3, 800ce2a <_svfiprintf_r+0x32>
 800ce10:	2140      	movs	r1, #64	; 0x40
 800ce12:	f7ff fe45 	bl	800caa0 <_malloc_r>
 800ce16:	6028      	str	r0, [r5, #0]
 800ce18:	6128      	str	r0, [r5, #16]
 800ce1a:	b920      	cbnz	r0, 800ce26 <_svfiprintf_r+0x2e>
 800ce1c:	230c      	movs	r3, #12
 800ce1e:	603b      	str	r3, [r7, #0]
 800ce20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce24:	e0d1      	b.n	800cfca <_svfiprintf_r+0x1d2>
 800ce26:	2340      	movs	r3, #64	; 0x40
 800ce28:	616b      	str	r3, [r5, #20]
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce2e:	2320      	movs	r3, #32
 800ce30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce34:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce38:	2330      	movs	r3, #48	; 0x30
 800ce3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cfe4 <_svfiprintf_r+0x1ec>
 800ce3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce42:	f04f 0901 	mov.w	r9, #1
 800ce46:	4623      	mov	r3, r4
 800ce48:	469a      	mov	sl, r3
 800ce4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce4e:	b10a      	cbz	r2, 800ce54 <_svfiprintf_r+0x5c>
 800ce50:	2a25      	cmp	r2, #37	; 0x25
 800ce52:	d1f9      	bne.n	800ce48 <_svfiprintf_r+0x50>
 800ce54:	ebba 0b04 	subs.w	fp, sl, r4
 800ce58:	d00b      	beq.n	800ce72 <_svfiprintf_r+0x7a>
 800ce5a:	465b      	mov	r3, fp
 800ce5c:	4622      	mov	r2, r4
 800ce5e:	4629      	mov	r1, r5
 800ce60:	4638      	mov	r0, r7
 800ce62:	f7ff ff6d 	bl	800cd40 <__ssputs_r>
 800ce66:	3001      	adds	r0, #1
 800ce68:	f000 80aa 	beq.w	800cfc0 <_svfiprintf_r+0x1c8>
 800ce6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce6e:	445a      	add	r2, fp
 800ce70:	9209      	str	r2, [sp, #36]	; 0x24
 800ce72:	f89a 3000 	ldrb.w	r3, [sl]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	f000 80a2 	beq.w	800cfc0 <_svfiprintf_r+0x1c8>
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce86:	f10a 0a01 	add.w	sl, sl, #1
 800ce8a:	9304      	str	r3, [sp, #16]
 800ce8c:	9307      	str	r3, [sp, #28]
 800ce8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce92:	931a      	str	r3, [sp, #104]	; 0x68
 800ce94:	4654      	mov	r4, sl
 800ce96:	2205      	movs	r2, #5
 800ce98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce9c:	4851      	ldr	r0, [pc, #324]	; (800cfe4 <_svfiprintf_r+0x1ec>)
 800ce9e:	f7f3 f9b7 	bl	8000210 <memchr>
 800cea2:	9a04      	ldr	r2, [sp, #16]
 800cea4:	b9d8      	cbnz	r0, 800cede <_svfiprintf_r+0xe6>
 800cea6:	06d0      	lsls	r0, r2, #27
 800cea8:	bf44      	itt	mi
 800ceaa:	2320      	movmi	r3, #32
 800ceac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ceb0:	0711      	lsls	r1, r2, #28
 800ceb2:	bf44      	itt	mi
 800ceb4:	232b      	movmi	r3, #43	; 0x2b
 800ceb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ceba:	f89a 3000 	ldrb.w	r3, [sl]
 800cebe:	2b2a      	cmp	r3, #42	; 0x2a
 800cec0:	d015      	beq.n	800ceee <_svfiprintf_r+0xf6>
 800cec2:	9a07      	ldr	r2, [sp, #28]
 800cec4:	4654      	mov	r4, sl
 800cec6:	2000      	movs	r0, #0
 800cec8:	f04f 0c0a 	mov.w	ip, #10
 800cecc:	4621      	mov	r1, r4
 800cece:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ced2:	3b30      	subs	r3, #48	; 0x30
 800ced4:	2b09      	cmp	r3, #9
 800ced6:	d94e      	bls.n	800cf76 <_svfiprintf_r+0x17e>
 800ced8:	b1b0      	cbz	r0, 800cf08 <_svfiprintf_r+0x110>
 800ceda:	9207      	str	r2, [sp, #28]
 800cedc:	e014      	b.n	800cf08 <_svfiprintf_r+0x110>
 800cede:	eba0 0308 	sub.w	r3, r0, r8
 800cee2:	fa09 f303 	lsl.w	r3, r9, r3
 800cee6:	4313      	orrs	r3, r2
 800cee8:	9304      	str	r3, [sp, #16]
 800ceea:	46a2      	mov	sl, r4
 800ceec:	e7d2      	b.n	800ce94 <_svfiprintf_r+0x9c>
 800ceee:	9b03      	ldr	r3, [sp, #12]
 800cef0:	1d19      	adds	r1, r3, #4
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	9103      	str	r1, [sp, #12]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	bfbb      	ittet	lt
 800cefa:	425b      	neglt	r3, r3
 800cefc:	f042 0202 	orrlt.w	r2, r2, #2
 800cf00:	9307      	strge	r3, [sp, #28]
 800cf02:	9307      	strlt	r3, [sp, #28]
 800cf04:	bfb8      	it	lt
 800cf06:	9204      	strlt	r2, [sp, #16]
 800cf08:	7823      	ldrb	r3, [r4, #0]
 800cf0a:	2b2e      	cmp	r3, #46	; 0x2e
 800cf0c:	d10c      	bne.n	800cf28 <_svfiprintf_r+0x130>
 800cf0e:	7863      	ldrb	r3, [r4, #1]
 800cf10:	2b2a      	cmp	r3, #42	; 0x2a
 800cf12:	d135      	bne.n	800cf80 <_svfiprintf_r+0x188>
 800cf14:	9b03      	ldr	r3, [sp, #12]
 800cf16:	1d1a      	adds	r2, r3, #4
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	9203      	str	r2, [sp, #12]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	bfb8      	it	lt
 800cf20:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cf24:	3402      	adds	r4, #2
 800cf26:	9305      	str	r3, [sp, #20]
 800cf28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cff4 <_svfiprintf_r+0x1fc>
 800cf2c:	7821      	ldrb	r1, [r4, #0]
 800cf2e:	2203      	movs	r2, #3
 800cf30:	4650      	mov	r0, sl
 800cf32:	f7f3 f96d 	bl	8000210 <memchr>
 800cf36:	b140      	cbz	r0, 800cf4a <_svfiprintf_r+0x152>
 800cf38:	2340      	movs	r3, #64	; 0x40
 800cf3a:	eba0 000a 	sub.w	r0, r0, sl
 800cf3e:	fa03 f000 	lsl.w	r0, r3, r0
 800cf42:	9b04      	ldr	r3, [sp, #16]
 800cf44:	4303      	orrs	r3, r0
 800cf46:	3401      	adds	r4, #1
 800cf48:	9304      	str	r3, [sp, #16]
 800cf4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf4e:	4826      	ldr	r0, [pc, #152]	; (800cfe8 <_svfiprintf_r+0x1f0>)
 800cf50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf54:	2206      	movs	r2, #6
 800cf56:	f7f3 f95b 	bl	8000210 <memchr>
 800cf5a:	2800      	cmp	r0, #0
 800cf5c:	d038      	beq.n	800cfd0 <_svfiprintf_r+0x1d8>
 800cf5e:	4b23      	ldr	r3, [pc, #140]	; (800cfec <_svfiprintf_r+0x1f4>)
 800cf60:	bb1b      	cbnz	r3, 800cfaa <_svfiprintf_r+0x1b2>
 800cf62:	9b03      	ldr	r3, [sp, #12]
 800cf64:	3307      	adds	r3, #7
 800cf66:	f023 0307 	bic.w	r3, r3, #7
 800cf6a:	3308      	adds	r3, #8
 800cf6c:	9303      	str	r3, [sp, #12]
 800cf6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf70:	4433      	add	r3, r6
 800cf72:	9309      	str	r3, [sp, #36]	; 0x24
 800cf74:	e767      	b.n	800ce46 <_svfiprintf_r+0x4e>
 800cf76:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf7a:	460c      	mov	r4, r1
 800cf7c:	2001      	movs	r0, #1
 800cf7e:	e7a5      	b.n	800cecc <_svfiprintf_r+0xd4>
 800cf80:	2300      	movs	r3, #0
 800cf82:	3401      	adds	r4, #1
 800cf84:	9305      	str	r3, [sp, #20]
 800cf86:	4619      	mov	r1, r3
 800cf88:	f04f 0c0a 	mov.w	ip, #10
 800cf8c:	4620      	mov	r0, r4
 800cf8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf92:	3a30      	subs	r2, #48	; 0x30
 800cf94:	2a09      	cmp	r2, #9
 800cf96:	d903      	bls.n	800cfa0 <_svfiprintf_r+0x1a8>
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d0c5      	beq.n	800cf28 <_svfiprintf_r+0x130>
 800cf9c:	9105      	str	r1, [sp, #20]
 800cf9e:	e7c3      	b.n	800cf28 <_svfiprintf_r+0x130>
 800cfa0:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	e7f0      	b.n	800cf8c <_svfiprintf_r+0x194>
 800cfaa:	ab03      	add	r3, sp, #12
 800cfac:	9300      	str	r3, [sp, #0]
 800cfae:	462a      	mov	r2, r5
 800cfb0:	4b0f      	ldr	r3, [pc, #60]	; (800cff0 <_svfiprintf_r+0x1f8>)
 800cfb2:	a904      	add	r1, sp, #16
 800cfb4:	4638      	mov	r0, r7
 800cfb6:	f3af 8000 	nop.w
 800cfba:	1c42      	adds	r2, r0, #1
 800cfbc:	4606      	mov	r6, r0
 800cfbe:	d1d6      	bne.n	800cf6e <_svfiprintf_r+0x176>
 800cfc0:	89ab      	ldrh	r3, [r5, #12]
 800cfc2:	065b      	lsls	r3, r3, #25
 800cfc4:	f53f af2c 	bmi.w	800ce20 <_svfiprintf_r+0x28>
 800cfc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfca:	b01d      	add	sp, #116	; 0x74
 800cfcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfd0:	ab03      	add	r3, sp, #12
 800cfd2:	9300      	str	r3, [sp, #0]
 800cfd4:	462a      	mov	r2, r5
 800cfd6:	4b06      	ldr	r3, [pc, #24]	; (800cff0 <_svfiprintf_r+0x1f8>)
 800cfd8:	a904      	add	r1, sp, #16
 800cfda:	4638      	mov	r0, r7
 800cfdc:	f000 f87a 	bl	800d0d4 <_printf_i>
 800cfe0:	e7eb      	b.n	800cfba <_svfiprintf_r+0x1c2>
 800cfe2:	bf00      	nop
 800cfe4:	0800dad4 	.word	0x0800dad4
 800cfe8:	0800dade 	.word	0x0800dade
 800cfec:	00000000 	.word	0x00000000
 800cff0:	0800cd41 	.word	0x0800cd41
 800cff4:	0800dada 	.word	0x0800dada

0800cff8 <_printf_common>:
 800cff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cffc:	4616      	mov	r6, r2
 800cffe:	4699      	mov	r9, r3
 800d000:	688a      	ldr	r2, [r1, #8]
 800d002:	690b      	ldr	r3, [r1, #16]
 800d004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d008:	4293      	cmp	r3, r2
 800d00a:	bfb8      	it	lt
 800d00c:	4613      	movlt	r3, r2
 800d00e:	6033      	str	r3, [r6, #0]
 800d010:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d014:	4607      	mov	r7, r0
 800d016:	460c      	mov	r4, r1
 800d018:	b10a      	cbz	r2, 800d01e <_printf_common+0x26>
 800d01a:	3301      	adds	r3, #1
 800d01c:	6033      	str	r3, [r6, #0]
 800d01e:	6823      	ldr	r3, [r4, #0]
 800d020:	0699      	lsls	r1, r3, #26
 800d022:	bf42      	ittt	mi
 800d024:	6833      	ldrmi	r3, [r6, #0]
 800d026:	3302      	addmi	r3, #2
 800d028:	6033      	strmi	r3, [r6, #0]
 800d02a:	6825      	ldr	r5, [r4, #0]
 800d02c:	f015 0506 	ands.w	r5, r5, #6
 800d030:	d106      	bne.n	800d040 <_printf_common+0x48>
 800d032:	f104 0a19 	add.w	sl, r4, #25
 800d036:	68e3      	ldr	r3, [r4, #12]
 800d038:	6832      	ldr	r2, [r6, #0]
 800d03a:	1a9b      	subs	r3, r3, r2
 800d03c:	42ab      	cmp	r3, r5
 800d03e:	dc26      	bgt.n	800d08e <_printf_common+0x96>
 800d040:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d044:	1e13      	subs	r3, r2, #0
 800d046:	6822      	ldr	r2, [r4, #0]
 800d048:	bf18      	it	ne
 800d04a:	2301      	movne	r3, #1
 800d04c:	0692      	lsls	r2, r2, #26
 800d04e:	d42b      	bmi.n	800d0a8 <_printf_common+0xb0>
 800d050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d054:	4649      	mov	r1, r9
 800d056:	4638      	mov	r0, r7
 800d058:	47c0      	blx	r8
 800d05a:	3001      	adds	r0, #1
 800d05c:	d01e      	beq.n	800d09c <_printf_common+0xa4>
 800d05e:	6823      	ldr	r3, [r4, #0]
 800d060:	68e5      	ldr	r5, [r4, #12]
 800d062:	6832      	ldr	r2, [r6, #0]
 800d064:	f003 0306 	and.w	r3, r3, #6
 800d068:	2b04      	cmp	r3, #4
 800d06a:	bf08      	it	eq
 800d06c:	1aad      	subeq	r5, r5, r2
 800d06e:	68a3      	ldr	r3, [r4, #8]
 800d070:	6922      	ldr	r2, [r4, #16]
 800d072:	bf0c      	ite	eq
 800d074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d078:	2500      	movne	r5, #0
 800d07a:	4293      	cmp	r3, r2
 800d07c:	bfc4      	itt	gt
 800d07e:	1a9b      	subgt	r3, r3, r2
 800d080:	18ed      	addgt	r5, r5, r3
 800d082:	2600      	movs	r6, #0
 800d084:	341a      	adds	r4, #26
 800d086:	42b5      	cmp	r5, r6
 800d088:	d11a      	bne.n	800d0c0 <_printf_common+0xc8>
 800d08a:	2000      	movs	r0, #0
 800d08c:	e008      	b.n	800d0a0 <_printf_common+0xa8>
 800d08e:	2301      	movs	r3, #1
 800d090:	4652      	mov	r2, sl
 800d092:	4649      	mov	r1, r9
 800d094:	4638      	mov	r0, r7
 800d096:	47c0      	blx	r8
 800d098:	3001      	adds	r0, #1
 800d09a:	d103      	bne.n	800d0a4 <_printf_common+0xac>
 800d09c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0a4:	3501      	adds	r5, #1
 800d0a6:	e7c6      	b.n	800d036 <_printf_common+0x3e>
 800d0a8:	18e1      	adds	r1, r4, r3
 800d0aa:	1c5a      	adds	r2, r3, #1
 800d0ac:	2030      	movs	r0, #48	; 0x30
 800d0ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d0b2:	4422      	add	r2, r4
 800d0b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d0bc:	3302      	adds	r3, #2
 800d0be:	e7c7      	b.n	800d050 <_printf_common+0x58>
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	4622      	mov	r2, r4
 800d0c4:	4649      	mov	r1, r9
 800d0c6:	4638      	mov	r0, r7
 800d0c8:	47c0      	blx	r8
 800d0ca:	3001      	adds	r0, #1
 800d0cc:	d0e6      	beq.n	800d09c <_printf_common+0xa4>
 800d0ce:	3601      	adds	r6, #1
 800d0d0:	e7d9      	b.n	800d086 <_printf_common+0x8e>
	...

0800d0d4 <_printf_i>:
 800d0d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0d8:	460c      	mov	r4, r1
 800d0da:	4691      	mov	r9, r2
 800d0dc:	7e27      	ldrb	r7, [r4, #24]
 800d0de:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d0e0:	2f78      	cmp	r7, #120	; 0x78
 800d0e2:	4680      	mov	r8, r0
 800d0e4:	469a      	mov	sl, r3
 800d0e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0ea:	d807      	bhi.n	800d0fc <_printf_i+0x28>
 800d0ec:	2f62      	cmp	r7, #98	; 0x62
 800d0ee:	d80a      	bhi.n	800d106 <_printf_i+0x32>
 800d0f0:	2f00      	cmp	r7, #0
 800d0f2:	f000 80d8 	beq.w	800d2a6 <_printf_i+0x1d2>
 800d0f6:	2f58      	cmp	r7, #88	; 0x58
 800d0f8:	f000 80a3 	beq.w	800d242 <_printf_i+0x16e>
 800d0fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d100:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d104:	e03a      	b.n	800d17c <_printf_i+0xa8>
 800d106:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d10a:	2b15      	cmp	r3, #21
 800d10c:	d8f6      	bhi.n	800d0fc <_printf_i+0x28>
 800d10e:	a001      	add	r0, pc, #4	; (adr r0, 800d114 <_printf_i+0x40>)
 800d110:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d114:	0800d16d 	.word	0x0800d16d
 800d118:	0800d181 	.word	0x0800d181
 800d11c:	0800d0fd 	.word	0x0800d0fd
 800d120:	0800d0fd 	.word	0x0800d0fd
 800d124:	0800d0fd 	.word	0x0800d0fd
 800d128:	0800d0fd 	.word	0x0800d0fd
 800d12c:	0800d181 	.word	0x0800d181
 800d130:	0800d0fd 	.word	0x0800d0fd
 800d134:	0800d0fd 	.word	0x0800d0fd
 800d138:	0800d0fd 	.word	0x0800d0fd
 800d13c:	0800d0fd 	.word	0x0800d0fd
 800d140:	0800d28d 	.word	0x0800d28d
 800d144:	0800d1b1 	.word	0x0800d1b1
 800d148:	0800d26f 	.word	0x0800d26f
 800d14c:	0800d0fd 	.word	0x0800d0fd
 800d150:	0800d0fd 	.word	0x0800d0fd
 800d154:	0800d2af 	.word	0x0800d2af
 800d158:	0800d0fd 	.word	0x0800d0fd
 800d15c:	0800d1b1 	.word	0x0800d1b1
 800d160:	0800d0fd 	.word	0x0800d0fd
 800d164:	0800d0fd 	.word	0x0800d0fd
 800d168:	0800d277 	.word	0x0800d277
 800d16c:	680b      	ldr	r3, [r1, #0]
 800d16e:	1d1a      	adds	r2, r3, #4
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	600a      	str	r2, [r1, #0]
 800d174:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d17c:	2301      	movs	r3, #1
 800d17e:	e0a3      	b.n	800d2c8 <_printf_i+0x1f4>
 800d180:	6825      	ldr	r5, [r4, #0]
 800d182:	6808      	ldr	r0, [r1, #0]
 800d184:	062e      	lsls	r6, r5, #24
 800d186:	f100 0304 	add.w	r3, r0, #4
 800d18a:	d50a      	bpl.n	800d1a2 <_printf_i+0xce>
 800d18c:	6805      	ldr	r5, [r0, #0]
 800d18e:	600b      	str	r3, [r1, #0]
 800d190:	2d00      	cmp	r5, #0
 800d192:	da03      	bge.n	800d19c <_printf_i+0xc8>
 800d194:	232d      	movs	r3, #45	; 0x2d
 800d196:	426d      	negs	r5, r5
 800d198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d19c:	485e      	ldr	r0, [pc, #376]	; (800d318 <_printf_i+0x244>)
 800d19e:	230a      	movs	r3, #10
 800d1a0:	e019      	b.n	800d1d6 <_printf_i+0x102>
 800d1a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d1a6:	6805      	ldr	r5, [r0, #0]
 800d1a8:	600b      	str	r3, [r1, #0]
 800d1aa:	bf18      	it	ne
 800d1ac:	b22d      	sxthne	r5, r5
 800d1ae:	e7ef      	b.n	800d190 <_printf_i+0xbc>
 800d1b0:	680b      	ldr	r3, [r1, #0]
 800d1b2:	6825      	ldr	r5, [r4, #0]
 800d1b4:	1d18      	adds	r0, r3, #4
 800d1b6:	6008      	str	r0, [r1, #0]
 800d1b8:	0628      	lsls	r0, r5, #24
 800d1ba:	d501      	bpl.n	800d1c0 <_printf_i+0xec>
 800d1bc:	681d      	ldr	r5, [r3, #0]
 800d1be:	e002      	b.n	800d1c6 <_printf_i+0xf2>
 800d1c0:	0669      	lsls	r1, r5, #25
 800d1c2:	d5fb      	bpl.n	800d1bc <_printf_i+0xe8>
 800d1c4:	881d      	ldrh	r5, [r3, #0]
 800d1c6:	4854      	ldr	r0, [pc, #336]	; (800d318 <_printf_i+0x244>)
 800d1c8:	2f6f      	cmp	r7, #111	; 0x6f
 800d1ca:	bf0c      	ite	eq
 800d1cc:	2308      	moveq	r3, #8
 800d1ce:	230a      	movne	r3, #10
 800d1d0:	2100      	movs	r1, #0
 800d1d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d1d6:	6866      	ldr	r6, [r4, #4]
 800d1d8:	60a6      	str	r6, [r4, #8]
 800d1da:	2e00      	cmp	r6, #0
 800d1dc:	bfa2      	ittt	ge
 800d1de:	6821      	ldrge	r1, [r4, #0]
 800d1e0:	f021 0104 	bicge.w	r1, r1, #4
 800d1e4:	6021      	strge	r1, [r4, #0]
 800d1e6:	b90d      	cbnz	r5, 800d1ec <_printf_i+0x118>
 800d1e8:	2e00      	cmp	r6, #0
 800d1ea:	d04d      	beq.n	800d288 <_printf_i+0x1b4>
 800d1ec:	4616      	mov	r6, r2
 800d1ee:	fbb5 f1f3 	udiv	r1, r5, r3
 800d1f2:	fb03 5711 	mls	r7, r3, r1, r5
 800d1f6:	5dc7      	ldrb	r7, [r0, r7]
 800d1f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d1fc:	462f      	mov	r7, r5
 800d1fe:	42bb      	cmp	r3, r7
 800d200:	460d      	mov	r5, r1
 800d202:	d9f4      	bls.n	800d1ee <_printf_i+0x11a>
 800d204:	2b08      	cmp	r3, #8
 800d206:	d10b      	bne.n	800d220 <_printf_i+0x14c>
 800d208:	6823      	ldr	r3, [r4, #0]
 800d20a:	07df      	lsls	r7, r3, #31
 800d20c:	d508      	bpl.n	800d220 <_printf_i+0x14c>
 800d20e:	6923      	ldr	r3, [r4, #16]
 800d210:	6861      	ldr	r1, [r4, #4]
 800d212:	4299      	cmp	r1, r3
 800d214:	bfde      	ittt	le
 800d216:	2330      	movle	r3, #48	; 0x30
 800d218:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d21c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800d220:	1b92      	subs	r2, r2, r6
 800d222:	6122      	str	r2, [r4, #16]
 800d224:	f8cd a000 	str.w	sl, [sp]
 800d228:	464b      	mov	r3, r9
 800d22a:	aa03      	add	r2, sp, #12
 800d22c:	4621      	mov	r1, r4
 800d22e:	4640      	mov	r0, r8
 800d230:	f7ff fee2 	bl	800cff8 <_printf_common>
 800d234:	3001      	adds	r0, #1
 800d236:	d14c      	bne.n	800d2d2 <_printf_i+0x1fe>
 800d238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d23c:	b004      	add	sp, #16
 800d23e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d242:	4835      	ldr	r0, [pc, #212]	; (800d318 <_printf_i+0x244>)
 800d244:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d248:	6823      	ldr	r3, [r4, #0]
 800d24a:	680e      	ldr	r6, [r1, #0]
 800d24c:	061f      	lsls	r7, r3, #24
 800d24e:	f856 5b04 	ldr.w	r5, [r6], #4
 800d252:	600e      	str	r6, [r1, #0]
 800d254:	d514      	bpl.n	800d280 <_printf_i+0x1ac>
 800d256:	07d9      	lsls	r1, r3, #31
 800d258:	bf44      	itt	mi
 800d25a:	f043 0320 	orrmi.w	r3, r3, #32
 800d25e:	6023      	strmi	r3, [r4, #0]
 800d260:	b91d      	cbnz	r5, 800d26a <_printf_i+0x196>
 800d262:	6823      	ldr	r3, [r4, #0]
 800d264:	f023 0320 	bic.w	r3, r3, #32
 800d268:	6023      	str	r3, [r4, #0]
 800d26a:	2310      	movs	r3, #16
 800d26c:	e7b0      	b.n	800d1d0 <_printf_i+0xfc>
 800d26e:	6823      	ldr	r3, [r4, #0]
 800d270:	f043 0320 	orr.w	r3, r3, #32
 800d274:	6023      	str	r3, [r4, #0]
 800d276:	2378      	movs	r3, #120	; 0x78
 800d278:	4828      	ldr	r0, [pc, #160]	; (800d31c <_printf_i+0x248>)
 800d27a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d27e:	e7e3      	b.n	800d248 <_printf_i+0x174>
 800d280:	065e      	lsls	r6, r3, #25
 800d282:	bf48      	it	mi
 800d284:	b2ad      	uxthmi	r5, r5
 800d286:	e7e6      	b.n	800d256 <_printf_i+0x182>
 800d288:	4616      	mov	r6, r2
 800d28a:	e7bb      	b.n	800d204 <_printf_i+0x130>
 800d28c:	680b      	ldr	r3, [r1, #0]
 800d28e:	6826      	ldr	r6, [r4, #0]
 800d290:	6960      	ldr	r0, [r4, #20]
 800d292:	1d1d      	adds	r5, r3, #4
 800d294:	600d      	str	r5, [r1, #0]
 800d296:	0635      	lsls	r5, r6, #24
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	d501      	bpl.n	800d2a0 <_printf_i+0x1cc>
 800d29c:	6018      	str	r0, [r3, #0]
 800d29e:	e002      	b.n	800d2a6 <_printf_i+0x1d2>
 800d2a0:	0671      	lsls	r1, r6, #25
 800d2a2:	d5fb      	bpl.n	800d29c <_printf_i+0x1c8>
 800d2a4:	8018      	strh	r0, [r3, #0]
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	6123      	str	r3, [r4, #16]
 800d2aa:	4616      	mov	r6, r2
 800d2ac:	e7ba      	b.n	800d224 <_printf_i+0x150>
 800d2ae:	680b      	ldr	r3, [r1, #0]
 800d2b0:	1d1a      	adds	r2, r3, #4
 800d2b2:	600a      	str	r2, [r1, #0]
 800d2b4:	681e      	ldr	r6, [r3, #0]
 800d2b6:	6862      	ldr	r2, [r4, #4]
 800d2b8:	2100      	movs	r1, #0
 800d2ba:	4630      	mov	r0, r6
 800d2bc:	f7f2 ffa8 	bl	8000210 <memchr>
 800d2c0:	b108      	cbz	r0, 800d2c6 <_printf_i+0x1f2>
 800d2c2:	1b80      	subs	r0, r0, r6
 800d2c4:	6060      	str	r0, [r4, #4]
 800d2c6:	6863      	ldr	r3, [r4, #4]
 800d2c8:	6123      	str	r3, [r4, #16]
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2d0:	e7a8      	b.n	800d224 <_printf_i+0x150>
 800d2d2:	6923      	ldr	r3, [r4, #16]
 800d2d4:	4632      	mov	r2, r6
 800d2d6:	4649      	mov	r1, r9
 800d2d8:	4640      	mov	r0, r8
 800d2da:	47d0      	blx	sl
 800d2dc:	3001      	adds	r0, #1
 800d2de:	d0ab      	beq.n	800d238 <_printf_i+0x164>
 800d2e0:	6823      	ldr	r3, [r4, #0]
 800d2e2:	079b      	lsls	r3, r3, #30
 800d2e4:	d413      	bmi.n	800d30e <_printf_i+0x23a>
 800d2e6:	68e0      	ldr	r0, [r4, #12]
 800d2e8:	9b03      	ldr	r3, [sp, #12]
 800d2ea:	4298      	cmp	r0, r3
 800d2ec:	bfb8      	it	lt
 800d2ee:	4618      	movlt	r0, r3
 800d2f0:	e7a4      	b.n	800d23c <_printf_i+0x168>
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	4632      	mov	r2, r6
 800d2f6:	4649      	mov	r1, r9
 800d2f8:	4640      	mov	r0, r8
 800d2fa:	47d0      	blx	sl
 800d2fc:	3001      	adds	r0, #1
 800d2fe:	d09b      	beq.n	800d238 <_printf_i+0x164>
 800d300:	3501      	adds	r5, #1
 800d302:	68e3      	ldr	r3, [r4, #12]
 800d304:	9903      	ldr	r1, [sp, #12]
 800d306:	1a5b      	subs	r3, r3, r1
 800d308:	42ab      	cmp	r3, r5
 800d30a:	dcf2      	bgt.n	800d2f2 <_printf_i+0x21e>
 800d30c:	e7eb      	b.n	800d2e6 <_printf_i+0x212>
 800d30e:	2500      	movs	r5, #0
 800d310:	f104 0619 	add.w	r6, r4, #25
 800d314:	e7f5      	b.n	800d302 <_printf_i+0x22e>
 800d316:	bf00      	nop
 800d318:	0800dae5 	.word	0x0800dae5
 800d31c:	0800daf6 	.word	0x0800daf6

0800d320 <memmove>:
 800d320:	4288      	cmp	r0, r1
 800d322:	b510      	push	{r4, lr}
 800d324:	eb01 0402 	add.w	r4, r1, r2
 800d328:	d902      	bls.n	800d330 <memmove+0x10>
 800d32a:	4284      	cmp	r4, r0
 800d32c:	4623      	mov	r3, r4
 800d32e:	d807      	bhi.n	800d340 <memmove+0x20>
 800d330:	1e43      	subs	r3, r0, #1
 800d332:	42a1      	cmp	r1, r4
 800d334:	d008      	beq.n	800d348 <memmove+0x28>
 800d336:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d33a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d33e:	e7f8      	b.n	800d332 <memmove+0x12>
 800d340:	4402      	add	r2, r0
 800d342:	4601      	mov	r1, r0
 800d344:	428a      	cmp	r2, r1
 800d346:	d100      	bne.n	800d34a <memmove+0x2a>
 800d348:	bd10      	pop	{r4, pc}
 800d34a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d34e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d352:	e7f7      	b.n	800d344 <memmove+0x24>

0800d354 <_realloc_r>:
 800d354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d356:	4607      	mov	r7, r0
 800d358:	4614      	mov	r4, r2
 800d35a:	460e      	mov	r6, r1
 800d35c:	b921      	cbnz	r1, 800d368 <_realloc_r+0x14>
 800d35e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d362:	4611      	mov	r1, r2
 800d364:	f7ff bb9c 	b.w	800caa0 <_malloc_r>
 800d368:	b922      	cbnz	r2, 800d374 <_realloc_r+0x20>
 800d36a:	f7ff fc99 	bl	800cca0 <_free_r>
 800d36e:	4625      	mov	r5, r4
 800d370:	4628      	mov	r0, r5
 800d372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d374:	f000 f814 	bl	800d3a0 <_malloc_usable_size_r>
 800d378:	42a0      	cmp	r0, r4
 800d37a:	d20f      	bcs.n	800d39c <_realloc_r+0x48>
 800d37c:	4621      	mov	r1, r4
 800d37e:	4638      	mov	r0, r7
 800d380:	f7ff fb8e 	bl	800caa0 <_malloc_r>
 800d384:	4605      	mov	r5, r0
 800d386:	2800      	cmp	r0, #0
 800d388:	d0f2      	beq.n	800d370 <_realloc_r+0x1c>
 800d38a:	4631      	mov	r1, r6
 800d38c:	4622      	mov	r2, r4
 800d38e:	f7ff fb71 	bl	800ca74 <memcpy>
 800d392:	4631      	mov	r1, r6
 800d394:	4638      	mov	r0, r7
 800d396:	f7ff fc83 	bl	800cca0 <_free_r>
 800d39a:	e7e9      	b.n	800d370 <_realloc_r+0x1c>
 800d39c:	4635      	mov	r5, r6
 800d39e:	e7e7      	b.n	800d370 <_realloc_r+0x1c>

0800d3a0 <_malloc_usable_size_r>:
 800d3a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3a4:	1f18      	subs	r0, r3, #4
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	bfbc      	itt	lt
 800d3aa:	580b      	ldrlt	r3, [r1, r0]
 800d3ac:	18c0      	addlt	r0, r0, r3
 800d3ae:	4770      	bx	lr

0800d3b0 <_init>:
 800d3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3b2:	bf00      	nop
 800d3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3b6:	bc08      	pop	{r3}
 800d3b8:	469e      	mov	lr, r3
 800d3ba:	4770      	bx	lr

0800d3bc <_fini>:
 800d3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3be:	bf00      	nop
 800d3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3c2:	bc08      	pop	{r3}
 800d3c4:	469e      	mov	lr, r3
 800d3c6:	4770      	bx	lr
